
F3Discovery_CPP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004e9c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001cc  08005024  08005024  00015024  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000110  080051f0  080051f0  000151f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM          00000158  08005300  08005300  00015300  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005458  08005458  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08005458  08005458  00015458  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005460  08005460  00015460  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08005464  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020078  2**0
                  CONTENTS
 10 .bss          000003f8  20000078  20000078  00020078  2**2
                  ALLOC
 11 ._user_heap_stack 00000c00  20000470  20000470  00020078  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 13 .debug_info   00016785  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003a67  00000000  00000000  0003682d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ea8  00000000  00000000  0003a298  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000d10  00000000  00000000  0003b140  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022fea  00000000  00000000  0003be50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00015360  00000000  00000000  0005ee3a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ba0fb  00000000  00000000  0007419a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0012e295  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004980  00000000  00000000  0012e2e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000078 	.word	0x20000078
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800500c 	.word	0x0800500c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000007c 	.word	0x2000007c
 80001c4:	0800500c 	.word	0x0800500c

080001c8 <strcmp>:
 80001c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001cc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d0:	2a01      	cmp	r2, #1
 80001d2:	bf28      	it	cs
 80001d4:	429a      	cmpcs	r2, r3
 80001d6:	d0f7      	beq.n	80001c8 <strcmp>
 80001d8:	1ad0      	subs	r0, r2, r3
 80001da:	4770      	bx	lr

080001dc <selfrel_offset31>:
 80001dc:	6803      	ldr	r3, [r0, #0]
 80001de:	005a      	lsls	r2, r3, #1
 80001e0:	bf4c      	ite	mi
 80001e2:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 80001e6:	f023 4300 	bicpl.w	r3, r3, #2147483648	; 0x80000000
 80001ea:	4418      	add	r0, r3
 80001ec:	4770      	bx	lr
 80001ee:	bf00      	nop

080001f0 <search_EIT_table>:
 80001f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80001f4:	b329      	cbz	r1, 8000242 <search_EIT_table+0x52>
 80001f6:	1e4f      	subs	r7, r1, #1
 80001f8:	4604      	mov	r4, r0
 80001fa:	4615      	mov	r5, r2
 80001fc:	463e      	mov	r6, r7
 80001fe:	f04f 0800 	mov.w	r8, #0
 8000202:	eb08 0106 	add.w	r1, r8, r6
 8000206:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
 800020a:	1049      	asrs	r1, r1, #1
 800020c:	eb04 09c1 	add.w	r9, r4, r1, lsl #3
 8000210:	4648      	mov	r0, r9
 8000212:	f7ff ffe3 	bl	80001dc <selfrel_offset31>
 8000216:	4603      	mov	r3, r0
 8000218:	00c8      	lsls	r0, r1, #3
 800021a:	3008      	adds	r0, #8
 800021c:	428f      	cmp	r7, r1
 800021e:	4420      	add	r0, r4
 8000220:	d009      	beq.n	8000236 <search_EIT_table+0x46>
 8000222:	42ab      	cmp	r3, r5
 8000224:	d809      	bhi.n	800023a <search_EIT_table+0x4a>
 8000226:	f7ff ffd9 	bl	80001dc <selfrel_offset31>
 800022a:	3801      	subs	r0, #1
 800022c:	42a8      	cmp	r0, r5
 800022e:	d20a      	bcs.n	8000246 <search_EIT_table+0x56>
 8000230:	f101 0801 	add.w	r8, r1, #1
 8000234:	e7e5      	b.n	8000202 <search_EIT_table+0x12>
 8000236:	42ab      	cmp	r3, r5
 8000238:	d905      	bls.n	8000246 <search_EIT_table+0x56>
 800023a:	4588      	cmp	r8, r1
 800023c:	d001      	beq.n	8000242 <search_EIT_table+0x52>
 800023e:	1e4e      	subs	r6, r1, #1
 8000240:	e7df      	b.n	8000202 <search_EIT_table+0x12>
 8000242:	f04f 0900 	mov.w	r9, #0
 8000246:	4648      	mov	r0, r9
 8000248:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800024c <__gnu_unwind_get_pr_addr>:
 800024c:	2801      	cmp	r0, #1
 800024e:	d007      	beq.n	8000260 <__gnu_unwind_get_pr_addr+0x14>
 8000250:	2802      	cmp	r0, #2
 8000252:	d007      	beq.n	8000264 <__gnu_unwind_get_pr_addr+0x18>
 8000254:	4b04      	ldr	r3, [pc, #16]	; (8000268 <__gnu_unwind_get_pr_addr+0x1c>)
 8000256:	2800      	cmp	r0, #0
 8000258:	bf0c      	ite	eq
 800025a:	4618      	moveq	r0, r3
 800025c:	2000      	movne	r0, #0
 800025e:	4770      	bx	lr
 8000260:	4802      	ldr	r0, [pc, #8]	; (800026c <__gnu_unwind_get_pr_addr+0x20>)
 8000262:	4770      	bx	lr
 8000264:	4802      	ldr	r0, [pc, #8]	; (8000270 <__gnu_unwind_get_pr_addr+0x24>)
 8000266:	4770      	bx	lr
 8000268:	08000925 	.word	0x08000925
 800026c:	08000929 	.word	0x08000929
 8000270:	0800092d 	.word	0x0800092d

08000274 <get_eit_entry>:
 8000274:	b530      	push	{r4, r5, lr}
 8000276:	4b23      	ldr	r3, [pc, #140]	; (8000304 <get_eit_entry+0x90>)
 8000278:	b083      	sub	sp, #12
 800027a:	4604      	mov	r4, r0
 800027c:	1e8d      	subs	r5, r1, #2
 800027e:	b33b      	cbz	r3, 80002d0 <get_eit_entry+0x5c>
 8000280:	a901      	add	r1, sp, #4
 8000282:	4628      	mov	r0, r5
 8000284:	f3af 8000 	nop.w
 8000288:	b1e8      	cbz	r0, 80002c6 <get_eit_entry+0x52>
 800028a:	9901      	ldr	r1, [sp, #4]
 800028c:	462a      	mov	r2, r5
 800028e:	f7ff ffaf 	bl	80001f0 <search_EIT_table>
 8000292:	4601      	mov	r1, r0
 8000294:	b1b8      	cbz	r0, 80002c6 <get_eit_entry+0x52>
 8000296:	f7ff ffa1 	bl	80001dc <selfrel_offset31>
 800029a:	684b      	ldr	r3, [r1, #4]
 800029c:	64a0      	str	r0, [r4, #72]	; 0x48
 800029e:	2b01      	cmp	r3, #1
 80002a0:	d02c      	beq.n	80002fc <get_eit_entry+0x88>
 80002a2:	2b00      	cmp	r3, #0
 80002a4:	f101 0004 	add.w	r0, r1, #4
 80002a8:	db24      	blt.n	80002f4 <get_eit_entry+0x80>
 80002aa:	f7ff ff97 	bl	80001dc <selfrel_offset31>
 80002ae:	2300      	movs	r3, #0
 80002b0:	e9c4 0313 	strd	r0, r3, [r4, #76]	; 0x4c
 80002b4:	6803      	ldr	r3, [r0, #0]
 80002b6:	2b00      	cmp	r3, #0
 80002b8:	db11      	blt.n	80002de <get_eit_entry+0x6a>
 80002ba:	f7ff ff8f 	bl	80001dc <selfrel_offset31>
 80002be:	6120      	str	r0, [r4, #16]
 80002c0:	2000      	movs	r0, #0
 80002c2:	b003      	add	sp, #12
 80002c4:	bd30      	pop	{r4, r5, pc}
 80002c6:	2300      	movs	r3, #0
 80002c8:	2009      	movs	r0, #9
 80002ca:	6123      	str	r3, [r4, #16]
 80002cc:	b003      	add	sp, #12
 80002ce:	bd30      	pop	{r4, r5, pc}
 80002d0:	4b0d      	ldr	r3, [pc, #52]	; (8000308 <get_eit_entry+0x94>)
 80002d2:	490e      	ldr	r1, [pc, #56]	; (800030c <get_eit_entry+0x98>)
 80002d4:	1ac9      	subs	r1, r1, r3
 80002d6:	10c9      	asrs	r1, r1, #3
 80002d8:	4618      	mov	r0, r3
 80002da:	9101      	str	r1, [sp, #4]
 80002dc:	e7d6      	b.n	800028c <get_eit_entry+0x18>
 80002de:	f3c3 6003 	ubfx	r0, r3, #24, #4
 80002e2:	f7ff ffb3 	bl	800024c <__gnu_unwind_get_pr_addr>
 80002e6:	2800      	cmp	r0, #0
 80002e8:	6120      	str	r0, [r4, #16]
 80002ea:	bf14      	ite	ne
 80002ec:	2000      	movne	r0, #0
 80002ee:	2009      	moveq	r0, #9
 80002f0:	b003      	add	sp, #12
 80002f2:	bd30      	pop	{r4, r5, pc}
 80002f4:	2301      	movs	r3, #1
 80002f6:	e9c4 0313 	strd	r0, r3, [r4, #76]	; 0x4c
 80002fa:	e7db      	b.n	80002b4 <get_eit_entry+0x40>
 80002fc:	2300      	movs	r3, #0
 80002fe:	6123      	str	r3, [r4, #16]
 8000300:	2005      	movs	r0, #5
 8000302:	e7de      	b.n	80002c2 <get_eit_entry+0x4e>
 8000304:	00000000 	.word	0x00000000
 8000308:	08005300 	.word	0x08005300
 800030c:	08005458 	.word	0x08005458

08000310 <restore_non_core_regs>:
 8000310:	6803      	ldr	r3, [r0, #0]
 8000312:	07da      	lsls	r2, r3, #31
 8000314:	b510      	push	{r4, lr}
 8000316:	4604      	mov	r4, r0
 8000318:	d406      	bmi.n	8000328 <restore_non_core_regs+0x18>
 800031a:	079b      	lsls	r3, r3, #30
 800031c:	f100 0048 	add.w	r0, r0, #72	; 0x48
 8000320:	d509      	bpl.n	8000336 <restore_non_core_regs+0x26>
 8000322:	f000 fc5b 	bl	8000bdc <__gnu_Unwind_Restore_VFP_D>
 8000326:	6823      	ldr	r3, [r4, #0]
 8000328:	0759      	lsls	r1, r3, #29
 800032a:	d509      	bpl.n	8000340 <restore_non_core_regs+0x30>
 800032c:	071a      	lsls	r2, r3, #28
 800032e:	d50e      	bpl.n	800034e <restore_non_core_regs+0x3e>
 8000330:	06db      	lsls	r3, r3, #27
 8000332:	d513      	bpl.n	800035c <restore_non_core_regs+0x4c>
 8000334:	bd10      	pop	{r4, pc}
 8000336:	f000 fc49 	bl	8000bcc <__gnu_Unwind_Restore_VFP>
 800033a:	6823      	ldr	r3, [r4, #0]
 800033c:	0759      	lsls	r1, r3, #29
 800033e:	d4f5      	bmi.n	800032c <restore_non_core_regs+0x1c>
 8000340:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8000344:	f000 fc52 	bl	8000bec <__gnu_Unwind_Restore_VFP_D_16_to_31>
 8000348:	6823      	ldr	r3, [r4, #0]
 800034a:	071a      	lsls	r2, r3, #28
 800034c:	d4f0      	bmi.n	8000330 <restore_non_core_regs+0x20>
 800034e:	f504 70a8 	add.w	r0, r4, #336	; 0x150
 8000352:	f000 fc53 	bl	8000bfc <__gnu_Unwind_Restore_WMMXD>
 8000356:	6823      	ldr	r3, [r4, #0]
 8000358:	06db      	lsls	r3, r3, #27
 800035a:	d4eb      	bmi.n	8000334 <restore_non_core_regs+0x24>
 800035c:	f504 70e8 	add.w	r0, r4, #464	; 0x1d0
 8000360:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000364:	f000 bc8e 	b.w	8000c84 <__gnu_Unwind_Restore_WMMXC>

08000368 <__gnu_unwind_24bit.constprop.0>:
 8000368:	2009      	movs	r0, #9
 800036a:	4770      	bx	lr

0800036c <_Unwind_decode_typeinfo_ptr.constprop.0>:
 800036c:	4603      	mov	r3, r0
 800036e:	6800      	ldr	r0, [r0, #0]
 8000370:	b100      	cbz	r0, 8000374 <_Unwind_decode_typeinfo_ptr.constprop.0+0x8>
 8000372:	4418      	add	r0, r3
 8000374:	4770      	bx	lr
 8000376:	bf00      	nop

08000378 <_Unwind_DebugHook>:
 8000378:	4770      	bx	lr
 800037a:	bf00      	nop

0800037c <unwind_phase2>:
 800037c:	b570      	push	{r4, r5, r6, lr}
 800037e:	4604      	mov	r4, r0
 8000380:	460e      	mov	r6, r1
 8000382:	6c31      	ldr	r1, [r6, #64]	; 0x40
 8000384:	4620      	mov	r0, r4
 8000386:	f7ff ff75 	bl	8000274 <get_eit_entry>
 800038a:	4605      	mov	r5, r0
 800038c:	b988      	cbnz	r0, 80003b2 <unwind_phase2+0x36>
 800038e:	6c32      	ldr	r2, [r6, #64]	; 0x40
 8000390:	6162      	str	r2, [r4, #20]
 8000392:	6923      	ldr	r3, [r4, #16]
 8000394:	4632      	mov	r2, r6
 8000396:	4621      	mov	r1, r4
 8000398:	2001      	movs	r0, #1
 800039a:	4798      	blx	r3
 800039c:	2808      	cmp	r0, #8
 800039e:	d0f0      	beq.n	8000382 <unwind_phase2+0x6>
 80003a0:	2807      	cmp	r0, #7
 80003a2:	d106      	bne.n	80003b2 <unwind_phase2+0x36>
 80003a4:	4628      	mov	r0, r5
 80003a6:	6c31      	ldr	r1, [r6, #64]	; 0x40
 80003a8:	f7ff ffe6 	bl	8000378 <_Unwind_DebugHook>
 80003ac:	1d30      	adds	r0, r6, #4
 80003ae:	f000 fc01 	bl	8000bb4 <__restore_core_regs>
 80003b2:	f004 fc8b 	bl	8004ccc <abort>
 80003b6:	bf00      	nop

080003b8 <unwind_phase2_forced>:
 80003b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003bc:	1d0d      	adds	r5, r1, #4
 80003be:	f8d0 800c 	ldr.w	r8, [r0, #12]
 80003c2:	f8d0 9018 	ldr.w	r9, [r0, #24]
 80003c6:	4607      	mov	r7, r0
 80003c8:	4614      	mov	r4, r2
 80003ca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80003cc:	f5ad 7d72 	sub.w	sp, sp, #968	; 0x3c8
 80003d0:	f10d 0c0c 	add.w	ip, sp, #12
 80003d4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80003d8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80003da:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80003de:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80003e0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80003e4:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80003e8:	ae02      	add	r6, sp, #8
 80003ea:	f04f 0e00 	mov.w	lr, #0
 80003ee:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
 80003f2:	f8c6 e000 	str.w	lr, [r6]
 80003f6:	e020      	b.n	800043a <unwind_phase2_forced+0x82>
 80003f8:	6c33      	ldr	r3, [r6, #64]	; 0x40
 80003fa:	617b      	str	r3, [r7, #20]
 80003fc:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8000400:	4631      	mov	r1, r6
 8000402:	a87a      	add	r0, sp, #488	; 0x1e8
 8000404:	f004 fdf4 	bl	8004ff0 <memcpy>
 8000408:	693b      	ldr	r3, [r7, #16]
 800040a:	aa7a      	add	r2, sp, #488	; 0x1e8
 800040c:	4639      	mov	r1, r7
 800040e:	4650      	mov	r0, sl
 8000410:	4798      	blx	r3
 8000412:	9b88      	ldr	r3, [sp, #544]	; 0x220
 8000414:	6473      	str	r3, [r6, #68]	; 0x44
 8000416:	4621      	mov	r1, r4
 8000418:	e9cd 6900 	strd	r6, r9, [sp]
 800041c:	4605      	mov	r5, r0
 800041e:	463b      	mov	r3, r7
 8000420:	463a      	mov	r2, r7
 8000422:	2001      	movs	r0, #1
 8000424:	47c0      	blx	r8
 8000426:	4604      	mov	r4, r0
 8000428:	b9e0      	cbnz	r0, 8000464 <unwind_phase2_forced+0xac>
 800042a:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800042e:	a97a      	add	r1, sp, #488	; 0x1e8
 8000430:	4630      	mov	r0, r6
 8000432:	f004 fddd 	bl	8004ff0 <memcpy>
 8000436:	2d08      	cmp	r5, #8
 8000438:	d11a      	bne.n	8000470 <unwind_phase2_forced+0xb8>
 800043a:	6c31      	ldr	r1, [r6, #64]	; 0x40
 800043c:	4638      	mov	r0, r7
 800043e:	f7ff ff19 	bl	8000274 <get_eit_entry>
 8000442:	3409      	adds	r4, #9
 8000444:	fa5f fa84 	uxtb.w	sl, r4
 8000448:	4605      	mov	r5, r0
 800044a:	2800      	cmp	r0, #0
 800044c:	d0d4      	beq.n	80003f8 <unwind_phase2_forced+0x40>
 800044e:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 8000450:	6473      	str	r3, [r6, #68]	; 0x44
 8000452:	463a      	mov	r2, r7
 8000454:	e9cd 6900 	strd	r6, r9, [sp]
 8000458:	463b      	mov	r3, r7
 800045a:	f04a 0110 	orr.w	r1, sl, #16
 800045e:	2001      	movs	r0, #1
 8000460:	47c0      	blx	r8
 8000462:	b100      	cbz	r0, 8000466 <unwind_phase2_forced+0xae>
 8000464:	2509      	movs	r5, #9
 8000466:	4628      	mov	r0, r5
 8000468:	f50d 7d72 	add.w	sp, sp, #968	; 0x3c8
 800046c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000470:	2d07      	cmp	r5, #7
 8000472:	d1f7      	bne.n	8000464 <unwind_phase2_forced+0xac>
 8000474:	4620      	mov	r0, r4
 8000476:	6c31      	ldr	r1, [r6, #64]	; 0x40
 8000478:	f7ff ff7e 	bl	8000378 <_Unwind_DebugHook>
 800047c:	a803      	add	r0, sp, #12
 800047e:	f000 fb99 	bl	8000bb4 <__restore_core_regs>
 8000482:	bf00      	nop

08000484 <_Unwind_GetCFA>:
 8000484:	6c40      	ldr	r0, [r0, #68]	; 0x44
 8000486:	4770      	bx	lr

08000488 <__gnu_Unwind_RaiseException>:
 8000488:	b5f0      	push	{r4, r5, r6, r7, lr}
 800048a:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 800048c:	640b      	str	r3, [r1, #64]	; 0x40
 800048e:	f101 0c04 	add.w	ip, r1, #4
 8000492:	460e      	mov	r6, r1
 8000494:	4605      	mov	r5, r0
 8000496:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800049a:	b0f9      	sub	sp, #484	; 0x1e4
 800049c:	ac01      	add	r4, sp, #4
 800049e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80004a0:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80004a4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80004a6:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80004aa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80004ac:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 80004b0:	f04f 37ff 	mov.w	r7, #4294967295
 80004b4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80004b8:	9700      	str	r7, [sp, #0]
 80004ba:	e006      	b.n	80004ca <__gnu_Unwind_RaiseException+0x42>
 80004bc:	692b      	ldr	r3, [r5, #16]
 80004be:	466a      	mov	r2, sp
 80004c0:	4629      	mov	r1, r5
 80004c2:	4798      	blx	r3
 80004c4:	2808      	cmp	r0, #8
 80004c6:	4604      	mov	r4, r0
 80004c8:	d108      	bne.n	80004dc <__gnu_Unwind_RaiseException+0x54>
 80004ca:	9910      	ldr	r1, [sp, #64]	; 0x40
 80004cc:	4628      	mov	r0, r5
 80004ce:	f7ff fed1 	bl	8000274 <get_eit_entry>
 80004d2:	2800      	cmp	r0, #0
 80004d4:	d0f2      	beq.n	80004bc <__gnu_Unwind_RaiseException+0x34>
 80004d6:	2009      	movs	r0, #9
 80004d8:	b079      	add	sp, #484	; 0x1e4
 80004da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004dc:	4668      	mov	r0, sp
 80004de:	f7ff ff17 	bl	8000310 <restore_non_core_regs>
 80004e2:	2c06      	cmp	r4, #6
 80004e4:	d1f7      	bne.n	80004d6 <__gnu_Unwind_RaiseException+0x4e>
 80004e6:	4631      	mov	r1, r6
 80004e8:	4628      	mov	r0, r5
 80004ea:	f7ff ff47 	bl	800037c <unwind_phase2>
 80004ee:	bf00      	nop

080004f0 <__gnu_Unwind_ForcedUnwind>:
 80004f0:	60c1      	str	r1, [r0, #12]
 80004f2:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80004f4:	6182      	str	r2, [r0, #24]
 80004f6:	6419      	str	r1, [r3, #64]	; 0x40
 80004f8:	2200      	movs	r2, #0
 80004fa:	4619      	mov	r1, r3
 80004fc:	e75c      	b.n	80003b8 <unwind_phase2_forced>
 80004fe:	bf00      	nop

08000500 <__gnu_Unwind_Resume>:
 8000500:	b570      	push	{r4, r5, r6, lr}
 8000502:	68c6      	ldr	r6, [r0, #12]
 8000504:	6943      	ldr	r3, [r0, #20]
 8000506:	640b      	str	r3, [r1, #64]	; 0x40
 8000508:	b9ae      	cbnz	r6, 8000536 <__gnu_Unwind_Resume+0x36>
 800050a:	6903      	ldr	r3, [r0, #16]
 800050c:	460a      	mov	r2, r1
 800050e:	4604      	mov	r4, r0
 8000510:	460d      	mov	r5, r1
 8000512:	4601      	mov	r1, r0
 8000514:	2002      	movs	r0, #2
 8000516:	4798      	blx	r3
 8000518:	2807      	cmp	r0, #7
 800051a:	d005      	beq.n	8000528 <__gnu_Unwind_Resume+0x28>
 800051c:	2808      	cmp	r0, #8
 800051e:	d10f      	bne.n	8000540 <__gnu_Unwind_Resume+0x40>
 8000520:	4629      	mov	r1, r5
 8000522:	4620      	mov	r0, r4
 8000524:	f7ff ff2a 	bl	800037c <unwind_phase2>
 8000528:	4630      	mov	r0, r6
 800052a:	6c29      	ldr	r1, [r5, #64]	; 0x40
 800052c:	f7ff ff24 	bl	8000378 <_Unwind_DebugHook>
 8000530:	1d28      	adds	r0, r5, #4
 8000532:	f000 fb3f 	bl	8000bb4 <__restore_core_regs>
 8000536:	2201      	movs	r2, #1
 8000538:	f7ff ff3e 	bl	80003b8 <unwind_phase2_forced>
 800053c:	f004 fbc6 	bl	8004ccc <abort>
 8000540:	f004 fbc4 	bl	8004ccc <abort>

08000544 <__gnu_Unwind_Resume_or_Rethrow>:
 8000544:	68c2      	ldr	r2, [r0, #12]
 8000546:	b11a      	cbz	r2, 8000550 <__gnu_Unwind_Resume_or_Rethrow+0xc>
 8000548:	6bca      	ldr	r2, [r1, #60]	; 0x3c
 800054a:	640a      	str	r2, [r1, #64]	; 0x40
 800054c:	2200      	movs	r2, #0
 800054e:	e733      	b.n	80003b8 <unwind_phase2_forced>
 8000550:	e79a      	b.n	8000488 <__gnu_Unwind_RaiseException>
 8000552:	bf00      	nop

08000554 <_Unwind_Complete>:
 8000554:	4770      	bx	lr
 8000556:	bf00      	nop

08000558 <_Unwind_DeleteException>:
 8000558:	6883      	ldr	r3, [r0, #8]
 800055a:	4601      	mov	r1, r0
 800055c:	b10b      	cbz	r3, 8000562 <_Unwind_DeleteException+0xa>
 800055e:	2001      	movs	r0, #1
 8000560:	4718      	bx	r3
 8000562:	4770      	bx	lr

08000564 <_Unwind_VRS_Get>:
 8000564:	2901      	cmp	r1, #1
 8000566:	d012      	beq.n	800058e <_Unwind_VRS_Get+0x2a>
 8000568:	d809      	bhi.n	800057e <_Unwind_VRS_Get+0x1a>
 800056a:	b973      	cbnz	r3, 800058a <_Unwind_VRS_Get+0x26>
 800056c:	2a0f      	cmp	r2, #15
 800056e:	d80c      	bhi.n	800058a <_Unwind_VRS_Get+0x26>
 8000570:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8000574:	4618      	mov	r0, r3
 8000576:	6853      	ldr	r3, [r2, #4]
 8000578:	9a00      	ldr	r2, [sp, #0]
 800057a:	6013      	str	r3, [r2, #0]
 800057c:	4770      	bx	lr
 800057e:	3903      	subs	r1, #3
 8000580:	2901      	cmp	r1, #1
 8000582:	bf94      	ite	ls
 8000584:	2001      	movls	r0, #1
 8000586:	2002      	movhi	r0, #2
 8000588:	4770      	bx	lr
 800058a:	2002      	movs	r0, #2
 800058c:	4770      	bx	lr
 800058e:	4608      	mov	r0, r1
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <_Unwind_GetGR>:
 8000594:	b500      	push	{lr}
 8000596:	b085      	sub	sp, #20
 8000598:	460a      	mov	r2, r1
 800059a:	2300      	movs	r3, #0
 800059c:	a903      	add	r1, sp, #12
 800059e:	9100      	str	r1, [sp, #0]
 80005a0:	4619      	mov	r1, r3
 80005a2:	f7ff ffdf 	bl	8000564 <_Unwind_VRS_Get>
 80005a6:	9803      	ldr	r0, [sp, #12]
 80005a8:	b005      	add	sp, #20
 80005aa:	f85d fb04 	ldr.w	pc, [sp], #4
 80005ae:	bf00      	nop

080005b0 <_Unwind_VRS_Set>:
 80005b0:	2901      	cmp	r1, #1
 80005b2:	d012      	beq.n	80005da <_Unwind_VRS_Set+0x2a>
 80005b4:	d809      	bhi.n	80005ca <_Unwind_VRS_Set+0x1a>
 80005b6:	b973      	cbnz	r3, 80005d6 <_Unwind_VRS_Set+0x26>
 80005b8:	2a0f      	cmp	r2, #15
 80005ba:	d80c      	bhi.n	80005d6 <_Unwind_VRS_Set+0x26>
 80005bc:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 80005c0:	9a00      	ldr	r2, [sp, #0]
 80005c2:	6812      	ldr	r2, [r2, #0]
 80005c4:	6042      	str	r2, [r0, #4]
 80005c6:	4618      	mov	r0, r3
 80005c8:	4770      	bx	lr
 80005ca:	3903      	subs	r1, #3
 80005cc:	2901      	cmp	r1, #1
 80005ce:	bf94      	ite	ls
 80005d0:	2001      	movls	r0, #1
 80005d2:	2002      	movhi	r0, #2
 80005d4:	4770      	bx	lr
 80005d6:	2002      	movs	r0, #2
 80005d8:	4770      	bx	lr
 80005da:	4608      	mov	r0, r1
 80005dc:	4770      	bx	lr
 80005de:	bf00      	nop

080005e0 <_Unwind_SetGR>:
 80005e0:	b510      	push	{r4, lr}
 80005e2:	b084      	sub	sp, #16
 80005e4:	2300      	movs	r3, #0
 80005e6:	ac03      	add	r4, sp, #12
 80005e8:	9203      	str	r2, [sp, #12]
 80005ea:	9400      	str	r4, [sp, #0]
 80005ec:	460a      	mov	r2, r1
 80005ee:	4619      	mov	r1, r3
 80005f0:	f7ff ffde 	bl	80005b0 <_Unwind_VRS_Set>
 80005f4:	b004      	add	sp, #16
 80005f6:	bd10      	pop	{r4, pc}

080005f8 <__gnu_Unwind_Backtrace>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 80005fc:	6413      	str	r3, [r2, #64]	; 0x40
 80005fe:	f102 0c04 	add.w	ip, r2, #4
 8000602:	4605      	mov	r5, r0
 8000604:	460c      	mov	r4, r1
 8000606:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800060a:	f5ad 7d0e 	sub.w	sp, sp, #568	; 0x238
 800060e:	f10d 0e5c 	add.w	lr, sp, #92	; 0x5c
 8000612:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8000616:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800061a:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800061e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8000622:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8000626:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 800062a:	f04f 36ff 	mov.w	r6, #4294967295
 800062e:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
 8000632:	9616      	str	r6, [sp, #88]	; 0x58
 8000634:	e010      	b.n	8000658 <__gnu_Unwind_Backtrace+0x60>
 8000636:	f7ff ffd3 	bl	80005e0 <_Unwind_SetGR>
 800063a:	4621      	mov	r1, r4
 800063c:	a816      	add	r0, sp, #88	; 0x58
 800063e:	47a8      	blx	r5
 8000640:	4603      	mov	r3, r0
 8000642:	aa16      	add	r2, sp, #88	; 0x58
 8000644:	4669      	mov	r1, sp
 8000646:	2008      	movs	r0, #8
 8000648:	b983      	cbnz	r3, 800066c <__gnu_Unwind_Backtrace+0x74>
 800064a:	9b04      	ldr	r3, [sp, #16]
 800064c:	4798      	blx	r3
 800064e:	2805      	cmp	r0, #5
 8000650:	4606      	mov	r6, r0
 8000652:	d00c      	beq.n	800066e <__gnu_Unwind_Backtrace+0x76>
 8000654:	2809      	cmp	r0, #9
 8000656:	d009      	beq.n	800066c <__gnu_Unwind_Backtrace+0x74>
 8000658:	9926      	ldr	r1, [sp, #152]	; 0x98
 800065a:	4668      	mov	r0, sp
 800065c:	f7ff fe0a 	bl	8000274 <get_eit_entry>
 8000660:	4603      	mov	r3, r0
 8000662:	466a      	mov	r2, sp
 8000664:	210c      	movs	r1, #12
 8000666:	a816      	add	r0, sp, #88	; 0x58
 8000668:	2b00      	cmp	r3, #0
 800066a:	d0e4      	beq.n	8000636 <__gnu_Unwind_Backtrace+0x3e>
 800066c:	2609      	movs	r6, #9
 800066e:	a816      	add	r0, sp, #88	; 0x58
 8000670:	f7ff fe4e 	bl	8000310 <restore_non_core_regs>
 8000674:	4630      	mov	r0, r6
 8000676:	f50d 7d0e 	add.w	sp, sp, #568	; 0x238
 800067a:	bd70      	pop	{r4, r5, r6, pc}

0800067c <__gnu_unwind_pr_common>:
 800067c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000680:	6ccc      	ldr	r4, [r1, #76]	; 0x4c
 8000682:	b089      	sub	sp, #36	; 0x24
 8000684:	461e      	mov	r6, r3
 8000686:	f854 3b04 	ldr.w	r3, [r4], #4
 800068a:	9406      	str	r4, [sp, #24]
 800068c:	460d      	mov	r5, r1
 800068e:	4617      	mov	r7, r2
 8000690:	f000 0803 	and.w	r8, r0, #3
 8000694:	2e00      	cmp	r6, #0
 8000696:	d079      	beq.n	800078c <__gnu_unwind_pr_common+0x110>
 8000698:	0c1a      	lsrs	r2, r3, #16
 800069a:	041b      	lsls	r3, r3, #16
 800069c:	9305      	str	r3, [sp, #20]
 800069e:	f88d 201d 	strb.w	r2, [sp, #29]
 80006a2:	2302      	movs	r3, #2
 80006a4:	b2d2      	uxtb	r2, r2
 80006a6:	eb04 0482 	add.w	r4, r4, r2, lsl #2
 80006aa:	f88d 301c 	strb.w	r3, [sp, #28]
 80006ae:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 80006b0:	f1b8 0f02 	cmp.w	r8, #2
 80006b4:	bf08      	it	eq
 80006b6:	6bac      	ldreq	r4, [r5, #56]	; 0x38
 80006b8:	f013 0301 	ands.w	r3, r3, #1
 80006bc:	d00c      	beq.n	80006d8 <__gnu_unwind_pr_common+0x5c>
 80006be:	a905      	add	r1, sp, #20
 80006c0:	4638      	mov	r0, r7
 80006c2:	f000 fb79 	bl	8000db8 <__gnu_unwind_execute>
 80006c6:	b918      	cbnz	r0, 80006d0 <__gnu_unwind_pr_common+0x54>
 80006c8:	2008      	movs	r0, #8
 80006ca:	b009      	add	sp, #36	; 0x24
 80006cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80006d0:	2009      	movs	r0, #9
 80006d2:	b009      	add	sp, #36	; 0x24
 80006d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80006d8:	f8d4 a000 	ldr.w	sl, [r4]
 80006dc:	f1ba 0f00 	cmp.w	sl, #0
 80006e0:	d0ed      	beq.n	80006be <__gnu_unwind_pr_common+0x42>
 80006e2:	9301      	str	r3, [sp, #4]
 80006e4:	f000 0308 	and.w	r3, r0, #8
 80006e8:	9302      	str	r3, [sp, #8]
 80006ea:	2e02      	cmp	r6, #2
 80006ec:	d04a      	beq.n	8000784 <__gnu_unwind_pr_common+0x108>
 80006ee:	f8b4 a000 	ldrh.w	sl, [r4]
 80006f2:	f8b4 9002 	ldrh.w	r9, [r4, #2]
 80006f6:	3404      	adds	r4, #4
 80006f8:	6cab      	ldr	r3, [r5, #72]	; 0x48
 80006fa:	f029 0b01 	bic.w	fp, r9, #1
 80006fe:	210f      	movs	r1, #15
 8000700:	4638      	mov	r0, r7
 8000702:	449b      	add	fp, r3
 8000704:	f7ff ff46 	bl	8000594 <_Unwind_GetGR>
 8000708:	4583      	cmp	fp, r0
 800070a:	d839      	bhi.n	8000780 <__gnu_unwind_pr_common+0x104>
 800070c:	f02a 0301 	bic.w	r3, sl, #1
 8000710:	449b      	add	fp, r3
 8000712:	4583      	cmp	fp, r0
 8000714:	bf94      	ite	ls
 8000716:	2000      	movls	r0, #0
 8000718:	2001      	movhi	r0, #1
 800071a:	ea4f 0349 	mov.w	r3, r9, lsl #1
 800071e:	f003 0302 	and.w	r3, r3, #2
 8000722:	f00a 0a01 	and.w	sl, sl, #1
 8000726:	ea43 030a 	orr.w	r3, r3, sl
 800072a:	2b01      	cmp	r3, #1
 800072c:	d049      	beq.n	80007c2 <__gnu_unwind_pr_common+0x146>
 800072e:	2b02      	cmp	r3, #2
 8000730:	d032      	beq.n	8000798 <__gnu_unwind_pr_common+0x11c>
 8000732:	2b00      	cmp	r3, #0
 8000734:	d1cc      	bne.n	80006d0 <__gnu_unwind_pr_common+0x54>
 8000736:	f1b8 0f00 	cmp.w	r8, #0
 800073a:	d002      	beq.n	8000742 <__gnu_unwind_pr_common+0xc6>
 800073c:	2800      	cmp	r0, #0
 800073e:	f040 80cd 	bne.w	80008dc <__gnu_unwind_pr_common+0x260>
 8000742:	3404      	adds	r4, #4
 8000744:	f8d4 a000 	ldr.w	sl, [r4]
 8000748:	f1ba 0f00 	cmp.w	sl, #0
 800074c:	d1cd      	bne.n	80006ea <__gnu_unwind_pr_common+0x6e>
 800074e:	a905      	add	r1, sp, #20
 8000750:	4638      	mov	r0, r7
 8000752:	f000 fb31 	bl	8000db8 <__gnu_unwind_execute>
 8000756:	2800      	cmp	r0, #0
 8000758:	d1ba      	bne.n	80006d0 <__gnu_unwind_pr_common+0x54>
 800075a:	9b01      	ldr	r3, [sp, #4]
 800075c:	2b00      	cmp	r3, #0
 800075e:	d0b3      	beq.n	80006c8 <__gnu_unwind_pr_common+0x4c>
 8000760:	210f      	movs	r1, #15
 8000762:	4638      	mov	r0, r7
 8000764:	f7ff ff16 	bl	8000594 <_Unwind_GetGR>
 8000768:	210e      	movs	r1, #14
 800076a:	4602      	mov	r2, r0
 800076c:	4638      	mov	r0, r7
 800076e:	f7ff ff37 	bl	80005e0 <_Unwind_SetGR>
 8000772:	4638      	mov	r0, r7
 8000774:	4a6a      	ldr	r2, [pc, #424]	; (8000920 <__gnu_unwind_pr_common+0x2a4>)
 8000776:	210f      	movs	r1, #15
 8000778:	f7ff ff32 	bl	80005e0 <_Unwind_SetGR>
 800077c:	2007      	movs	r0, #7
 800077e:	e7a8      	b.n	80006d2 <__gnu_unwind_pr_common+0x56>
 8000780:	2000      	movs	r0, #0
 8000782:	e7ca      	b.n	800071a <__gnu_unwind_pr_common+0x9e>
 8000784:	f8d4 9004 	ldr.w	r9, [r4, #4]
 8000788:	3408      	adds	r4, #8
 800078a:	e7b5      	b.n	80006f8 <__gnu_unwind_pr_common+0x7c>
 800078c:	021b      	lsls	r3, r3, #8
 800078e:	9305      	str	r3, [sp, #20]
 8000790:	2303      	movs	r3, #3
 8000792:	f8ad 301c 	strh.w	r3, [sp, #28]
 8000796:	e78a      	b.n	80006ae <__gnu_unwind_pr_common+0x32>
 8000798:	6823      	ldr	r3, [r4, #0]
 800079a:	f023 4b00 	bic.w	fp, r3, #2147483648	; 0x80000000
 800079e:	f1b8 0f00 	cmp.w	r8, #0
 80007a2:	d145      	bne.n	8000830 <__gnu_unwind_pr_common+0x1b4>
 80007a4:	b128      	cbz	r0, 80007b2 <__gnu_unwind_pr_common+0x136>
 80007a6:	9a02      	ldr	r2, [sp, #8]
 80007a8:	2a00      	cmp	r2, #0
 80007aa:	d05c      	beq.n	8000866 <__gnu_unwind_pr_common+0x1ea>
 80007ac:	f1bb 0f00 	cmp.w	fp, #0
 80007b0:	d074      	beq.n	800089c <__gnu_unwind_pr_common+0x220>
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	da00      	bge.n	80007b8 <__gnu_unwind_pr_common+0x13c>
 80007b6:	3404      	adds	r4, #4
 80007b8:	f10b 0b01 	add.w	fp, fp, #1
 80007bc:	eb04 048b 	add.w	r4, r4, fp, lsl #2
 80007c0:	e7c0      	b.n	8000744 <__gnu_unwind_pr_common+0xc8>
 80007c2:	f1b8 0f00 	cmp.w	r8, #0
 80007c6:	d119      	bne.n	80007fc <__gnu_unwind_pr_common+0x180>
 80007c8:	b1b0      	cbz	r0, 80007f8 <__gnu_unwind_pr_common+0x17c>
 80007ca:	6863      	ldr	r3, [r4, #4]
 80007cc:	6822      	ldr	r2, [r4, #0]
 80007ce:	1c99      	adds	r1, r3, #2
 80007d0:	ea4f 72d2 	mov.w	r2, r2, lsr #31
 80007d4:	f43f af7c 	beq.w	80006d0 <__gnu_unwind_pr_common+0x54>
 80007d8:	f105 0158 	add.w	r1, r5, #88	; 0x58
 80007dc:	3301      	adds	r3, #1
 80007de:	9104      	str	r1, [sp, #16]
 80007e0:	f000 8090 	beq.w	8000904 <__gnu_unwind_pr_common+0x288>
 80007e4:	1d20      	adds	r0, r4, #4
 80007e6:	f7ff fdc1 	bl	800036c <_Unwind_decode_typeinfo_ptr.constprop.0>
 80007ea:	ab04      	add	r3, sp, #16
 80007ec:	4601      	mov	r1, r0
 80007ee:	4628      	mov	r0, r5
 80007f0:	f003 fda0 	bl	8004334 <__cxa_type_match>
 80007f4:	2800      	cmp	r0, #0
 80007f6:	d15b      	bne.n	80008b0 <__gnu_unwind_pr_common+0x234>
 80007f8:	3408      	adds	r4, #8
 80007fa:	e7a3      	b.n	8000744 <__gnu_unwind_pr_common+0xc8>
 80007fc:	210d      	movs	r1, #13
 80007fe:	4638      	mov	r0, r7
 8000800:	f8d5 9020 	ldr.w	r9, [r5, #32]
 8000804:	f7ff fec6 	bl	8000594 <_Unwind_GetGR>
 8000808:	4581      	cmp	r9, r0
 800080a:	d1f5      	bne.n	80007f8 <__gnu_unwind_pr_common+0x17c>
 800080c:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800080e:	429c      	cmp	r4, r3
 8000810:	d1f2      	bne.n	80007f8 <__gnu_unwind_pr_common+0x17c>
 8000812:	4620      	mov	r0, r4
 8000814:	f7ff fce2 	bl	80001dc <selfrel_offset31>
 8000818:	210f      	movs	r1, #15
 800081a:	4602      	mov	r2, r0
 800081c:	4638      	mov	r0, r7
 800081e:	f7ff fedf 	bl	80005e0 <_Unwind_SetGR>
 8000822:	4638      	mov	r0, r7
 8000824:	462a      	mov	r2, r5
 8000826:	2100      	movs	r1, #0
 8000828:	f7ff feda 	bl	80005e0 <_Unwind_SetGR>
 800082c:	2007      	movs	r0, #7
 800082e:	e750      	b.n	80006d2 <__gnu_unwind_pr_common+0x56>
 8000830:	210d      	movs	r1, #13
 8000832:	4638      	mov	r0, r7
 8000834:	f8d5 9020 	ldr.w	r9, [r5, #32]
 8000838:	f7ff feac 	bl	8000594 <_Unwind_GetGR>
 800083c:	4581      	cmp	r9, r0
 800083e:	d001      	beq.n	8000844 <__gnu_unwind_pr_common+0x1c8>
 8000840:	6823      	ldr	r3, [r4, #0]
 8000842:	e7b6      	b.n	80007b2 <__gnu_unwind_pr_common+0x136>
 8000844:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8000846:	429c      	cmp	r4, r3
 8000848:	d1fa      	bne.n	8000840 <__gnu_unwind_pr_common+0x1c4>
 800084a:	2304      	movs	r3, #4
 800084c:	2200      	movs	r2, #0
 800084e:	e9c5 230b 	strd	r2, r3, [r5, #44]	; 0x2c
 8000852:	18e3      	adds	r3, r4, r3
 8000854:	f8c5 b028 	str.w	fp, [r5, #40]	; 0x28
 8000858:	636b      	str	r3, [r5, #52]	; 0x34
 800085a:	6823      	ldr	r3, [r4, #0]
 800085c:	2b00      	cmp	r3, #0
 800085e:	db59      	blt.n	8000914 <__gnu_unwind_pr_common+0x298>
 8000860:	2301      	movs	r3, #1
 8000862:	9301      	str	r3, [sp, #4]
 8000864:	e7a8      	b.n	80007b8 <__gnu_unwind_pr_common+0x13c>
 8000866:	f105 0358 	add.w	r3, r5, #88	; 0x58
 800086a:	f8cd 800c 	str.w	r8, [sp, #12]
 800086e:	f104 0a04 	add.w	sl, r4, #4
 8000872:	46b0      	mov	r8, r6
 8000874:	4691      	mov	r9, r2
 8000876:	461e      	mov	r6, r3
 8000878:	e00e      	b.n	8000898 <__gnu_unwind_pr_common+0x21c>
 800087a:	4650      	mov	r0, sl
 800087c:	9604      	str	r6, [sp, #16]
 800087e:	f7ff fd75 	bl	800036c <_Unwind_decode_typeinfo_ptr.constprop.0>
 8000882:	2200      	movs	r2, #0
 8000884:	4601      	mov	r1, r0
 8000886:	ab04      	add	r3, sp, #16
 8000888:	4628      	mov	r0, r5
 800088a:	f109 0901 	add.w	r9, r9, #1
 800088e:	f10a 0a04 	add.w	sl, sl, #4
 8000892:	f003 fd4f 	bl	8004334 <__cxa_type_match>
 8000896:	b9e0      	cbnz	r0, 80008d2 <__gnu_unwind_pr_common+0x256>
 8000898:	45d9      	cmp	r9, fp
 800089a:	d1ee      	bne.n	800087a <__gnu_unwind_pr_common+0x1fe>
 800089c:	210d      	movs	r1, #13
 800089e:	4638      	mov	r0, r7
 80008a0:	f7ff fe78 	bl	8000594 <_Unwind_GetGR>
 80008a4:	9b04      	ldr	r3, [sp, #16]
 80008a6:	62ac      	str	r4, [r5, #40]	; 0x28
 80008a8:	e9c5 0308 	strd	r0, r3, [r5, #32]
 80008ac:	2006      	movs	r0, #6
 80008ae:	e710      	b.n	80006d2 <__gnu_unwind_pr_common+0x56>
 80008b0:	4681      	mov	r9, r0
 80008b2:	210d      	movs	r1, #13
 80008b4:	4638      	mov	r0, r7
 80008b6:	f7ff fe6d 	bl	8000594 <_Unwind_GetGR>
 80008ba:	f1b9 0f02 	cmp.w	r9, #2
 80008be:	6228      	str	r0, [r5, #32]
 80008c0:	d125      	bne.n	800090e <__gnu_unwind_pr_common+0x292>
 80008c2:	462b      	mov	r3, r5
 80008c4:	9a04      	ldr	r2, [sp, #16]
 80008c6:	f843 2f2c 	str.w	r2, [r3, #44]!
 80008ca:	626b      	str	r3, [r5, #36]	; 0x24
 80008cc:	62ac      	str	r4, [r5, #40]	; 0x28
 80008ce:	2006      	movs	r0, #6
 80008d0:	e6ff      	b.n	80006d2 <__gnu_unwind_pr_common+0x56>
 80008d2:	4646      	mov	r6, r8
 80008d4:	6823      	ldr	r3, [r4, #0]
 80008d6:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80008da:	e76a      	b.n	80007b2 <__gnu_unwind_pr_common+0x136>
 80008dc:	4620      	mov	r0, r4
 80008de:	f7ff fc7d 	bl	80001dc <selfrel_offset31>
 80008e2:	3404      	adds	r4, #4
 80008e4:	4602      	mov	r2, r0
 80008e6:	63ac      	str	r4, [r5, #56]	; 0x38
 80008e8:	4628      	mov	r0, r5
 80008ea:	4614      	mov	r4, r2
 80008ec:	f003 fd80 	bl	80043f0 <__cxa_begin_cleanup>
 80008f0:	2800      	cmp	r0, #0
 80008f2:	f43f aeed 	beq.w	80006d0 <__gnu_unwind_pr_common+0x54>
 80008f6:	4638      	mov	r0, r7
 80008f8:	4622      	mov	r2, r4
 80008fa:	210f      	movs	r1, #15
 80008fc:	f7ff fe70 	bl	80005e0 <_Unwind_SetGR>
 8000900:	2007      	movs	r0, #7
 8000902:	e6e6      	b.n	80006d2 <__gnu_unwind_pr_common+0x56>
 8000904:	210d      	movs	r1, #13
 8000906:	4638      	mov	r0, r7
 8000908:	f7ff fe44 	bl	8000594 <_Unwind_GetGR>
 800090c:	6228      	str	r0, [r5, #32]
 800090e:	9b04      	ldr	r3, [sp, #16]
 8000910:	626b      	str	r3, [r5, #36]	; 0x24
 8000912:	e7db      	b.n	80008cc <__gnu_unwind_pr_common+0x250>
 8000914:	f10b 0001 	add.w	r0, fp, #1
 8000918:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 800091c:	e77a      	b.n	8000814 <__gnu_unwind_pr_common+0x198>
 800091e:	bf00      	nop
 8000920:	08004ca5 	.word	0x08004ca5

08000924 <__aeabi_unwind_cpp_pr0>:
 8000924:	2300      	movs	r3, #0
 8000926:	e6a9      	b.n	800067c <__gnu_unwind_pr_common>

08000928 <__aeabi_unwind_cpp_pr1>:
 8000928:	2301      	movs	r3, #1
 800092a:	e6a7      	b.n	800067c <__gnu_unwind_pr_common>

0800092c <__aeabi_unwind_cpp_pr2>:
 800092c:	2302      	movs	r3, #2
 800092e:	e6a5      	b.n	800067c <__gnu_unwind_pr_common>

08000930 <_Unwind_VRS_Pop>:
 8000930:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000934:	4606      	mov	r6, r0
 8000936:	b0c3      	sub	sp, #268	; 0x10c
 8000938:	4615      	mov	r5, r2
 800093a:	461c      	mov	r4, r3
 800093c:	2904      	cmp	r1, #4
 800093e:	f200 80bf 	bhi.w	8000ac0 <_Unwind_VRS_Pop+0x190>
 8000942:	e8df f001 	tbb	[pc, r1]
 8000946:	579e      	.short	0x579e
 8000948:	2dbd      	.short	0x2dbd
 800094a:	03          	.byte	0x03
 800094b:	00          	.byte	0x00
 800094c:	2c00      	cmp	r4, #0
 800094e:	f040 80b7 	bne.w	8000ac0 <_Unwind_VRS_Pop+0x190>
 8000952:	2a10      	cmp	r2, #16
 8000954:	f200 80b4 	bhi.w	8000ac0 <_Unwind_VRS_Pop+0x190>
 8000958:	6803      	ldr	r3, [r0, #0]
 800095a:	06d8      	lsls	r0, r3, #27
 800095c:	f100 80f9 	bmi.w	8000b52 <_Unwind_VRS_Pop+0x222>
 8000960:	af20      	add	r7, sp, #128	; 0x80
 8000962:	4638      	mov	r0, r7
 8000964:	f000 f998 	bl	8000c98 <__gnu_Unwind_Save_WMMXC>
 8000968:	6bb4      	ldr	r4, [r6, #56]	; 0x38
 800096a:	4639      	mov	r1, r7
 800096c:	2300      	movs	r3, #0
 800096e:	f04f 0c01 	mov.w	ip, #1
 8000972:	fa0c f203 	lsl.w	r2, ip, r3
 8000976:	422a      	tst	r2, r5
 8000978:	4620      	mov	r0, r4
 800097a:	f103 0301 	add.w	r3, r3, #1
 800097e:	d003      	beq.n	8000988 <_Unwind_VRS_Pop+0x58>
 8000980:	f850 2b04 	ldr.w	r2, [r0], #4
 8000984:	600a      	str	r2, [r1, #0]
 8000986:	4604      	mov	r4, r0
 8000988:	2b04      	cmp	r3, #4
 800098a:	f101 0104 	add.w	r1, r1, #4
 800098e:	d1f0      	bne.n	8000972 <_Unwind_VRS_Pop+0x42>
 8000990:	4638      	mov	r0, r7
 8000992:	63b4      	str	r4, [r6, #56]	; 0x38
 8000994:	f000 f976 	bl	8000c84 <__gnu_Unwind_Restore_WMMXC>
 8000998:	2000      	movs	r0, #0
 800099a:	b043      	add	sp, #268	; 0x10c
 800099c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80009a0:	2c03      	cmp	r4, #3
 80009a2:	f040 808d 	bne.w	8000ac0 <_Unwind_VRS_Pop+0x190>
 80009a6:	b294      	uxth	r4, r2
 80009a8:	eb04 4312 	add.w	r3, r4, r2, lsr #16
 80009ac:	2b10      	cmp	r3, #16
 80009ae:	ea4f 4512 	mov.w	r5, r2, lsr #16
 80009b2:	f200 8085 	bhi.w	8000ac0 <_Unwind_VRS_Pop+0x190>
 80009b6:	6803      	ldr	r3, [r0, #0]
 80009b8:	071f      	lsls	r7, r3, #28
 80009ba:	f100 80d2 	bmi.w	8000b62 <_Unwind_VRS_Pop+0x232>
 80009be:	af20      	add	r7, sp, #128	; 0x80
 80009c0:	4638      	mov	r0, r7
 80009c2:	f000 f93d 	bl	8000c40 <__gnu_Unwind_Save_WMMXD>
 80009c6:	6bb2      	ldr	r2, [r6, #56]	; 0x38
 80009c8:	eb07 01c5 	add.w	r1, r7, r5, lsl #3
 80009cc:	b154      	cbz	r4, 80009e4 <_Unwind_VRS_Pop+0xb4>
 80009ce:	460b      	mov	r3, r1
 80009d0:	1ad0      	subs	r0, r2, r3
 80009d2:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
 80009d6:	00e4      	lsls	r4, r4, #3
 80009d8:	581d      	ldr	r5, [r3, r0]
 80009da:	f843 5b04 	str.w	r5, [r3], #4
 80009de:	428b      	cmp	r3, r1
 80009e0:	d1fa      	bne.n	80009d8 <_Unwind_VRS_Pop+0xa8>
 80009e2:	4422      	add	r2, r4
 80009e4:	4638      	mov	r0, r7
 80009e6:	63b2      	str	r2, [r6, #56]	; 0x38
 80009e8:	f000 f908 	bl	8000bfc <__gnu_Unwind_Restore_WMMXD>
 80009ec:	2000      	movs	r0, #0
 80009ee:	b043      	add	sp, #268	; 0x10c
 80009f0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80009f4:	2c01      	cmp	r4, #1
 80009f6:	ea4f 4812 	mov.w	r8, r2, lsr #16
 80009fa:	b295      	uxth	r5, r2
 80009fc:	d05c      	beq.n	8000ab8 <_Unwind_VRS_Pop+0x188>
 80009fe:	2c05      	cmp	r4, #5
 8000a00:	d15e      	bne.n	8000ac0 <_Unwind_VRS_Pop+0x190>
 8000a02:	eb08 0905 	add.w	r9, r8, r5
 8000a06:	f1b9 0f20 	cmp.w	r9, #32
 8000a0a:	d859      	bhi.n	8000ac0 <_Unwind_VRS_Pop+0x190>
 8000a0c:	f1b8 0f0f 	cmp.w	r8, #15
 8000a10:	d979      	bls.n	8000b06 <_Unwind_VRS_Pop+0x1d6>
 8000a12:	46a9      	mov	r9, r5
 8000a14:	2d00      	cmp	r5, #0
 8000a16:	f040 808a 	bne.w	8000b2e <_Unwind_VRS_Pop+0x1fe>
 8000a1a:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 8000a1c:	b36d      	cbz	r5, 8000a7a <_Unwind_VRS_Pop+0x14a>
 8000a1e:	af20      	add	r7, sp, #128	; 0x80
 8000a20:	f04f 0900 	mov.w	r9, #0
 8000a24:	eb07 07c8 	add.w	r7, r7, r8, lsl #3
 8000a28:	3f04      	subs	r7, #4
 8000a2a:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8000a2e:	f853 1b04 	ldr.w	r1, [r3], #4
 8000a32:	f847 1f04 	str.w	r1, [r7, #4]!
 8000a36:	42ab      	cmp	r3, r5
 8000a38:	d1f9      	bne.n	8000a2e <_Unwind_VRS_Pop+0xfe>
 8000a3a:	f1b9 0f00 	cmp.w	r9, #0
 8000a3e:	d00f      	beq.n	8000a60 <_Unwind_VRS_Pop+0x130>
 8000a40:	466f      	mov	r7, sp
 8000a42:	4641      	mov	r1, r8
 8000a44:	2910      	cmp	r1, #16
 8000a46:	bf38      	it	cc
 8000a48:	2110      	movcc	r1, #16
 8000a4a:	eb07 01c1 	add.w	r1, r7, r1, lsl #3
 8000a4e:	3984      	subs	r1, #132	; 0x84
 8000a50:	eb03 05c9 	add.w	r5, r3, r9, lsl #3
 8000a54:	f853 0b04 	ldr.w	r0, [r3], #4
 8000a58:	f841 0f04 	str.w	r0, [r1, #4]!
 8000a5c:	42ab      	cmp	r3, r5
 8000a5e:	d1f9      	bne.n	8000a54 <_Unwind_VRS_Pop+0x124>
 8000a60:	2c01      	cmp	r4, #1
 8000a62:	f000 8086 	beq.w	8000b72 <_Unwind_VRS_Pop+0x242>
 8000a66:	f1b8 0f0f 	cmp.w	r8, #15
 8000a6a:	63b5      	str	r5, [r6, #56]	; 0x38
 8000a6c:	d947      	bls.n	8000afe <_Unwind_VRS_Pop+0x1ce>
 8000a6e:	f1b9 0f00 	cmp.w	r9, #0
 8000a72:	d002      	beq.n	8000a7a <_Unwind_VRS_Pop+0x14a>
 8000a74:	4668      	mov	r0, sp
 8000a76:	f000 f8b9 	bl	8000bec <__gnu_Unwind_Restore_VFP_D_16_to_31>
 8000a7a:	2000      	movs	r0, #0
 8000a7c:	b043      	add	sp, #268	; 0x10c
 8000a7e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000a82:	b9ec      	cbnz	r4, 8000ac0 <_Unwind_VRS_Pop+0x190>
 8000a84:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8000a86:	4623      	mov	r3, r4
 8000a88:	fa1f fc82 	uxth.w	ip, r2
 8000a8c:	2401      	movs	r4, #1
 8000a8e:	1d37      	adds	r7, r6, #4
 8000a90:	fa04 f203 	lsl.w	r2, r4, r3
 8000a94:	ea12 0f0c 	tst.w	r2, ip
 8000a98:	4601      	mov	r1, r0
 8000a9a:	d004      	beq.n	8000aa6 <_Unwind_VRS_Pop+0x176>
 8000a9c:	f851 2b04 	ldr.w	r2, [r1], #4
 8000aa0:	f847 2023 	str.w	r2, [r7, r3, lsl #2]
 8000aa4:	4608      	mov	r0, r1
 8000aa6:	3301      	adds	r3, #1
 8000aa8:	2b10      	cmp	r3, #16
 8000aaa:	d1f1      	bne.n	8000a90 <_Unwind_VRS_Pop+0x160>
 8000aac:	f415 5500 	ands.w	r5, r5, #8192	; 0x2000
 8000ab0:	d1e3      	bne.n	8000a7a <_Unwind_VRS_Pop+0x14a>
 8000ab2:	63b0      	str	r0, [r6, #56]	; 0x38
 8000ab4:	4628      	mov	r0, r5
 8000ab6:	e004      	b.n	8000ac2 <_Unwind_VRS_Pop+0x192>
 8000ab8:	eb08 0305 	add.w	r3, r8, r5
 8000abc:	2b10      	cmp	r3, #16
 8000abe:	d903      	bls.n	8000ac8 <_Unwind_VRS_Pop+0x198>
 8000ac0:	2002      	movs	r0, #2
 8000ac2:	b043      	add	sp, #268	; 0x10c
 8000ac4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000ac8:	f1b8 0f0f 	cmp.w	r8, #15
 8000acc:	d8f8      	bhi.n	8000ac0 <_Unwind_VRS_Pop+0x190>
 8000ace:	6833      	ldr	r3, [r6, #0]
 8000ad0:	07da      	lsls	r2, r3, #31
 8000ad2:	d506      	bpl.n	8000ae2 <_Unwind_VRS_Pop+0x1b2>
 8000ad4:	4630      	mov	r0, r6
 8000ad6:	f023 0303 	bic.w	r3, r3, #3
 8000ada:	f840 3b48 	str.w	r3, [r0], #72
 8000ade:	f000 f879 	bl	8000bd4 <__gnu_Unwind_Save_VFP>
 8000ae2:	af20      	add	r7, sp, #128	; 0x80
 8000ae4:	4638      	mov	r0, r7
 8000ae6:	f000 f875 	bl	8000bd4 <__gnu_Unwind_Save_VFP>
 8000aea:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 8000aec:	2d00      	cmp	r5, #0
 8000aee:	d197      	bne.n	8000a20 <_Unwind_VRS_Pop+0xf0>
 8000af0:	461d      	mov	r5, r3
 8000af2:	3504      	adds	r5, #4
 8000af4:	63b5      	str	r5, [r6, #56]	; 0x38
 8000af6:	4638      	mov	r0, r7
 8000af8:	f000 f868 	bl	8000bcc <__gnu_Unwind_Restore_VFP>
 8000afc:	e7bd      	b.n	8000a7a <_Unwind_VRS_Pop+0x14a>
 8000afe:	a820      	add	r0, sp, #128	; 0x80
 8000b00:	f000 f86c 	bl	8000bdc <__gnu_Unwind_Restore_VFP_D>
 8000b04:	e7b3      	b.n	8000a6e <_Unwind_VRS_Pop+0x13e>
 8000b06:	f1b9 0f10 	cmp.w	r9, #16
 8000b0a:	d940      	bls.n	8000b8e <_Unwind_VRS_Pop+0x25e>
 8000b0c:	f1a9 0910 	sub.w	r9, r9, #16
 8000b10:	6833      	ldr	r3, [r6, #0]
 8000b12:	07d9      	lsls	r1, r3, #31
 8000b14:	d508      	bpl.n	8000b28 <_Unwind_VRS_Pop+0x1f8>
 8000b16:	f023 0301 	bic.w	r3, r3, #1
 8000b1a:	4630      	mov	r0, r6
 8000b1c:	f043 0302 	orr.w	r3, r3, #2
 8000b20:	f840 3b48 	str.w	r3, [r0], #72
 8000b24:	f000 f85e 	bl	8000be4 <__gnu_Unwind_Save_VFP_D>
 8000b28:	f1b9 0f00 	cmp.w	r9, #0
 8000b2c:	d032      	beq.n	8000b94 <_Unwind_VRS_Pop+0x264>
 8000b2e:	6833      	ldr	r3, [r6, #0]
 8000b30:	075a      	lsls	r2, r3, #29
 8000b32:	d420      	bmi.n	8000b76 <_Unwind_VRS_Pop+0x246>
 8000b34:	f1b8 0f0f 	cmp.w	r8, #15
 8000b38:	d925      	bls.n	8000b86 <_Unwind_VRS_Pop+0x256>
 8000b3a:	466f      	mov	r7, sp
 8000b3c:	4638      	mov	r0, r7
 8000b3e:	f1c8 0510 	rsb	r5, r8, #16
 8000b42:	f000 f857 	bl	8000bf4 <__gnu_Unwind_Save_VFP_D_16_to_31>
 8000b46:	2d00      	cmp	r5, #0
 8000b48:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 8000b4a:	f77f af7a 	ble.w	8000a42 <_Unwind_VRS_Pop+0x112>
 8000b4e:	af20      	add	r7, sp, #128	; 0x80
 8000b50:	e768      	b.n	8000a24 <_Unwind_VRS_Pop+0xf4>
 8000b52:	f023 0310 	bic.w	r3, r3, #16
 8000b56:	6033      	str	r3, [r6, #0]
 8000b58:	f506 70e8 	add.w	r0, r6, #464	; 0x1d0
 8000b5c:	f000 f89c 	bl	8000c98 <__gnu_Unwind_Save_WMMXC>
 8000b60:	e6fe      	b.n	8000960 <_Unwind_VRS_Pop+0x30>
 8000b62:	f023 0308 	bic.w	r3, r3, #8
 8000b66:	6003      	str	r3, [r0, #0]
 8000b68:	f500 70a8 	add.w	r0, r0, #336	; 0x150
 8000b6c:	f000 f868 	bl	8000c40 <__gnu_Unwind_Save_WMMXD>
 8000b70:	e725      	b.n	80009be <_Unwind_VRS_Pop+0x8e>
 8000b72:	af20      	add	r7, sp, #128	; 0x80
 8000b74:	e7bd      	b.n	8000af2 <_Unwind_VRS_Pop+0x1c2>
 8000b76:	4630      	mov	r0, r6
 8000b78:	f023 0304 	bic.w	r3, r3, #4
 8000b7c:	f840 3bd0 	str.w	r3, [r0], #208
 8000b80:	f000 f838 	bl	8000bf4 <__gnu_Unwind_Save_VFP_D_16_to_31>
 8000b84:	e7d6      	b.n	8000b34 <_Unwind_VRS_Pop+0x204>
 8000b86:	a820      	add	r0, sp, #128	; 0x80
 8000b88:	f000 f82c 	bl	8000be4 <__gnu_Unwind_Save_VFP_D>
 8000b8c:	e7d5      	b.n	8000b3a <_Unwind_VRS_Pop+0x20a>
 8000b8e:	f04f 0900 	mov.w	r9, #0
 8000b92:	e7bd      	b.n	8000b10 <_Unwind_VRS_Pop+0x1e0>
 8000b94:	f1b8 0f0f 	cmp.w	r8, #15
 8000b98:	f63f af3f 	bhi.w	8000a1a <_Unwind_VRS_Pop+0xea>
 8000b9c:	af20      	add	r7, sp, #128	; 0x80
 8000b9e:	4638      	mov	r0, r7
 8000ba0:	f000 f820 	bl	8000be4 <__gnu_Unwind_Save_VFP_D>
 8000ba4:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 8000ba6:	2d00      	cmp	r5, #0
 8000ba8:	f47f af3a 	bne.w	8000a20 <_Unwind_VRS_Pop+0xf0>
 8000bac:	4638      	mov	r0, r7
 8000bae:	f000 f815 	bl	8000bdc <__gnu_Unwind_Restore_VFP_D>
 8000bb2:	e762      	b.n	8000a7a <_Unwind_VRS_Pop+0x14a>

08000bb4 <__restore_core_regs>:
 8000bb4:	f100 0134 	add.w	r1, r0, #52	; 0x34
 8000bb8:	e891 0038 	ldmia.w	r1, {r3, r4, r5}
 8000bbc:	469c      	mov	ip, r3
 8000bbe:	46a6      	mov	lr, r4
 8000bc0:	f84c 5d04 	str.w	r5, [ip, #-4]!
 8000bc4:	e890 0fff 	ldmia.w	r0, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
 8000bc8:	46e5      	mov	sp, ip
 8000bca:	bd00      	pop	{pc}

08000bcc <__gnu_Unwind_Restore_VFP>:
 8000bcc:	ec90 0b21 	fldmiax	r0, {d0-d15}	;@ Deprecated
 8000bd0:	4770      	bx	lr
 8000bd2:	bf00      	nop

08000bd4 <__gnu_Unwind_Save_VFP>:
 8000bd4:	ec80 0b21 	fstmiax	r0, {d0-d15}	;@ Deprecated
 8000bd8:	4770      	bx	lr
 8000bda:	bf00      	nop

08000bdc <__gnu_Unwind_Restore_VFP_D>:
 8000bdc:	ec90 0b20 	vldmia	r0, {d0-d15}
 8000be0:	4770      	bx	lr
 8000be2:	bf00      	nop

08000be4 <__gnu_Unwind_Save_VFP_D>:
 8000be4:	ec80 0b20 	vstmia	r0, {d0-d15}
 8000be8:	4770      	bx	lr
 8000bea:	bf00      	nop

08000bec <__gnu_Unwind_Restore_VFP_D_16_to_31>:
 8000bec:	ecd0 0b20 	vldmia	r0, {d16-d31}
 8000bf0:	4770      	bx	lr
 8000bf2:	bf00      	nop

08000bf4 <__gnu_Unwind_Save_VFP_D_16_to_31>:
 8000bf4:	ecc0 0b20 	vstmia	r0, {d16-d31}
 8000bf8:	4770      	bx	lr
 8000bfa:	bf00      	nop

08000bfc <__gnu_Unwind_Restore_WMMXD>:
 8000bfc:	ecf0 0102 	ldfe	f0, [r0], #8
 8000c00:	ecf0 1102 	ldfe	f1, [r0], #8
 8000c04:	ecf0 2102 	ldfe	f2, [r0], #8
 8000c08:	ecf0 3102 	ldfe	f3, [r0], #8
 8000c0c:	ecf0 4102 	ldfe	f4, [r0], #8
 8000c10:	ecf0 5102 	ldfe	f5, [r0], #8
 8000c14:	ecf0 6102 	ldfe	f6, [r0], #8
 8000c18:	ecf0 7102 	ldfe	f7, [r0], #8
 8000c1c:	ecf0 8102 	ldfp	f0, [r0], #8
 8000c20:	ecf0 9102 	ldfp	f1, [r0], #8
 8000c24:	ecf0 a102 	ldfp	f2, [r0], #8
 8000c28:	ecf0 b102 	ldfp	f3, [r0], #8
 8000c2c:	ecf0 c102 	ldfp	f4, [r0], #8
 8000c30:	ecf0 d102 	ldfp	f5, [r0], #8
 8000c34:	ecf0 e102 	ldfp	f6, [r0], #8
 8000c38:	ecf0 f102 	ldfp	f7, [r0], #8
 8000c3c:	4770      	bx	lr
 8000c3e:	bf00      	nop

08000c40 <__gnu_Unwind_Save_WMMXD>:
 8000c40:	ece0 0102 	stfe	f0, [r0], #8
 8000c44:	ece0 1102 	stfe	f1, [r0], #8
 8000c48:	ece0 2102 	stfe	f2, [r0], #8
 8000c4c:	ece0 3102 	stfe	f3, [r0], #8
 8000c50:	ece0 4102 	stfe	f4, [r0], #8
 8000c54:	ece0 5102 	stfe	f5, [r0], #8
 8000c58:	ece0 6102 	stfe	f6, [r0], #8
 8000c5c:	ece0 7102 	stfe	f7, [r0], #8
 8000c60:	ece0 8102 	stfp	f0, [r0], #8
 8000c64:	ece0 9102 	stfp	f1, [r0], #8
 8000c68:	ece0 a102 	stfp	f2, [r0], #8
 8000c6c:	ece0 b102 	stfp	f3, [r0], #8
 8000c70:	ece0 c102 	stfp	f4, [r0], #8
 8000c74:	ece0 d102 	stfp	f5, [r0], #8
 8000c78:	ece0 e102 	stfp	f6, [r0], #8
 8000c7c:	ece0 f102 	stfp	f7, [r0], #8
 8000c80:	4770      	bx	lr
 8000c82:	bf00      	nop

08000c84 <__gnu_Unwind_Restore_WMMXC>:
 8000c84:	fcb0 8101 	ldc2	1, cr8, [r0], #4
 8000c88:	fcb0 9101 	ldc2	1, cr9, [r0], #4
 8000c8c:	fcb0 a101 	ldc2	1, cr10, [r0], #4
 8000c90:	fcb0 b101 	ldc2	1, cr11, [r0], #4
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__gnu_Unwind_Save_WMMXC>:
 8000c98:	fca0 8101 	stc2	1, cr8, [r0], #4
 8000c9c:	fca0 9101 	stc2	1, cr9, [r0], #4
 8000ca0:	fca0 a101 	stc2	1, cr10, [r0], #4
 8000ca4:	fca0 b101 	stc2	1, cr11, [r0], #4
 8000ca8:	4770      	bx	lr
 8000caa:	bf00      	nop

08000cac <_Unwind_RaiseException>:
 8000cac:	46ec      	mov	ip, sp
 8000cae:	b500      	push	{lr}
 8000cb0:	e92d 5000 	stmdb	sp!, {ip, lr}
 8000cb4:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8000cb8:	f04f 0300 	mov.w	r3, #0
 8000cbc:	e92d 000c 	stmdb	sp!, {r2, r3}
 8000cc0:	a901      	add	r1, sp, #4
 8000cc2:	f7ff fbe1 	bl	8000488 <__gnu_Unwind_RaiseException>
 8000cc6:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8000cca:	b012      	add	sp, #72	; 0x48
 8000ccc:	4770      	bx	lr
 8000cce:	bf00      	nop

08000cd0 <_Unwind_Resume>:
 8000cd0:	46ec      	mov	ip, sp
 8000cd2:	b500      	push	{lr}
 8000cd4:	e92d 5000 	stmdb	sp!, {ip, lr}
 8000cd8:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8000cdc:	f04f 0300 	mov.w	r3, #0
 8000ce0:	e92d 000c 	stmdb	sp!, {r2, r3}
 8000ce4:	a901      	add	r1, sp, #4
 8000ce6:	f7ff fc0b 	bl	8000500 <__gnu_Unwind_Resume>
 8000cea:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8000cee:	b012      	add	sp, #72	; 0x48
 8000cf0:	4770      	bx	lr
 8000cf2:	bf00      	nop

08000cf4 <_Unwind_Resume_or_Rethrow>:
 8000cf4:	46ec      	mov	ip, sp
 8000cf6:	b500      	push	{lr}
 8000cf8:	e92d 5000 	stmdb	sp!, {ip, lr}
 8000cfc:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8000d00:	f04f 0300 	mov.w	r3, #0
 8000d04:	e92d 000c 	stmdb	sp!, {r2, r3}
 8000d08:	a901      	add	r1, sp, #4
 8000d0a:	f7ff fc1b 	bl	8000544 <__gnu_Unwind_Resume_or_Rethrow>
 8000d0e:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8000d12:	b012      	add	sp, #72	; 0x48
 8000d14:	4770      	bx	lr
 8000d16:	bf00      	nop

08000d18 <_Unwind_ForcedUnwind>:
 8000d18:	46ec      	mov	ip, sp
 8000d1a:	b500      	push	{lr}
 8000d1c:	e92d 5000 	stmdb	sp!, {ip, lr}
 8000d20:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8000d24:	f04f 0300 	mov.w	r3, #0
 8000d28:	e92d 000c 	stmdb	sp!, {r2, r3}
 8000d2c:	ab01      	add	r3, sp, #4
 8000d2e:	f7ff fbdf 	bl	80004f0 <__gnu_Unwind_ForcedUnwind>
 8000d32:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8000d36:	b012      	add	sp, #72	; 0x48
 8000d38:	4770      	bx	lr
 8000d3a:	bf00      	nop

08000d3c <_Unwind_Backtrace>:
 8000d3c:	46ec      	mov	ip, sp
 8000d3e:	b500      	push	{lr}
 8000d40:	e92d 5000 	stmdb	sp!, {ip, lr}
 8000d44:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8000d48:	f04f 0300 	mov.w	r3, #0
 8000d4c:	e92d 000c 	stmdb	sp!, {r2, r3}
 8000d50:	aa01      	add	r2, sp, #4
 8000d52:	f7ff fc51 	bl	80005f8 <__gnu_Unwind_Backtrace>
 8000d56:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8000d5a:	b012      	add	sp, #72	; 0x48
 8000d5c:	4770      	bx	lr
 8000d5e:	bf00      	nop

08000d60 <next_unwind_byte>:
 8000d60:	7a02      	ldrb	r2, [r0, #8]
 8000d62:	4603      	mov	r3, r0
 8000d64:	b97a      	cbnz	r2, 8000d86 <next_unwind_byte+0x26>
 8000d66:	7a42      	ldrb	r2, [r0, #9]
 8000d68:	b1a2      	cbz	r2, 8000d94 <next_unwind_byte+0x34>
 8000d6a:	6841      	ldr	r1, [r0, #4]
 8000d6c:	3a01      	subs	r2, #1
 8000d6e:	b410      	push	{r4}
 8000d70:	7242      	strb	r2, [r0, #9]
 8000d72:	6808      	ldr	r0, [r1, #0]
 8000d74:	2203      	movs	r2, #3
 8000d76:	1d0c      	adds	r4, r1, #4
 8000d78:	721a      	strb	r2, [r3, #8]
 8000d7a:	0202      	lsls	r2, r0, #8
 8000d7c:	605c      	str	r4, [r3, #4]
 8000d7e:	0e00      	lsrs	r0, r0, #24
 8000d80:	bc10      	pop	{r4}
 8000d82:	601a      	str	r2, [r3, #0]
 8000d84:	4770      	bx	lr
 8000d86:	6800      	ldr	r0, [r0, #0]
 8000d88:	3a01      	subs	r2, #1
 8000d8a:	721a      	strb	r2, [r3, #8]
 8000d8c:	0202      	lsls	r2, r0, #8
 8000d8e:	601a      	str	r2, [r3, #0]
 8000d90:	0e00      	lsrs	r0, r0, #24
 8000d92:	4770      	bx	lr
 8000d94:	20b0      	movs	r0, #176	; 0xb0
 8000d96:	4770      	bx	lr

08000d98 <_Unwind_GetGR.constprop.0>:
 8000d98:	b500      	push	{lr}
 8000d9a:	b085      	sub	sp, #20
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	aa03      	add	r2, sp, #12
 8000da0:	9200      	str	r2, [sp, #0]
 8000da2:	4619      	mov	r1, r3
 8000da4:	220c      	movs	r2, #12
 8000da6:	f7ff fbdd 	bl	8000564 <_Unwind_VRS_Get>
 8000daa:	9803      	ldr	r0, [sp, #12]
 8000dac:	b005      	add	sp, #20
 8000dae:	f85d fb04 	ldr.w	pc, [sp], #4
 8000db2:	bf00      	nop

08000db4 <unwind_UCB_from_context>:
 8000db4:	e7f0      	b.n	8000d98 <_Unwind_GetGR.constprop.0>
 8000db6:	bf00      	nop

08000db8 <__gnu_unwind_execute>:
 8000db8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000dbc:	4605      	mov	r5, r0
 8000dbe:	b085      	sub	sp, #20
 8000dc0:	460e      	mov	r6, r1
 8000dc2:	f04f 0800 	mov.w	r8, #0
 8000dc6:	4630      	mov	r0, r6
 8000dc8:	f7ff ffca 	bl	8000d60 <next_unwind_byte>
 8000dcc:	28b0      	cmp	r0, #176	; 0xb0
 8000dce:	4604      	mov	r4, r0
 8000dd0:	f000 80ba 	beq.w	8000f48 <__gnu_unwind_execute+0x190>
 8000dd4:	0607      	lsls	r7, r0, #24
 8000dd6:	d520      	bpl.n	8000e1a <__gnu_unwind_execute+0x62>
 8000dd8:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
 8000ddc:	2b80      	cmp	r3, #128	; 0x80
 8000dde:	d04d      	beq.n	8000e7c <__gnu_unwind_execute+0xc4>
 8000de0:	2b90      	cmp	r3, #144	; 0x90
 8000de2:	d036      	beq.n	8000e52 <__gnu_unwind_execute+0x9a>
 8000de4:	2ba0      	cmp	r3, #160	; 0xa0
 8000de6:	d060      	beq.n	8000eaa <__gnu_unwind_execute+0xf2>
 8000de8:	2bb0      	cmp	r3, #176	; 0xb0
 8000dea:	d074      	beq.n	8000ed6 <__gnu_unwind_execute+0x11e>
 8000dec:	2bc0      	cmp	r3, #192	; 0xc0
 8000dee:	f000 808b 	beq.w	8000f08 <__gnu_unwind_execute+0x150>
 8000df2:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
 8000df6:	2bd0      	cmp	r3, #208	; 0xd0
 8000df8:	d10b      	bne.n	8000e12 <__gnu_unwind_execute+0x5a>
 8000dfa:	f000 0207 	and.w	r2, r0, #7
 8000dfe:	3201      	adds	r2, #1
 8000e00:	2305      	movs	r3, #5
 8000e02:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8000e06:	2101      	movs	r1, #1
 8000e08:	4628      	mov	r0, r5
 8000e0a:	f7ff fd91 	bl	8000930 <_Unwind_VRS_Pop>
 8000e0e:	2800      	cmp	r0, #0
 8000e10:	d0d9      	beq.n	8000dc6 <__gnu_unwind_execute+0xe>
 8000e12:	2009      	movs	r0, #9
 8000e14:	b005      	add	sp, #20
 8000e16:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000e1a:	0083      	lsls	r3, r0, #2
 8000e1c:	b2db      	uxtb	r3, r3
 8000e1e:	1d1f      	adds	r7, r3, #4
 8000e20:	f10d 090c 	add.w	r9, sp, #12
 8000e24:	2300      	movs	r3, #0
 8000e26:	4619      	mov	r1, r3
 8000e28:	f8cd 9000 	str.w	r9, [sp]
 8000e2c:	220d      	movs	r2, #13
 8000e2e:	4628      	mov	r0, r5
 8000e30:	f7ff fb98 	bl	8000564 <_Unwind_VRS_Get>
 8000e34:	9b03      	ldr	r3, [sp, #12]
 8000e36:	f8cd 9000 	str.w	r9, [sp]
 8000e3a:	0660      	lsls	r0, r4, #25
 8000e3c:	bf4c      	ite	mi
 8000e3e:	1bdf      	submi	r7, r3, r7
 8000e40:	18ff      	addpl	r7, r7, r3
 8000e42:	2300      	movs	r3, #0
 8000e44:	220d      	movs	r2, #13
 8000e46:	4619      	mov	r1, r3
 8000e48:	4628      	mov	r0, r5
 8000e4a:	9703      	str	r7, [sp, #12]
 8000e4c:	f7ff fbb0 	bl	80005b0 <_Unwind_VRS_Set>
 8000e50:	e7b9      	b.n	8000dc6 <__gnu_unwind_execute+0xe>
 8000e52:	f000 030d 	and.w	r3, r0, #13
 8000e56:	2b0d      	cmp	r3, #13
 8000e58:	d0db      	beq.n	8000e12 <__gnu_unwind_execute+0x5a>
 8000e5a:	af03      	add	r7, sp, #12
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	f000 020f 	and.w	r2, r0, #15
 8000e62:	4619      	mov	r1, r3
 8000e64:	9700      	str	r7, [sp, #0]
 8000e66:	4628      	mov	r0, r5
 8000e68:	f7ff fb7c 	bl	8000564 <_Unwind_VRS_Get>
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	9700      	str	r7, [sp, #0]
 8000e70:	220d      	movs	r2, #13
 8000e72:	4619      	mov	r1, r3
 8000e74:	4628      	mov	r0, r5
 8000e76:	f7ff fb9b 	bl	80005b0 <_Unwind_VRS_Set>
 8000e7a:	e7a4      	b.n	8000dc6 <__gnu_unwind_execute+0xe>
 8000e7c:	4630      	mov	r0, r6
 8000e7e:	f7ff ff6f 	bl	8000d60 <next_unwind_byte>
 8000e82:	0224      	lsls	r4, r4, #8
 8000e84:	4320      	orrs	r0, r4
 8000e86:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8000e8a:	d0c2      	beq.n	8000e12 <__gnu_unwind_execute+0x5a>
 8000e8c:	0104      	lsls	r4, r0, #4
 8000e8e:	2300      	movs	r3, #0
 8000e90:	b2a2      	uxth	r2, r4
 8000e92:	4619      	mov	r1, r3
 8000e94:	4628      	mov	r0, r5
 8000e96:	f7ff fd4b 	bl	8000930 <_Unwind_VRS_Pop>
 8000e9a:	2800      	cmp	r0, #0
 8000e9c:	d1b9      	bne.n	8000e12 <__gnu_unwind_execute+0x5a>
 8000e9e:	f414 4f00 	tst.w	r4, #32768	; 0x8000
 8000ea2:	bf18      	it	ne
 8000ea4:	f04f 0801 	movne.w	r8, #1
 8000ea8:	e78d      	b.n	8000dc6 <__gnu_unwind_execute+0xe>
 8000eaa:	43c2      	mvns	r2, r0
 8000eac:	f002 0307 	and.w	r3, r2, #7
 8000eb0:	f44f 627f 	mov.w	r2, #4080	; 0xff0
 8000eb4:	411a      	asrs	r2, r3
 8000eb6:	0701      	lsls	r1, r0, #28
 8000eb8:	f402 627f 	and.w	r2, r2, #4080	; 0xff0
 8000ebc:	f04f 0300 	mov.w	r3, #0
 8000ec0:	bf48      	it	mi
 8000ec2:	f442 4280 	orrmi.w	r2, r2, #16384	; 0x4000
 8000ec6:	4619      	mov	r1, r3
 8000ec8:	4628      	mov	r0, r5
 8000eca:	f7ff fd31 	bl	8000930 <_Unwind_VRS_Pop>
 8000ece:	2800      	cmp	r0, #0
 8000ed0:	f43f af79 	beq.w	8000dc6 <__gnu_unwind_execute+0xe>
 8000ed4:	e79d      	b.n	8000e12 <__gnu_unwind_execute+0x5a>
 8000ed6:	28b1      	cmp	r0, #177	; 0xb1
 8000ed8:	d03b      	beq.n	8000f52 <__gnu_unwind_execute+0x19a>
 8000eda:	28b2      	cmp	r0, #178	; 0xb2
 8000edc:	f000 8093 	beq.w	8001006 <__gnu_unwind_execute+0x24e>
 8000ee0:	28b3      	cmp	r0, #179	; 0xb3
 8000ee2:	d041      	beq.n	8000f68 <__gnu_unwind_execute+0x1b0>
 8000ee4:	f000 03fc 	and.w	r3, r0, #252	; 0xfc
 8000ee8:	2bb4      	cmp	r3, #180	; 0xb4
 8000eea:	d092      	beq.n	8000e12 <__gnu_unwind_execute+0x5a>
 8000eec:	f000 0207 	and.w	r2, r0, #7
 8000ef0:	3201      	adds	r2, #1
 8000ef2:	2301      	movs	r3, #1
 8000ef4:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8000ef8:	4619      	mov	r1, r3
 8000efa:	4628      	mov	r0, r5
 8000efc:	f7ff fd18 	bl	8000930 <_Unwind_VRS_Pop>
 8000f00:	2800      	cmp	r0, #0
 8000f02:	f43f af60 	beq.w	8000dc6 <__gnu_unwind_execute+0xe>
 8000f06:	e784      	b.n	8000e12 <__gnu_unwind_execute+0x5a>
 8000f08:	28c6      	cmp	r0, #198	; 0xc6
 8000f0a:	d04a      	beq.n	8000fa2 <__gnu_unwind_execute+0x1ea>
 8000f0c:	28c7      	cmp	r0, #199	; 0xc7
 8000f0e:	d054      	beq.n	8000fba <__gnu_unwind_execute+0x202>
 8000f10:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
 8000f14:	2bc0      	cmp	r3, #192	; 0xc0
 8000f16:	d063      	beq.n	8000fe0 <__gnu_unwind_execute+0x228>
 8000f18:	28c8      	cmp	r0, #200	; 0xc8
 8000f1a:	d068      	beq.n	8000fee <__gnu_unwind_execute+0x236>
 8000f1c:	28c9      	cmp	r0, #201	; 0xc9
 8000f1e:	f47f af78 	bne.w	8000e12 <__gnu_unwind_execute+0x5a>
 8000f22:	4630      	mov	r0, r6
 8000f24:	f7ff ff1c 	bl	8000d60 <next_unwind_byte>
 8000f28:	0302      	lsls	r2, r0, #12
 8000f2a:	f000 000f 	and.w	r0, r0, #15
 8000f2e:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
 8000f32:	3001      	adds	r0, #1
 8000f34:	4302      	orrs	r2, r0
 8000f36:	2101      	movs	r1, #1
 8000f38:	2305      	movs	r3, #5
 8000f3a:	4628      	mov	r0, r5
 8000f3c:	f7ff fcf8 	bl	8000930 <_Unwind_VRS_Pop>
 8000f40:	2800      	cmp	r0, #0
 8000f42:	f43f af40 	beq.w	8000dc6 <__gnu_unwind_execute+0xe>
 8000f46:	e764      	b.n	8000e12 <__gnu_unwind_execute+0x5a>
 8000f48:	f1b8 0f00 	cmp.w	r8, #0
 8000f4c:	d018      	beq.n	8000f80 <__gnu_unwind_execute+0x1c8>
 8000f4e:	2000      	movs	r0, #0
 8000f50:	e760      	b.n	8000e14 <__gnu_unwind_execute+0x5c>
 8000f52:	4630      	mov	r0, r6
 8000f54:	f7ff ff04 	bl	8000d60 <next_unwind_byte>
 8000f58:	4602      	mov	r2, r0
 8000f5a:	2800      	cmp	r0, #0
 8000f5c:	f43f af59 	beq.w	8000e12 <__gnu_unwind_execute+0x5a>
 8000f60:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
 8000f64:	d0c8      	beq.n	8000ef8 <__gnu_unwind_execute+0x140>
 8000f66:	e754      	b.n	8000e12 <__gnu_unwind_execute+0x5a>
 8000f68:	4630      	mov	r0, r6
 8000f6a:	f7ff fef9 	bl	8000d60 <next_unwind_byte>
 8000f6e:	0302      	lsls	r2, r0, #12
 8000f70:	f000 030f 	and.w	r3, r0, #15
 8000f74:	3301      	adds	r3, #1
 8000f76:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
 8000f7a:	431a      	orrs	r2, r3
 8000f7c:	2301      	movs	r3, #1
 8000f7e:	e7bb      	b.n	8000ef8 <__gnu_unwind_execute+0x140>
 8000f80:	ac03      	add	r4, sp, #12
 8000f82:	4643      	mov	r3, r8
 8000f84:	220e      	movs	r2, #14
 8000f86:	4641      	mov	r1, r8
 8000f88:	9400      	str	r4, [sp, #0]
 8000f8a:	4628      	mov	r0, r5
 8000f8c:	f7ff faea 	bl	8000564 <_Unwind_VRS_Get>
 8000f90:	9400      	str	r4, [sp, #0]
 8000f92:	4643      	mov	r3, r8
 8000f94:	220f      	movs	r2, #15
 8000f96:	4641      	mov	r1, r8
 8000f98:	4628      	mov	r0, r5
 8000f9a:	f7ff fb09 	bl	80005b0 <_Unwind_VRS_Set>
 8000f9e:	4640      	mov	r0, r8
 8000fa0:	e738      	b.n	8000e14 <__gnu_unwind_execute+0x5c>
 8000fa2:	4630      	mov	r0, r6
 8000fa4:	f7ff fedc 	bl	8000d60 <next_unwind_byte>
 8000fa8:	0302      	lsls	r2, r0, #12
 8000faa:	f000 030f 	and.w	r3, r0, #15
 8000fae:	3301      	adds	r3, #1
 8000fb0:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
 8000fb4:	431a      	orrs	r2, r3
 8000fb6:	2303      	movs	r3, #3
 8000fb8:	e79e      	b.n	8000ef8 <__gnu_unwind_execute+0x140>
 8000fba:	4630      	mov	r0, r6
 8000fbc:	f7ff fed0 	bl	8000d60 <next_unwind_byte>
 8000fc0:	4602      	mov	r2, r0
 8000fc2:	2800      	cmp	r0, #0
 8000fc4:	f43f af25 	beq.w	8000e12 <__gnu_unwind_execute+0x5a>
 8000fc8:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
 8000fcc:	f47f af21 	bne.w	8000e12 <__gnu_unwind_execute+0x5a>
 8000fd0:	2104      	movs	r1, #4
 8000fd2:	4628      	mov	r0, r5
 8000fd4:	f7ff fcac 	bl	8000930 <_Unwind_VRS_Pop>
 8000fd8:	2800      	cmp	r0, #0
 8000fda:	f43f aef4 	beq.w	8000dc6 <__gnu_unwind_execute+0xe>
 8000fde:	e718      	b.n	8000e12 <__gnu_unwind_execute+0x5a>
 8000fe0:	f000 020f 	and.w	r2, r0, #15
 8000fe4:	3201      	adds	r2, #1
 8000fe6:	2303      	movs	r3, #3
 8000fe8:	f442 2220 	orr.w	r2, r2, #655360	; 0xa0000
 8000fec:	e784      	b.n	8000ef8 <__gnu_unwind_execute+0x140>
 8000fee:	4630      	mov	r0, r6
 8000ff0:	f7ff feb6 	bl	8000d60 <next_unwind_byte>
 8000ff4:	f000 02f0 	and.w	r2, r0, #240	; 0xf0
 8000ff8:	f000 030f 	and.w	r3, r0, #15
 8000ffc:	3210      	adds	r2, #16
 8000ffe:	3301      	adds	r3, #1
 8001000:	ea43 3202 	orr.w	r2, r3, r2, lsl #12
 8001004:	e797      	b.n	8000f36 <__gnu_unwind_execute+0x17e>
 8001006:	2300      	movs	r3, #0
 8001008:	f10d 090c 	add.w	r9, sp, #12
 800100c:	220d      	movs	r2, #13
 800100e:	4619      	mov	r1, r3
 8001010:	f8cd 9000 	str.w	r9, [sp]
 8001014:	4628      	mov	r0, r5
 8001016:	f7ff faa5 	bl	8000564 <_Unwind_VRS_Get>
 800101a:	4630      	mov	r0, r6
 800101c:	f7ff fea0 	bl	8000d60 <next_unwind_byte>
 8001020:	0602      	lsls	r2, r0, #24
 8001022:	f04f 0402 	mov.w	r4, #2
 8001026:	d50c      	bpl.n	8001042 <__gnu_unwind_execute+0x28a>
 8001028:	9b03      	ldr	r3, [sp, #12]
 800102a:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 800102e:	40a0      	lsls	r0, r4
 8001030:	4418      	add	r0, r3
 8001032:	9003      	str	r0, [sp, #12]
 8001034:	4630      	mov	r0, r6
 8001036:	f7ff fe93 	bl	8000d60 <next_unwind_byte>
 800103a:	0603      	lsls	r3, r0, #24
 800103c:	f104 0407 	add.w	r4, r4, #7
 8001040:	d4f2      	bmi.n	8001028 <__gnu_unwind_execute+0x270>
 8001042:	9b03      	ldr	r3, [sp, #12]
 8001044:	f8cd 9000 	str.w	r9, [sp]
 8001048:	f000 027f 	and.w	r2, r0, #127	; 0x7f
 800104c:	40a2      	lsls	r2, r4
 800104e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8001052:	441a      	add	r2, r3
 8001054:	2300      	movs	r3, #0
 8001056:	9203      	str	r2, [sp, #12]
 8001058:	4619      	mov	r1, r3
 800105a:	220d      	movs	r2, #13
 800105c:	4628      	mov	r0, r5
 800105e:	f7ff faa7 	bl	80005b0 <_Unwind_VRS_Set>
 8001062:	e6b0      	b.n	8000dc6 <__gnu_unwind_execute+0xe>

08001064 <__gnu_unwind_frame>:
 8001064:	b510      	push	{r4, lr}
 8001066:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 8001068:	6853      	ldr	r3, [r2, #4]
 800106a:	b084      	sub	sp, #16
 800106c:	f04f 0c03 	mov.w	ip, #3
 8001070:	3208      	adds	r2, #8
 8001072:	021c      	lsls	r4, r3, #8
 8001074:	4608      	mov	r0, r1
 8001076:	0e1b      	lsrs	r3, r3, #24
 8001078:	a901      	add	r1, sp, #4
 800107a:	9401      	str	r4, [sp, #4]
 800107c:	9202      	str	r2, [sp, #8]
 800107e:	f88d c00c 	strb.w	ip, [sp, #12]
 8001082:	f88d 300d 	strb.w	r3, [sp, #13]
 8001086:	f7ff fe97 	bl	8000db8 <__gnu_unwind_execute>
 800108a:	b004      	add	sp, #16
 800108c:	bd10      	pop	{r4, pc}
 800108e:	bf00      	nop

08001090 <_Unwind_GetRegionStart>:
 8001090:	b508      	push	{r3, lr}
 8001092:	f7ff fe8f 	bl	8000db4 <unwind_UCB_from_context>
 8001096:	6c80      	ldr	r0, [r0, #72]	; 0x48
 8001098:	bd08      	pop	{r3, pc}
 800109a:	bf00      	nop

0800109c <_Unwind_GetLanguageSpecificData>:
 800109c:	b508      	push	{r3, lr}
 800109e:	f7ff fe89 	bl	8000db4 <unwind_UCB_from_context>
 80010a2:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 80010a4:	79c3      	ldrb	r3, [r0, #7]
 80010a6:	3302      	adds	r3, #2
 80010a8:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 80010ac:	bd08      	pop	{r3, pc}
 80010ae:	bf00      	nop

080010b0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b08a      	sub	sp, #40	; 0x28
 80010b4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010b6:	f107 0314 	add.w	r3, r7, #20
 80010ba:	2200      	movs	r2, #0
 80010bc:	601a      	str	r2, [r3, #0]
 80010be:	605a      	str	r2, [r3, #4]
 80010c0:	609a      	str	r2, [r3, #8]
 80010c2:	60da      	str	r2, [r3, #12]
 80010c4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010c6:	4b31      	ldr	r3, [pc, #196]	; (800118c <MX_GPIO_Init+0xdc>)
 80010c8:	695b      	ldr	r3, [r3, #20]
 80010ca:	4a30      	ldr	r2, [pc, #192]	; (800118c <MX_GPIO_Init+0xdc>)
 80010cc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80010d0:	6153      	str	r3, [r2, #20]
 80010d2:	4b2e      	ldr	r3, [pc, #184]	; (800118c <MX_GPIO_Init+0xdc>)
 80010d4:	695b      	ldr	r3, [r3, #20]
 80010d6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80010da:	613b      	str	r3, [r7, #16]
 80010dc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80010de:	4b2b      	ldr	r3, [pc, #172]	; (800118c <MX_GPIO_Init+0xdc>)
 80010e0:	695b      	ldr	r3, [r3, #20]
 80010e2:	4a2a      	ldr	r2, [pc, #168]	; (800118c <MX_GPIO_Init+0xdc>)
 80010e4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80010e8:	6153      	str	r3, [r2, #20]
 80010ea:	4b28      	ldr	r3, [pc, #160]	; (800118c <MX_GPIO_Init+0xdc>)
 80010ec:	695b      	ldr	r3, [r3, #20]
 80010ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80010f2:	60fb      	str	r3, [r7, #12]
 80010f4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010f6:	4b25      	ldr	r3, [pc, #148]	; (800118c <MX_GPIO_Init+0xdc>)
 80010f8:	695b      	ldr	r3, [r3, #20]
 80010fa:	4a24      	ldr	r2, [pc, #144]	; (800118c <MX_GPIO_Init+0xdc>)
 80010fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001100:	6153      	str	r3, [r2, #20]
 8001102:	4b22      	ldr	r3, [pc, #136]	; (800118c <MX_GPIO_Init+0xdc>)
 8001104:	695b      	ldr	r3, [r3, #20]
 8001106:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800110a:	60bb      	str	r3, [r7, #8]
 800110c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800110e:	4b1f      	ldr	r3, [pc, #124]	; (800118c <MX_GPIO_Init+0xdc>)
 8001110:	695b      	ldr	r3, [r3, #20]
 8001112:	4a1e      	ldr	r2, [pc, #120]	; (800118c <MX_GPIO_Init+0xdc>)
 8001114:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001118:	6153      	str	r3, [r2, #20]
 800111a:	4b1c      	ldr	r3, [pc, #112]	; (800118c <MX_GPIO_Init+0xdc>)
 800111c:	695b      	ldr	r3, [r3, #20]
 800111e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001122:	607b      	str	r3, [r7, #4]
 8001124:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001126:	4b19      	ldr	r3, [pc, #100]	; (800118c <MX_GPIO_Init+0xdc>)
 8001128:	695b      	ldr	r3, [r3, #20]
 800112a:	4a18      	ldr	r2, [pc, #96]	; (800118c <MX_GPIO_Init+0xdc>)
 800112c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001130:	6153      	str	r3, [r2, #20]
 8001132:	4b16      	ldr	r3, [pc, #88]	; (800118c <MX_GPIO_Init+0xdc>)
 8001134:	695b      	ldr	r3, [r3, #20]
 8001136:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800113a:	603b      	str	r3, [r7, #0]
 800113c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LD4_Pin|LD3_Pin|LD5_Pin|LD7_Pin
 800113e:	2200      	movs	r2, #0
 8001140:	f44f 417f 	mov.w	r1, #65280	; 0xff00
 8001144:	4812      	ldr	r0, [pc, #72]	; (8001190 <MX_GPIO_Init+0xe0>)
 8001146:	f000 ff43 	bl	8001fd0 <HAL_GPIO_WritePin>
                          |LD9_Pin|LD10_Pin|LD8_Pin|LD6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 800114a:	2301      	movs	r3, #1
 800114c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800114e:	2300      	movs	r3, #0
 8001150:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001152:	2300      	movs	r3, #0
 8001154:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001156:	f107 0314 	add.w	r3, r7, #20
 800115a:	4619      	mov	r1, r3
 800115c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001160:	f000 fdbc 	bl	8001cdc <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD7_Pin
 8001164:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 8001168:	617b      	str	r3, [r7, #20]
                          |LD9_Pin|LD10_Pin|LD8_Pin|LD6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800116a:	2301      	movs	r3, #1
 800116c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800116e:	2300      	movs	r3, #0
 8001170:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001172:	2300      	movs	r3, #0
 8001174:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001176:	f107 0314 	add.w	r3, r7, #20
 800117a:	4619      	mov	r1, r3
 800117c:	4804      	ldr	r0, [pc, #16]	; (8001190 <MX_GPIO_Init+0xe0>)
 800117e:	f000 fdad 	bl	8001cdc <HAL_GPIO_Init>

}
 8001182:	bf00      	nop
 8001184:	3728      	adds	r7, #40	; 0x28
 8001186:	46bd      	mov	sp, r7
 8001188:	bd80      	pop	{r7, pc}
 800118a:	bf00      	nop
 800118c:	40021000 	.word	0x40021000
 8001190:	48001000 	.word	0x48001000

08001194 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001198:	4b1b      	ldr	r3, [pc, #108]	; (8001208 <MX_I2C1_Init+0x74>)
 800119a:	4a1c      	ldr	r2, [pc, #112]	; (800120c <MX_I2C1_Init+0x78>)
 800119c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 800119e:	4b1a      	ldr	r3, [pc, #104]	; (8001208 <MX_I2C1_Init+0x74>)
 80011a0:	4a1b      	ldr	r2, [pc, #108]	; (8001210 <MX_I2C1_Init+0x7c>)
 80011a2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80011a4:	4b18      	ldr	r3, [pc, #96]	; (8001208 <MX_I2C1_Init+0x74>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80011aa:	4b17      	ldr	r3, [pc, #92]	; (8001208 <MX_I2C1_Init+0x74>)
 80011ac:	2201      	movs	r2, #1
 80011ae:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80011b0:	4b15      	ldr	r3, [pc, #84]	; (8001208 <MX_I2C1_Init+0x74>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80011b6:	4b14      	ldr	r3, [pc, #80]	; (8001208 <MX_I2C1_Init+0x74>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80011bc:	4b12      	ldr	r3, [pc, #72]	; (8001208 <MX_I2C1_Init+0x74>)
 80011be:	2200      	movs	r2, #0
 80011c0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80011c2:	4b11      	ldr	r3, [pc, #68]	; (8001208 <MX_I2C1_Init+0x74>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80011c8:	4b0f      	ldr	r3, [pc, #60]	; (8001208 <MX_I2C1_Init+0x74>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80011ce:	480e      	ldr	r0, [pc, #56]	; (8001208 <MX_I2C1_Init+0x74>)
 80011d0:	f000 ff16 	bl	8002000 <HAL_I2C_Init>
 80011d4:	4603      	mov	r3, r0
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d001      	beq.n	80011de <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80011da:	f000 fa41 	bl	8001660 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80011de:	2100      	movs	r1, #0
 80011e0:	4809      	ldr	r0, [pc, #36]	; (8001208 <MX_I2C1_Init+0x74>)
 80011e2:	f000 ff9c 	bl	800211e <HAL_I2CEx_ConfigAnalogFilter>
 80011e6:	4603      	mov	r3, r0
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d001      	beq.n	80011f0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80011ec:	f000 fa38 	bl	8001660 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80011f0:	2100      	movs	r1, #0
 80011f2:	4805      	ldr	r0, [pc, #20]	; (8001208 <MX_I2C1_Init+0x74>)
 80011f4:	f000 ffde 	bl	80021b4 <HAL_I2CEx_ConfigDigitalFilter>
 80011f8:	4603      	mov	r3, r0
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d001      	beq.n	8001202 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80011fe:	f000 fa2f 	bl	8001660 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001202:	bf00      	nop
 8001204:	bd80      	pop	{r7, pc}
 8001206:	bf00      	nop
 8001208:	20000094 	.word	0x20000094
 800120c:	40005400 	.word	0x40005400
 8001210:	2000090e 	.word	0x2000090e

08001214 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b08a      	sub	sp, #40	; 0x28
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800121c:	f107 0314 	add.w	r3, r7, #20
 8001220:	2200      	movs	r2, #0
 8001222:	601a      	str	r2, [r3, #0]
 8001224:	605a      	str	r2, [r3, #4]
 8001226:	609a      	str	r2, [r3, #8]
 8001228:	60da      	str	r2, [r3, #12]
 800122a:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	4a17      	ldr	r2, [pc, #92]	; (8001290 <HAL_I2C_MspInit+0x7c>)
 8001232:	4293      	cmp	r3, r2
 8001234:	d127      	bne.n	8001286 <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001236:	4b17      	ldr	r3, [pc, #92]	; (8001294 <HAL_I2C_MspInit+0x80>)
 8001238:	695b      	ldr	r3, [r3, #20]
 800123a:	4a16      	ldr	r2, [pc, #88]	; (8001294 <HAL_I2C_MspInit+0x80>)
 800123c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001240:	6153      	str	r3, [r2, #20]
 8001242:	4b14      	ldr	r3, [pc, #80]	; (8001294 <HAL_I2C_MspInit+0x80>)
 8001244:	695b      	ldr	r3, [r3, #20]
 8001246:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800124a:	613b      	str	r3, [r7, #16]
 800124c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 800124e:	23c0      	movs	r3, #192	; 0xc0
 8001250:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001252:	2312      	movs	r3, #18
 8001254:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001256:	2301      	movs	r3, #1
 8001258:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800125a:	2303      	movs	r3, #3
 800125c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800125e:	2304      	movs	r3, #4
 8001260:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001262:	f107 0314 	add.w	r3, r7, #20
 8001266:	4619      	mov	r1, r3
 8001268:	480b      	ldr	r0, [pc, #44]	; (8001298 <HAL_I2C_MspInit+0x84>)
 800126a:	f000 fd37 	bl	8001cdc <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800126e:	4b09      	ldr	r3, [pc, #36]	; (8001294 <HAL_I2C_MspInit+0x80>)
 8001270:	69db      	ldr	r3, [r3, #28]
 8001272:	4a08      	ldr	r2, [pc, #32]	; (8001294 <HAL_I2C_MspInit+0x80>)
 8001274:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001278:	61d3      	str	r3, [r2, #28]
 800127a:	4b06      	ldr	r3, [pc, #24]	; (8001294 <HAL_I2C_MspInit+0x80>)
 800127c:	69db      	ldr	r3, [r3, #28]
 800127e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001282:	60fb      	str	r3, [r7, #12]
 8001284:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001286:	bf00      	nop
 8001288:	3728      	adds	r7, #40	; 0x28
 800128a:	46bd      	mov	sp, r7
 800128c:	bd80      	pop	{r7, pc}
 800128e:	bf00      	nop
 8001290:	40005400 	.word	0x40005400
 8001294:	40021000 	.word	0x40021000
 8001298:	48000400 	.word	0x48000400

0800129c <_ZN5stm3210PeripheralC1ERKS0_>:
 * Class Inheritance:
 * Peripheral -> GPIO -> Port -> Pin -> PinList
 * Peripheral -> UART -> Serial -> Transmit/Receive
 */

class Peripheral {
 800129c:	b480      	push	{r7}
 800129e:	b083      	sub	sp, #12
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
 80012a4:	6039      	str	r1, [r7, #0]
 80012a6:	4a05      	ldr	r2, [pc, #20]	; (80012bc <_ZN5stm3210PeripheralC1ERKS0_+0x20>)
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	601a      	str	r2, [r3, #0]
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	4618      	mov	r0, r3
 80012b0:	370c      	adds	r7, #12
 80012b2:	46bd      	mov	sp, r7
 80012b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b8:	4770      	bx	lr
 80012ba:	bf00      	nop
 80012bc:	0800507c 	.word	0x0800507c

080012c0 <_ZN5stm324GPIOC1ERKS0_>:
#define 	GPIO_PIN_NUMBER		(16U)
#define 	GPIO_PIN_ALL		((uint16_t)0xFFFFU)

namespace stm32 {

class GPIO : public Peripheral {
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b082      	sub	sp, #8
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
 80012c8:	6039      	str	r1, [r7, #0]
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	683a      	ldr	r2, [r7, #0]
 80012ce:	4611      	mov	r1, r2
 80012d0:	4618      	mov	r0, r3
 80012d2:	f7ff ffe3 	bl	800129c <_ZN5stm3210PeripheralC1ERKS0_>
 80012d6:	4a04      	ldr	r2, [pc, #16]	; (80012e8 <_ZN5stm324GPIOC1ERKS0_+0x28>)
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	601a      	str	r2, [r3, #0]
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	4618      	mov	r0, r3
 80012e0:	3708      	adds	r7, #8
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bd80      	pop	{r7, pc}
 80012e6:	bf00      	nop
 80012e8:	0800506c 	.word	0x0800506c

080012ec <_ZN5stm324PortC1ERKS0_>:

#include <GPIO_.hpp>

namespace stm32 {

class Port : public GPIO {
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b082      	sub	sp, #8
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
 80012f4:	6039      	str	r1, [r7, #0]
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	683a      	ldr	r2, [r7, #0]
 80012fa:	4611      	mov	r1, r2
 80012fc:	4618      	mov	r0, r3
 80012fe:	f7ff ffdf 	bl	80012c0 <_ZN5stm324GPIOC1ERKS0_>
 8001302:	4a06      	ldr	r2, [pc, #24]	; (800131c <_ZN5stm324PortC1ERKS0_+0x30>)
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	601a      	str	r2, [r3, #0]
 8001308:	683b      	ldr	r3, [r7, #0]
 800130a:	685a      	ldr	r2, [r3, #4]
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	605a      	str	r2, [r3, #4]
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	4618      	mov	r0, r3
 8001314:	3708      	adds	r7, #8
 8001316:	46bd      	mov	sp, r7
 8001318:	bd80      	pop	{r7, pc}
 800131a:	bf00      	nop
 800131c:	080050b8 	.word	0x080050b8

08001320 <_ZN5stm323PinC1ERKS0_>:

#include <Port.hpp>

namespace stm32 {

class Pin : public Port {
 8001320:	b580      	push	{r7, lr}
 8001322:	b082      	sub	sp, #8
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
 8001328:	6039      	str	r1, [r7, #0]
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	683a      	ldr	r2, [r7, #0]
 800132e:	4611      	mov	r1, r2
 8001330:	4618      	mov	r0, r3
 8001332:	f7ff ffdb 	bl	80012ec <_ZN5stm324PortC1ERKS0_>
 8001336:	4a06      	ldr	r2, [pc, #24]	; (8001350 <_ZN5stm323PinC1ERKS0_+0x30>)
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	601a      	str	r2, [r3, #0]
 800133c:	683b      	ldr	r3, [r7, #0]
 800133e:	891a      	ldrh	r2, [r3, #8]
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	811a      	strh	r2, [r3, #8]
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	4618      	mov	r0, r3
 8001348:	3708      	adds	r7, #8
 800134a:	46bd      	mov	sp, r7
 800134c:	bd80      	pop	{r7, pc}
 800134e:	bf00      	nop
 8001350:	0800508c 	.word	0x0800508c

08001354 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001354:	b590      	push	{r4, r7, lr}
 8001356:	b0b9      	sub	sp, #228	; 0xe4
 8001358:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800135a:	f000 fb4f 	bl	80019fc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800135e:	f000 f90f 	bl	8001580 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001362:	f7ff fea5 	bl	80010b0 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001366:	f7ff ff15 	bl	8001194 <MX_I2C1_Init>
  MX_SPI1_Init();
 800136a:	f000 f97f 	bl	800166c <MX_SPI1_Init>
  MX_USB_PCD_Init();
 800136e:	f000 fab5 	bl	80018dc <MX_USB_PCD_Init>
  /* USER CODE BEGIN 2 */
  stm32::Pin PA8(GPIOE, GPIO_PIN_8);
 8001372:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001376:	f44f 7280 	mov.w	r2, #256	; 0x100
 800137a:	497d      	ldr	r1, [pc, #500]	; (8001570 <main+0x21c>)
 800137c:	4618      	mov	r0, r3
 800137e:	f002 fd57 	bl	8003e30 <_ZN5stm323PinC1EP12GPIO_TypeDeft>
  stm32::Pin PA9(GPIOE, GPIO_PIN_9);
 8001382:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001386:	f44f 7200 	mov.w	r2, #512	; 0x200
 800138a:	4979      	ldr	r1, [pc, #484]	; (8001570 <main+0x21c>)
 800138c:	4618      	mov	r0, r3
 800138e:	f002 fd4f 	bl	8003e30 <_ZN5stm323PinC1EP12GPIO_TypeDeft>
  stm32::Pin PA10(GPIOE, GPIO_PIN_10);
 8001392:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001396:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800139a:	4975      	ldr	r1, [pc, #468]	; (8001570 <main+0x21c>)
 800139c:	4618      	mov	r0, r3
 800139e:	f002 fd47 	bl	8003e30 <_ZN5stm323PinC1EP12GPIO_TypeDeft>
  stm32::Pin PA11(GPIOE, GPIO_PIN_11);
 80013a2:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80013a6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80013aa:	4971      	ldr	r1, [pc, #452]	; (8001570 <main+0x21c>)
 80013ac:	4618      	mov	r0, r3
 80013ae:	f002 fd3f 	bl	8003e30 <_ZN5stm323PinC1EP12GPIO_TypeDeft>
  stm32::Pin PA12(GPIOE, GPIO_PIN_12);
 80013b2:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80013b6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80013ba:	496d      	ldr	r1, [pc, #436]	; (8001570 <main+0x21c>)
 80013bc:	4618      	mov	r0, r3
 80013be:	f002 fd37 	bl	8003e30 <_ZN5stm323PinC1EP12GPIO_TypeDeft>
  stm32::Pin PA13(GPIOE, GPIO_PIN_13);
 80013c2:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80013c6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80013ca:	4969      	ldr	r1, [pc, #420]	; (8001570 <main+0x21c>)
 80013cc:	4618      	mov	r0, r3
 80013ce:	f002 fd2f 	bl	8003e30 <_ZN5stm323PinC1EP12GPIO_TypeDeft>
  stm32::Pin PA14(GPIOE, GPIO_PIN_14);
 80013d2:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80013d6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80013da:	4965      	ldr	r1, [pc, #404]	; (8001570 <main+0x21c>)
 80013dc:	4618      	mov	r0, r3
 80013de:	f002 fd27 	bl	8003e30 <_ZN5stm323PinC1EP12GPIO_TypeDeft>
  stm32::Pin PA15(GPIOE, GPIO_PIN_15);
 80013e2:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80013e6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80013ea:	4961      	ldr	r1, [pc, #388]	; (8001570 <main+0x21c>)
 80013ec:	4618      	mov	r0, r3
 80013ee:	f002 fd1f 	bl	8003e30 <_ZN5stm323PinC1EP12GPIO_TypeDeft>
  stm32::Pin LEDs[8] = {PA8, PA9, PA10, PA11, PA12, PA13, PA14, PA15};
 80013f2:	f107 0420 	add.w	r4, r7, #32
 80013f6:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80013fa:	4619      	mov	r1, r3
 80013fc:	4620      	mov	r0, r4
 80013fe:	f7ff ff8f 	bl	8001320 <_ZN5stm323PinC1ERKS0_>
 8001402:	340c      	adds	r4, #12
 8001404:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001408:	4619      	mov	r1, r3
 800140a:	4620      	mov	r0, r4
 800140c:	f7ff ff88 	bl	8001320 <_ZN5stm323PinC1ERKS0_>
 8001410:	340c      	adds	r4, #12
 8001412:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001416:	4619      	mov	r1, r3
 8001418:	4620      	mov	r0, r4
 800141a:	f7ff ff81 	bl	8001320 <_ZN5stm323PinC1ERKS0_>
 800141e:	340c      	adds	r4, #12
 8001420:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8001424:	4619      	mov	r1, r3
 8001426:	4620      	mov	r0, r4
 8001428:	f7ff ff7a 	bl	8001320 <_ZN5stm323PinC1ERKS0_>
 800142c:	340c      	adds	r4, #12
 800142e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001432:	4619      	mov	r1, r3
 8001434:	4620      	mov	r0, r4
 8001436:	f7ff ff73 	bl	8001320 <_ZN5stm323PinC1ERKS0_>
 800143a:	340c      	adds	r4, #12
 800143c:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001440:	4619      	mov	r1, r3
 8001442:	4620      	mov	r0, r4
 8001444:	f7ff ff6c 	bl	8001320 <_ZN5stm323PinC1ERKS0_>
 8001448:	340c      	adds	r4, #12
 800144a:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800144e:	4619      	mov	r1, r3
 8001450:	4620      	mov	r0, r4
 8001452:	f7ff ff65 	bl	8001320 <_ZN5stm323PinC1ERKS0_>
 8001456:	f104 030c 	add.w	r3, r4, #12
 800145a:	f107 0280 	add.w	r2, r7, #128	; 0x80
 800145e:	4611      	mov	r1, r2
 8001460:	4618      	mov	r0, r3
 8001462:	f7ff ff5d 	bl	8001320 <_ZN5stm323PinC1ERKS0_>
  stm32::PinList LD(LEDs, sizeof LEDs / sizeof LEDs[0]);
 8001466:	f107 0120 	add.w	r1, r7, #32
 800146a:	f107 0314 	add.w	r3, r7, #20
 800146e:	2208      	movs	r2, #8
 8001470:	4618      	mov	r0, r3
 8001472:	f002 fdc1 	bl	8003ff8 <_ZN5stm327PinListC1EPNS_3PinEi>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  State s1[8] = {State::Set, State::Reset, State::Set, State::Reset, State::Set, State::Reset, State::Set, State::Reset};
 8001476:	4a3f      	ldr	r2, [pc, #252]	; (8001574 <main+0x220>)
 8001478:	f107 030c 	add.w	r3, r7, #12
 800147c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001480:	e883 0003 	stmia.w	r3, {r0, r1}
	  LD = s1;
 8001484:	f107 020c 	add.w	r2, r7, #12
 8001488:	f107 0314 	add.w	r3, r7, #20
 800148c:	4611      	mov	r1, r2
 800148e:	4618      	mov	r0, r3
 8001490:	f002 fe2a 	bl	80040e8 <_ZN5stm327PinListaSEP5State>
	  a = static_cast<State>(LD[4]);
 8001494:	f107 0314 	add.w	r3, r7, #20
 8001498:	2104      	movs	r1, #4
 800149a:	4618      	mov	r0, r3
 800149c:	f002 fe48 	bl	8004130 <_ZN5stm327PinListixEi>
 80014a0:	4603      	mov	r3, r0
 80014a2:	461a      	mov	r2, r3
 80014a4:	4b34      	ldr	r3, [pc, #208]	; (8001578 <main+0x224>)
 80014a6:	601a      	str	r2, [r3, #0]
	  HAL_Delay(1000);
 80014a8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80014ac:	f000 fb0c 	bl	8001ac8 <HAL_Delay>
	  State s2[8] = {State::Reset, State::Set, State::Reset, State::Set, State::Reset, State::Set, State::Reset, State::Set};
 80014b0:	4a32      	ldr	r2, [pc, #200]	; (800157c <main+0x228>)
 80014b2:	1d3b      	adds	r3, r7, #4
 80014b4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80014b8:	e883 0003 	stmia.w	r3, {r0, r1}
	  LD = s2;
 80014bc:	1d3a      	adds	r2, r7, #4
 80014be:	f107 0314 	add.w	r3, r7, #20
 80014c2:	4611      	mov	r1, r2
 80014c4:	4618      	mov	r0, r3
 80014c6:	f002 fe0f 	bl	80040e8 <_ZN5stm327PinListaSEP5State>
	  a = static_cast<State>(LD[4]);
 80014ca:	f107 0314 	add.w	r3, r7, #20
 80014ce:	2104      	movs	r1, #4
 80014d0:	4618      	mov	r0, r3
 80014d2:	f002 fe2d 	bl	8004130 <_ZN5stm327PinListixEi>
 80014d6:	4603      	mov	r3, r0
 80014d8:	461a      	mov	r2, r3
 80014da:	4b27      	ldr	r3, [pc, #156]	; (8001578 <main+0x224>)
 80014dc:	601a      	str	r2, [r3, #0]
	  HAL_Delay(1000);
 80014de:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80014e2:	f000 faf1 	bl	8001ac8 <HAL_Delay>

  }
 80014e6:	e7c6      	b.n	8001476 <main+0x122>
  stm32::PinList LD(LEDs, sizeof LEDs / sizeof LEDs[0]);
 80014e8:	f107 0314 	add.w	r3, r7, #20
 80014ec:	4618      	mov	r0, r3
 80014ee:	f002 fe2d 	bl	800414c <_ZN5stm327PinListD1Ev>
 80014f2:	e7ff      	b.n	80014f4 <main+0x1a0>
  stm32::Pin LEDs[8] = {PA8, PA9, PA10, PA11, PA12, PA13, PA14, PA15};
 80014f4:	f107 0420 	add.w	r4, r7, #32
 80014f8:	3460      	adds	r4, #96	; 0x60
 80014fa:	f107 0320 	add.w	r3, r7, #32
 80014fe:	429c      	cmp	r4, r3
 8001500:	d005      	beq.n	800150e <main+0x1ba>
 8001502:	3c0c      	subs	r4, #12
 8001504:	6823      	ldr	r3, [r4, #0]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	4620      	mov	r0, r4
 800150a:	4798      	blx	r3
 800150c:	e7f5      	b.n	80014fa <main+0x1a6>
  stm32::Pin PA15(GPIOE, GPIO_PIN_15);
 800150e:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001512:	4618      	mov	r0, r3
 8001514:	f002 fd4e 	bl	8003fb4 <_ZN5stm323PinD1Ev>
 8001518:	e7ff      	b.n	800151a <main+0x1c6>
  stm32::Pin PA14(GPIOE, GPIO_PIN_14);
 800151a:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800151e:	4618      	mov	r0, r3
 8001520:	f002 fd48 	bl	8003fb4 <_ZN5stm323PinD1Ev>
 8001524:	e7ff      	b.n	8001526 <main+0x1d2>
  stm32::Pin PA13(GPIOE, GPIO_PIN_13);
 8001526:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800152a:	4618      	mov	r0, r3
 800152c:	f002 fd42 	bl	8003fb4 <_ZN5stm323PinD1Ev>
 8001530:	e7ff      	b.n	8001532 <main+0x1de>
  stm32::Pin PA12(GPIOE, GPIO_PIN_12);
 8001532:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001536:	4618      	mov	r0, r3
 8001538:	f002 fd3c 	bl	8003fb4 <_ZN5stm323PinD1Ev>
 800153c:	e7ff      	b.n	800153e <main+0x1ea>
  stm32::Pin PA11(GPIOE, GPIO_PIN_11);
 800153e:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8001542:	4618      	mov	r0, r3
 8001544:	f002 fd36 	bl	8003fb4 <_ZN5stm323PinD1Ev>
 8001548:	e7ff      	b.n	800154a <main+0x1f6>
  stm32::Pin PA10(GPIOE, GPIO_PIN_10);
 800154a:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800154e:	4618      	mov	r0, r3
 8001550:	f002 fd30 	bl	8003fb4 <_ZN5stm323PinD1Ev>
 8001554:	e7ff      	b.n	8001556 <main+0x202>
  stm32::Pin PA9(GPIOE, GPIO_PIN_9);
 8001556:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800155a:	4618      	mov	r0, r3
 800155c:	f002 fd2a 	bl	8003fb4 <_ZN5stm323PinD1Ev>
 8001560:	e7ff      	b.n	8001562 <main+0x20e>
  stm32::Pin PA8(GPIOE, GPIO_PIN_8);
 8001562:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001566:	4618      	mov	r0, r3
 8001568:	f002 fd24 	bl	8003fb4 <_ZN5stm323PinD1Ev>
 800156c:	f002 febe 	bl	80042ec <__cxa_end_cleanup>
 8001570:	48001000 	.word	0x48001000
 8001574:	08005024 	.word	0x08005024
 8001578:	200000e8 	.word	0x200000e8
 800157c:	0800502c 	.word	0x0800502c

08001580 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b09e      	sub	sp, #120	; 0x78
 8001584:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001586:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800158a:	2228      	movs	r2, #40	; 0x28
 800158c:	2100      	movs	r1, #0
 800158e:	4618      	mov	r0, r3
 8001590:	f003 fbde 	bl	8004d50 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001594:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001598:	2200      	movs	r2, #0
 800159a:	601a      	str	r2, [r3, #0]
 800159c:	605a      	str	r2, [r3, #4]
 800159e:	609a      	str	r2, [r3, #8]
 80015a0:	60da      	str	r2, [r3, #12]
 80015a2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80015a4:	463b      	mov	r3, r7
 80015a6:	223c      	movs	r2, #60	; 0x3c
 80015a8:	2100      	movs	r1, #0
 80015aa:	4618      	mov	r0, r3
 80015ac:	f003 fbd0 	bl	8004d50 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 80015b0:	2303      	movs	r3, #3
 80015b2:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80015b4:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80015b8:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80015ba:	2300      	movs	r3, #0
 80015bc:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80015be:	2301      	movs	r3, #1
 80015c0:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80015c2:	2310      	movs	r3, #16
 80015c4:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80015c6:	2302      	movs	r3, #2
 80015c8:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80015ca:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80015ce:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80015d0:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80015d4:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015d6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80015da:	4618      	mov	r0, r3
 80015dc:	f000 ff08 	bl	80023f0 <HAL_RCC_OscConfig>
 80015e0:	4603      	mov	r3, r0
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	bf14      	ite	ne
 80015e6:	2301      	movne	r3, #1
 80015e8:	2300      	moveq	r3, #0
 80015ea:	b2db      	uxtb	r3, r3
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d001      	beq.n	80015f4 <_Z18SystemClock_Configv+0x74>
  {
    Error_Handler();
 80015f0:	f000 f836 	bl	8001660 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015f4:	230f      	movs	r3, #15
 80015f6:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80015f8:	2302      	movs	r3, #2
 80015fa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015fc:	2300      	movs	r3, #0
 80015fe:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001600:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001604:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001606:	2300      	movs	r3, #0
 8001608:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800160a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800160e:	2102      	movs	r1, #2
 8001610:	4618      	mov	r0, r3
 8001612:	f001 ff2b 	bl	800346c <HAL_RCC_ClockConfig>
 8001616:	4603      	mov	r3, r0
 8001618:	2b00      	cmp	r3, #0
 800161a:	bf14      	ite	ne
 800161c:	2301      	movne	r3, #1
 800161e:	2300      	moveq	r3, #0
 8001620:	b2db      	uxtb	r3, r3
 8001622:	2b00      	cmp	r3, #0
 8001624:	d001      	beq.n	800162a <_Z18SystemClock_Configv+0xaa>
  {
    Error_Handler();
 8001626:	f000 f81b 	bl	8001660 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_I2C1;
 800162a:	4b0c      	ldr	r3, [pc, #48]	; (800165c <_Z18SystemClock_Configv+0xdc>)
 800162c:	603b      	str	r3, [r7, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 800162e:	2300      	movs	r3, #0
 8001630:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8001632:	2300      	movs	r3, #0
 8001634:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001636:	463b      	mov	r3, r7
 8001638:	4618      	mov	r0, r3
 800163a:	f002 f8fd 	bl	8003838 <HAL_RCCEx_PeriphCLKConfig>
 800163e:	4603      	mov	r3, r0
 8001640:	2b00      	cmp	r3, #0
 8001642:	bf14      	ite	ne
 8001644:	2301      	movne	r3, #1
 8001646:	2300      	moveq	r3, #0
 8001648:	b2db      	uxtb	r3, r3
 800164a:	2b00      	cmp	r3, #0
 800164c:	d001      	beq.n	8001652 <_Z18SystemClock_Configv+0xd2>
  {
    Error_Handler();
 800164e:	f000 f807 	bl	8001660 <Error_Handler>
  }
}
 8001652:	bf00      	nop
 8001654:	3778      	adds	r7, #120	; 0x78
 8001656:	46bd      	mov	sp, r7
 8001658:	bd80      	pop	{r7, pc}
 800165a:	bf00      	nop
 800165c:	00020020 	.word	0x00020020

08001660 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001660:	b480      	push	{r7}
 8001662:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001664:	b672      	cpsid	i
}
 8001666:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001668:	e7fe      	b.n	8001668 <Error_Handler+0x8>
	...

0800166c <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001670:	4b1b      	ldr	r3, [pc, #108]	; (80016e0 <MX_SPI1_Init+0x74>)
 8001672:	4a1c      	ldr	r2, [pc, #112]	; (80016e4 <MX_SPI1_Init+0x78>)
 8001674:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001676:	4b1a      	ldr	r3, [pc, #104]	; (80016e0 <MX_SPI1_Init+0x74>)
 8001678:	f44f 7282 	mov.w	r2, #260	; 0x104
 800167c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800167e:	4b18      	ldr	r3, [pc, #96]	; (80016e0 <MX_SPI1_Init+0x74>)
 8001680:	2200      	movs	r2, #0
 8001682:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8001684:	4b16      	ldr	r3, [pc, #88]	; (80016e0 <MX_SPI1_Init+0x74>)
 8001686:	f44f 7240 	mov.w	r2, #768	; 0x300
 800168a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800168c:	4b14      	ldr	r3, [pc, #80]	; (80016e0 <MX_SPI1_Init+0x74>)
 800168e:	2200      	movs	r2, #0
 8001690:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001692:	4b13      	ldr	r3, [pc, #76]	; (80016e0 <MX_SPI1_Init+0x74>)
 8001694:	2200      	movs	r2, #0
 8001696:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001698:	4b11      	ldr	r3, [pc, #68]	; (80016e0 <MX_SPI1_Init+0x74>)
 800169a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800169e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80016a0:	4b0f      	ldr	r3, [pc, #60]	; (80016e0 <MX_SPI1_Init+0x74>)
 80016a2:	2208      	movs	r2, #8
 80016a4:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80016a6:	4b0e      	ldr	r3, [pc, #56]	; (80016e0 <MX_SPI1_Init+0x74>)
 80016a8:	2200      	movs	r2, #0
 80016aa:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80016ac:	4b0c      	ldr	r3, [pc, #48]	; (80016e0 <MX_SPI1_Init+0x74>)
 80016ae:	2200      	movs	r2, #0
 80016b0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80016b2:	4b0b      	ldr	r3, [pc, #44]	; (80016e0 <MX_SPI1_Init+0x74>)
 80016b4:	2200      	movs	r2, #0
 80016b6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80016b8:	4b09      	ldr	r3, [pc, #36]	; (80016e0 <MX_SPI1_Init+0x74>)
 80016ba:	2207      	movs	r2, #7
 80016bc:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80016be:	4b08      	ldr	r3, [pc, #32]	; (80016e0 <MX_SPI1_Init+0x74>)
 80016c0:	2200      	movs	r2, #0
 80016c2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80016c4:	4b06      	ldr	r3, [pc, #24]	; (80016e0 <MX_SPI1_Init+0x74>)
 80016c6:	2208      	movs	r2, #8
 80016c8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80016ca:	4805      	ldr	r0, [pc, #20]	; (80016e0 <MX_SPI1_Init+0x74>)
 80016cc:	f002 fa64 	bl	8003b98 <HAL_SPI_Init>
 80016d0:	4603      	mov	r3, r0
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d001      	beq.n	80016da <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80016d6:	f7ff ffc3 	bl	8001660 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80016da:	bf00      	nop
 80016dc:	bd80      	pop	{r7, pc}
 80016de:	bf00      	nop
 80016e0:	200000ec 	.word	0x200000ec
 80016e4:	40013000 	.word	0x40013000

080016e8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b08a      	sub	sp, #40	; 0x28
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016f0:	f107 0314 	add.w	r3, r7, #20
 80016f4:	2200      	movs	r2, #0
 80016f6:	601a      	str	r2, [r3, #0]
 80016f8:	605a      	str	r2, [r3, #4]
 80016fa:	609a      	str	r2, [r3, #8]
 80016fc:	60da      	str	r2, [r3, #12]
 80016fe:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	4a17      	ldr	r2, [pc, #92]	; (8001764 <HAL_SPI_MspInit+0x7c>)
 8001706:	4293      	cmp	r3, r2
 8001708:	d128      	bne.n	800175c <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800170a:	4b17      	ldr	r3, [pc, #92]	; (8001768 <HAL_SPI_MspInit+0x80>)
 800170c:	699b      	ldr	r3, [r3, #24]
 800170e:	4a16      	ldr	r2, [pc, #88]	; (8001768 <HAL_SPI_MspInit+0x80>)
 8001710:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001714:	6193      	str	r3, [r2, #24]
 8001716:	4b14      	ldr	r3, [pc, #80]	; (8001768 <HAL_SPI_MspInit+0x80>)
 8001718:	699b      	ldr	r3, [r3, #24]
 800171a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800171e:	613b      	str	r3, [r7, #16]
 8001720:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001722:	4b11      	ldr	r3, [pc, #68]	; (8001768 <HAL_SPI_MspInit+0x80>)
 8001724:	695b      	ldr	r3, [r3, #20]
 8001726:	4a10      	ldr	r2, [pc, #64]	; (8001768 <HAL_SPI_MspInit+0x80>)
 8001728:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800172c:	6153      	str	r3, [r2, #20]
 800172e:	4b0e      	ldr	r3, [pc, #56]	; (8001768 <HAL_SPI_MspInit+0x80>)
 8001730:	695b      	ldr	r3, [r3, #20]
 8001732:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001736:	60fb      	str	r3, [r7, #12]
 8001738:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MISOA7_Pin;
 800173a:	23e0      	movs	r3, #224	; 0xe0
 800173c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800173e:	2302      	movs	r3, #2
 8001740:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001742:	2300      	movs	r3, #0
 8001744:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001746:	2303      	movs	r3, #3
 8001748:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800174a:	2305      	movs	r3, #5
 800174c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800174e:	f107 0314 	add.w	r3, r7, #20
 8001752:	4619      	mov	r1, r3
 8001754:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001758:	f000 fac0 	bl	8001cdc <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 800175c:	bf00      	nop
 800175e:	3728      	adds	r7, #40	; 0x28
 8001760:	46bd      	mov	sp, r7
 8001762:	bd80      	pop	{r7, pc}
 8001764:	40013000 	.word	0x40013000
 8001768:	40021000 	.word	0x40021000

0800176c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b082      	sub	sp, #8
 8001770:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001772:	4b0f      	ldr	r3, [pc, #60]	; (80017b0 <HAL_MspInit+0x44>)
 8001774:	699b      	ldr	r3, [r3, #24]
 8001776:	4a0e      	ldr	r2, [pc, #56]	; (80017b0 <HAL_MspInit+0x44>)
 8001778:	f043 0301 	orr.w	r3, r3, #1
 800177c:	6193      	str	r3, [r2, #24]
 800177e:	4b0c      	ldr	r3, [pc, #48]	; (80017b0 <HAL_MspInit+0x44>)
 8001780:	699b      	ldr	r3, [r3, #24]
 8001782:	f003 0301 	and.w	r3, r3, #1
 8001786:	607b      	str	r3, [r7, #4]
 8001788:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800178a:	4b09      	ldr	r3, [pc, #36]	; (80017b0 <HAL_MspInit+0x44>)
 800178c:	69db      	ldr	r3, [r3, #28]
 800178e:	4a08      	ldr	r2, [pc, #32]	; (80017b0 <HAL_MspInit+0x44>)
 8001790:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001794:	61d3      	str	r3, [r2, #28]
 8001796:	4b06      	ldr	r3, [pc, #24]	; (80017b0 <HAL_MspInit+0x44>)
 8001798:	69db      	ldr	r3, [r3, #28]
 800179a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800179e:	603b      	str	r3, [r7, #0]
 80017a0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80017a2:	2007      	movs	r0, #7
 80017a4:	f000 fa66 	bl	8001c74 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017a8:	bf00      	nop
 80017aa:	3708      	adds	r7, #8
 80017ac:	46bd      	mov	sp, r7
 80017ae:	bd80      	pop	{r7, pc}
 80017b0:	40021000 	.word	0x40021000

080017b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017b4:	b480      	push	{r7}
 80017b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80017b8:	e7fe      	b.n	80017b8 <NMI_Handler+0x4>

080017ba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017ba:	b480      	push	{r7}
 80017bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017be:	e7fe      	b.n	80017be <HardFault_Handler+0x4>

080017c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017c0:	b480      	push	{r7}
 80017c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017c4:	e7fe      	b.n	80017c4 <MemManage_Handler+0x4>

080017c6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017c6:	b480      	push	{r7}
 80017c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017ca:	e7fe      	b.n	80017ca <BusFault_Handler+0x4>

080017cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017cc:	b480      	push	{r7}
 80017ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017d0:	e7fe      	b.n	80017d0 <UsageFault_Handler+0x4>

080017d2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017d2:	b480      	push	{r7}
 80017d4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80017d6:	bf00      	nop
 80017d8:	46bd      	mov	sp, r7
 80017da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017de:	4770      	bx	lr

080017e0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017e0:	b480      	push	{r7}
 80017e2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017e4:	bf00      	nop
 80017e6:	46bd      	mov	sp, r7
 80017e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ec:	4770      	bx	lr

080017ee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017ee:	b480      	push	{r7}
 80017f0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017f2:	bf00      	nop
 80017f4:	46bd      	mov	sp, r7
 80017f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fa:	4770      	bx	lr

080017fc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001800:	f000 f942 	bl	8001a88 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001804:	bf00      	nop
 8001806:	bd80      	pop	{r7, pc}

08001808 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001808:	b480      	push	{r7}
 800180a:	af00      	add	r7, sp, #0
  return 1;
 800180c:	2301      	movs	r3, #1
}
 800180e:	4618      	mov	r0, r3
 8001810:	46bd      	mov	sp, r7
 8001812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001816:	4770      	bx	lr

08001818 <_kill>:

int _kill(int pid, int sig)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b082      	sub	sp, #8
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
 8001820:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001822:	f003 fa5b 	bl	8004cdc <__errno>
 8001826:	4603      	mov	r3, r0
 8001828:	2216      	movs	r2, #22
 800182a:	601a      	str	r2, [r3, #0]
  return -1;
 800182c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001830:	4618      	mov	r0, r3
 8001832:	3708      	adds	r7, #8
 8001834:	46bd      	mov	sp, r7
 8001836:	bd80      	pop	{r7, pc}

08001838 <_exit>:

void _exit (int status)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b082      	sub	sp, #8
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001840:	f04f 31ff 	mov.w	r1, #4294967295
 8001844:	6878      	ldr	r0, [r7, #4]
 8001846:	f7ff ffe7 	bl	8001818 <_kill>
  while (1) {}    /* Make sure we hang here */
 800184a:	e7fe      	b.n	800184a <_exit+0x12>

0800184c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b086      	sub	sp, #24
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001854:	4a14      	ldr	r2, [pc, #80]	; (80018a8 <_sbrk+0x5c>)
 8001856:	4b15      	ldr	r3, [pc, #84]	; (80018ac <_sbrk+0x60>)
 8001858:	1ad3      	subs	r3, r2, r3
 800185a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800185c:	697b      	ldr	r3, [r7, #20]
 800185e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001860:	4b13      	ldr	r3, [pc, #76]	; (80018b0 <_sbrk+0x64>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	2b00      	cmp	r3, #0
 8001866:	d102      	bne.n	800186e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001868:	4b11      	ldr	r3, [pc, #68]	; (80018b0 <_sbrk+0x64>)
 800186a:	4a12      	ldr	r2, [pc, #72]	; (80018b4 <_sbrk+0x68>)
 800186c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800186e:	4b10      	ldr	r3, [pc, #64]	; (80018b0 <_sbrk+0x64>)
 8001870:	681a      	ldr	r2, [r3, #0]
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	4413      	add	r3, r2
 8001876:	693a      	ldr	r2, [r7, #16]
 8001878:	429a      	cmp	r2, r3
 800187a:	d207      	bcs.n	800188c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800187c:	f003 fa2e 	bl	8004cdc <__errno>
 8001880:	4603      	mov	r3, r0
 8001882:	220c      	movs	r2, #12
 8001884:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001886:	f04f 33ff 	mov.w	r3, #4294967295
 800188a:	e009      	b.n	80018a0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800188c:	4b08      	ldr	r3, [pc, #32]	; (80018b0 <_sbrk+0x64>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001892:	4b07      	ldr	r3, [pc, #28]	; (80018b0 <_sbrk+0x64>)
 8001894:	681a      	ldr	r2, [r3, #0]
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	4413      	add	r3, r2
 800189a:	4a05      	ldr	r2, [pc, #20]	; (80018b0 <_sbrk+0x64>)
 800189c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800189e:	68fb      	ldr	r3, [r7, #12]
}
 80018a0:	4618      	mov	r0, r3
 80018a2:	3718      	adds	r7, #24
 80018a4:	46bd      	mov	sp, r7
 80018a6:	bd80      	pop	{r7, pc}
 80018a8:	2000a000 	.word	0x2000a000
 80018ac:	00000800 	.word	0x00000800
 80018b0:	20000150 	.word	0x20000150
 80018b4:	20000470 	.word	0x20000470

080018b8 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80018b8:	b480      	push	{r7}
 80018ba:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80018bc:	4b06      	ldr	r3, [pc, #24]	; (80018d8 <SystemInit+0x20>)
 80018be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80018c2:	4a05      	ldr	r2, [pc, #20]	; (80018d8 <SystemInit+0x20>)
 80018c4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80018c8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80018cc:	bf00      	nop
 80018ce:	46bd      	mov	sp, r7
 80018d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d4:	4770      	bx	lr
 80018d6:	bf00      	nop
 80018d8:	e000ed00 	.word	0xe000ed00

080018dc <MX_USB_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_FS;

/* USB init function */

void MX_USB_PCD_Init(void)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 80018e0:	4b0d      	ldr	r3, [pc, #52]	; (8001918 <MX_USB_PCD_Init+0x3c>)
 80018e2:	4a0e      	ldr	r2, [pc, #56]	; (800191c <MX_USB_PCD_Init+0x40>)
 80018e4:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80018e6:	4b0c      	ldr	r3, [pc, #48]	; (8001918 <MX_USB_PCD_Init+0x3c>)
 80018e8:	2208      	movs	r2, #8
 80018ea:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80018ec:	4b0a      	ldr	r3, [pc, #40]	; (8001918 <MX_USB_PCD_Init+0x3c>)
 80018ee:	2202      	movs	r2, #2
 80018f0:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80018f2:	4b09      	ldr	r3, [pc, #36]	; (8001918 <MX_USB_PCD_Init+0x3c>)
 80018f4:	2202      	movs	r2, #2
 80018f6:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80018f8:	4b07      	ldr	r3, [pc, #28]	; (8001918 <MX_USB_PCD_Init+0x3c>)
 80018fa:	2200      	movs	r2, #0
 80018fc:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80018fe:	4b06      	ldr	r3, [pc, #24]	; (8001918 <MX_USB_PCD_Init+0x3c>)
 8001900:	2200      	movs	r2, #0
 8001902:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8001904:	4804      	ldr	r0, [pc, #16]	; (8001918 <MX_USB_PCD_Init+0x3c>)
 8001906:	f000 fca1 	bl	800224c <HAL_PCD_Init>
 800190a:	4603      	mov	r3, r0
 800190c:	2b00      	cmp	r3, #0
 800190e:	d001      	beq.n	8001914 <MX_USB_PCD_Init+0x38>
  {
    Error_Handler();
 8001910:	f7ff fea6 	bl	8001660 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8001914:	bf00      	nop
 8001916:	bd80      	pop	{r7, pc}
 8001918:	20000154 	.word	0x20000154
 800191c:	40005c00 	.word	0x40005c00

08001920 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b08a      	sub	sp, #40	; 0x28
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001928:	f107 0314 	add.w	r3, r7, #20
 800192c:	2200      	movs	r2, #0
 800192e:	601a      	str	r2, [r3, #0]
 8001930:	605a      	str	r2, [r3, #4]
 8001932:	609a      	str	r2, [r3, #8]
 8001934:	60da      	str	r2, [r3, #12]
 8001936:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB)
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	4a18      	ldr	r2, [pc, #96]	; (80019a0 <HAL_PCD_MspInit+0x80>)
 800193e:	4293      	cmp	r3, r2
 8001940:	d129      	bne.n	8001996 <HAL_PCD_MspInit+0x76>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001942:	4b18      	ldr	r3, [pc, #96]	; (80019a4 <HAL_PCD_MspInit+0x84>)
 8001944:	695b      	ldr	r3, [r3, #20]
 8001946:	4a17      	ldr	r2, [pc, #92]	; (80019a4 <HAL_PCD_MspInit+0x84>)
 8001948:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800194c:	6153      	str	r3, [r2, #20]
 800194e:	4b15      	ldr	r3, [pc, #84]	; (80019a4 <HAL_PCD_MspInit+0x84>)
 8001950:	695b      	ldr	r3, [r3, #20]
 8001952:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001956:	613b      	str	r3, [r7, #16]
 8001958:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = DM_Pin|DP_Pin;
 800195a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800195e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001960:	2302      	movs	r3, #2
 8001962:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001964:	2300      	movs	r3, #0
 8001966:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001968:	2303      	movs	r3, #3
 800196a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 800196c:	230e      	movs	r3, #14
 800196e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001970:	f107 0314 	add.w	r3, r7, #20
 8001974:	4619      	mov	r1, r3
 8001976:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800197a:	f000 f9af 	bl	8001cdc <HAL_GPIO_Init>

    /* USB clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800197e:	4b09      	ldr	r3, [pc, #36]	; (80019a4 <HAL_PCD_MspInit+0x84>)
 8001980:	69db      	ldr	r3, [r3, #28]
 8001982:	4a08      	ldr	r2, [pc, #32]	; (80019a4 <HAL_PCD_MspInit+0x84>)
 8001984:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001988:	61d3      	str	r3, [r2, #28]
 800198a:	4b06      	ldr	r3, [pc, #24]	; (80019a4 <HAL_PCD_MspInit+0x84>)
 800198c:	69db      	ldr	r3, [r3, #28]
 800198e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001992:	60fb      	str	r3, [r7, #12]
 8001994:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8001996:	bf00      	nop
 8001998:	3728      	adds	r7, #40	; 0x28
 800199a:	46bd      	mov	sp, r7
 800199c:	bd80      	pop	{r7, pc}
 800199e:	bf00      	nop
 80019a0:	40005c00 	.word	0x40005c00
 80019a4:	40021000 	.word	0x40021000

080019a8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80019a8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80019e0 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80019ac:	f7ff ff84 	bl	80018b8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80019b0:	480c      	ldr	r0, [pc, #48]	; (80019e4 <LoopForever+0x6>)
  ldr r1, =_edata
 80019b2:	490d      	ldr	r1, [pc, #52]	; (80019e8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80019b4:	4a0d      	ldr	r2, [pc, #52]	; (80019ec <LoopForever+0xe>)
  movs r3, #0
 80019b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80019b8:	e002      	b.n	80019c0 <LoopCopyDataInit>

080019ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80019ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80019be:	3304      	adds	r3, #4

080019c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019c4:	d3f9      	bcc.n	80019ba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019c6:	4a0a      	ldr	r2, [pc, #40]	; (80019f0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80019c8:	4c0a      	ldr	r4, [pc, #40]	; (80019f4 <LoopForever+0x16>)
  movs r3, #0
 80019ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019cc:	e001      	b.n	80019d2 <LoopFillZerobss>

080019ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019d0:	3204      	adds	r2, #4

080019d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019d4:	d3fb      	bcc.n	80019ce <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80019d6:	f003 f987 	bl	8004ce8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80019da:	f7ff fcbb 	bl	8001354 <main>

080019de <LoopForever>:

LoopForever:
    b LoopForever
 80019de:	e7fe      	b.n	80019de <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80019e0:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 80019e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80019e8:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 80019ec:	08005464 	.word	0x08005464
  ldr r2, =_sbss
 80019f0:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 80019f4:	20000470 	.word	0x20000470

080019f8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80019f8:	e7fe      	b.n	80019f8 <ADC1_2_IRQHandler>
	...

080019fc <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a00:	4b08      	ldr	r3, [pc, #32]	; (8001a24 <HAL_Init+0x28>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	4a07      	ldr	r2, [pc, #28]	; (8001a24 <HAL_Init+0x28>)
 8001a06:	f043 0310 	orr.w	r3, r3, #16
 8001a0a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a0c:	2003      	movs	r0, #3
 8001a0e:	f000 f931 	bl	8001c74 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a12:	2000      	movs	r0, #0
 8001a14:	f000 f808 	bl	8001a28 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a18:	f7ff fea8 	bl	800176c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a1c:	2300      	movs	r3, #0
}
 8001a1e:	4618      	mov	r0, r3
 8001a20:	bd80      	pop	{r7, pc}
 8001a22:	bf00      	nop
 8001a24:	40022000 	.word	0x40022000

08001a28 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b082      	sub	sp, #8
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a30:	4b12      	ldr	r3, [pc, #72]	; (8001a7c <HAL_InitTick+0x54>)
 8001a32:	681a      	ldr	r2, [r3, #0]
 8001a34:	4b12      	ldr	r3, [pc, #72]	; (8001a80 <HAL_InitTick+0x58>)
 8001a36:	781b      	ldrb	r3, [r3, #0]
 8001a38:	4619      	mov	r1, r3
 8001a3a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a3e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a42:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a46:	4618      	mov	r0, r3
 8001a48:	f000 f93b 	bl	8001cc2 <HAL_SYSTICK_Config>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d001      	beq.n	8001a56 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001a52:	2301      	movs	r3, #1
 8001a54:	e00e      	b.n	8001a74 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	2b0f      	cmp	r3, #15
 8001a5a:	d80a      	bhi.n	8001a72 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	6879      	ldr	r1, [r7, #4]
 8001a60:	f04f 30ff 	mov.w	r0, #4294967295
 8001a64:	f000 f911 	bl	8001c8a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a68:	4a06      	ldr	r2, [pc, #24]	; (8001a84 <HAL_InitTick+0x5c>)
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	e000      	b.n	8001a74 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001a72:	2301      	movs	r3, #1
}
 8001a74:	4618      	mov	r0, r3
 8001a76:	3708      	adds	r7, #8
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	bd80      	pop	{r7, pc}
 8001a7c:	20000000 	.word	0x20000000
 8001a80:	20000008 	.word	0x20000008
 8001a84:	20000004 	.word	0x20000004

08001a88 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a8c:	4b06      	ldr	r3, [pc, #24]	; (8001aa8 <HAL_IncTick+0x20>)
 8001a8e:	781b      	ldrb	r3, [r3, #0]
 8001a90:	461a      	mov	r2, r3
 8001a92:	4b06      	ldr	r3, [pc, #24]	; (8001aac <HAL_IncTick+0x24>)
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	4413      	add	r3, r2
 8001a98:	4a04      	ldr	r2, [pc, #16]	; (8001aac <HAL_IncTick+0x24>)
 8001a9a:	6013      	str	r3, [r2, #0]
}
 8001a9c:	bf00      	nop
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa4:	4770      	bx	lr
 8001aa6:	bf00      	nop
 8001aa8:	20000008 	.word	0x20000008
 8001aac:	20000440 	.word	0x20000440

08001ab0 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	af00      	add	r7, sp, #0
  return uwTick;  
 8001ab4:	4b03      	ldr	r3, [pc, #12]	; (8001ac4 <HAL_GetTick+0x14>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
}
 8001ab8:	4618      	mov	r0, r3
 8001aba:	46bd      	mov	sp, r7
 8001abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac0:	4770      	bx	lr
 8001ac2:	bf00      	nop
 8001ac4:	20000440 	.word	0x20000440

08001ac8 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b084      	sub	sp, #16
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ad0:	f7ff ffee 	bl	8001ab0 <HAL_GetTick>
 8001ad4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ae0:	d005      	beq.n	8001aee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001ae2:	4b0a      	ldr	r3, [pc, #40]	; (8001b0c <HAL_Delay+0x44>)
 8001ae4:	781b      	ldrb	r3, [r3, #0]
 8001ae6:	461a      	mov	r2, r3
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	4413      	add	r3, r2
 8001aec:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001aee:	bf00      	nop
 8001af0:	f7ff ffde 	bl	8001ab0 <HAL_GetTick>
 8001af4:	4602      	mov	r2, r0
 8001af6:	68bb      	ldr	r3, [r7, #8]
 8001af8:	1ad3      	subs	r3, r2, r3
 8001afa:	68fa      	ldr	r2, [r7, #12]
 8001afc:	429a      	cmp	r2, r3
 8001afe:	d8f7      	bhi.n	8001af0 <HAL_Delay+0x28>
  {
  }
}
 8001b00:	bf00      	nop
 8001b02:	bf00      	nop
 8001b04:	3710      	adds	r7, #16
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bd80      	pop	{r7, pc}
 8001b0a:	bf00      	nop
 8001b0c:	20000008 	.word	0x20000008

08001b10 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b10:	b480      	push	{r7}
 8001b12:	b085      	sub	sp, #20
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	f003 0307 	and.w	r3, r3, #7
 8001b1e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b20:	4b0c      	ldr	r3, [pc, #48]	; (8001b54 <__NVIC_SetPriorityGrouping+0x44>)
 8001b22:	68db      	ldr	r3, [r3, #12]
 8001b24:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b26:	68ba      	ldr	r2, [r7, #8]
 8001b28:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b2c:	4013      	ands	r3, r2
 8001b2e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b34:	68bb      	ldr	r3, [r7, #8]
 8001b36:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b38:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001b3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b40:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b42:	4a04      	ldr	r2, [pc, #16]	; (8001b54 <__NVIC_SetPriorityGrouping+0x44>)
 8001b44:	68bb      	ldr	r3, [r7, #8]
 8001b46:	60d3      	str	r3, [r2, #12]
}
 8001b48:	bf00      	nop
 8001b4a:	3714      	adds	r7, #20
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b52:	4770      	bx	lr
 8001b54:	e000ed00 	.word	0xe000ed00

08001b58 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b5c:	4b04      	ldr	r3, [pc, #16]	; (8001b70 <__NVIC_GetPriorityGrouping+0x18>)
 8001b5e:	68db      	ldr	r3, [r3, #12]
 8001b60:	0a1b      	lsrs	r3, r3, #8
 8001b62:	f003 0307 	and.w	r3, r3, #7
}
 8001b66:	4618      	mov	r0, r3
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6e:	4770      	bx	lr
 8001b70:	e000ed00 	.word	0xe000ed00

08001b74 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b74:	b480      	push	{r7}
 8001b76:	b083      	sub	sp, #12
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	6039      	str	r1, [r7, #0]
 8001b7e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	db0a      	blt.n	8001b9e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	b2da      	uxtb	r2, r3
 8001b8c:	490c      	ldr	r1, [pc, #48]	; (8001bc0 <__NVIC_SetPriority+0x4c>)
 8001b8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b92:	0112      	lsls	r2, r2, #4
 8001b94:	b2d2      	uxtb	r2, r2
 8001b96:	440b      	add	r3, r1
 8001b98:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b9c:	e00a      	b.n	8001bb4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b9e:	683b      	ldr	r3, [r7, #0]
 8001ba0:	b2da      	uxtb	r2, r3
 8001ba2:	4908      	ldr	r1, [pc, #32]	; (8001bc4 <__NVIC_SetPriority+0x50>)
 8001ba4:	79fb      	ldrb	r3, [r7, #7]
 8001ba6:	f003 030f 	and.w	r3, r3, #15
 8001baa:	3b04      	subs	r3, #4
 8001bac:	0112      	lsls	r2, r2, #4
 8001bae:	b2d2      	uxtb	r2, r2
 8001bb0:	440b      	add	r3, r1
 8001bb2:	761a      	strb	r2, [r3, #24]
}
 8001bb4:	bf00      	nop
 8001bb6:	370c      	adds	r7, #12
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbe:	4770      	bx	lr
 8001bc0:	e000e100 	.word	0xe000e100
 8001bc4:	e000ed00 	.word	0xe000ed00

08001bc8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	b089      	sub	sp, #36	; 0x24
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	60f8      	str	r0, [r7, #12]
 8001bd0:	60b9      	str	r1, [r7, #8]
 8001bd2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	f003 0307 	and.w	r3, r3, #7
 8001bda:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001bdc:	69fb      	ldr	r3, [r7, #28]
 8001bde:	f1c3 0307 	rsb	r3, r3, #7
 8001be2:	2b04      	cmp	r3, #4
 8001be4:	bf28      	it	cs
 8001be6:	2304      	movcs	r3, #4
 8001be8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001bea:	69fb      	ldr	r3, [r7, #28]
 8001bec:	3304      	adds	r3, #4
 8001bee:	2b06      	cmp	r3, #6
 8001bf0:	d902      	bls.n	8001bf8 <NVIC_EncodePriority+0x30>
 8001bf2:	69fb      	ldr	r3, [r7, #28]
 8001bf4:	3b03      	subs	r3, #3
 8001bf6:	e000      	b.n	8001bfa <NVIC_EncodePriority+0x32>
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bfc:	f04f 32ff 	mov.w	r2, #4294967295
 8001c00:	69bb      	ldr	r3, [r7, #24]
 8001c02:	fa02 f303 	lsl.w	r3, r2, r3
 8001c06:	43da      	mvns	r2, r3
 8001c08:	68bb      	ldr	r3, [r7, #8]
 8001c0a:	401a      	ands	r2, r3
 8001c0c:	697b      	ldr	r3, [r7, #20]
 8001c0e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c10:	f04f 31ff 	mov.w	r1, #4294967295
 8001c14:	697b      	ldr	r3, [r7, #20]
 8001c16:	fa01 f303 	lsl.w	r3, r1, r3
 8001c1a:	43d9      	mvns	r1, r3
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c20:	4313      	orrs	r3, r2
         );
}
 8001c22:	4618      	mov	r0, r3
 8001c24:	3724      	adds	r7, #36	; 0x24
 8001c26:	46bd      	mov	sp, r7
 8001c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2c:	4770      	bx	lr
	...

08001c30 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b082      	sub	sp, #8
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	3b01      	subs	r3, #1
 8001c3c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c40:	d301      	bcc.n	8001c46 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c42:	2301      	movs	r3, #1
 8001c44:	e00f      	b.n	8001c66 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c46:	4a0a      	ldr	r2, [pc, #40]	; (8001c70 <SysTick_Config+0x40>)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	3b01      	subs	r3, #1
 8001c4c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c4e:	210f      	movs	r1, #15
 8001c50:	f04f 30ff 	mov.w	r0, #4294967295
 8001c54:	f7ff ff8e 	bl	8001b74 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c58:	4b05      	ldr	r3, [pc, #20]	; (8001c70 <SysTick_Config+0x40>)
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c5e:	4b04      	ldr	r3, [pc, #16]	; (8001c70 <SysTick_Config+0x40>)
 8001c60:	2207      	movs	r2, #7
 8001c62:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c64:	2300      	movs	r3, #0
}
 8001c66:	4618      	mov	r0, r3
 8001c68:	3708      	adds	r7, #8
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	bd80      	pop	{r7, pc}
 8001c6e:	bf00      	nop
 8001c70:	e000e010 	.word	0xe000e010

08001c74 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b082      	sub	sp, #8
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c7c:	6878      	ldr	r0, [r7, #4]
 8001c7e:	f7ff ff47 	bl	8001b10 <__NVIC_SetPriorityGrouping>
}
 8001c82:	bf00      	nop
 8001c84:	3708      	adds	r7, #8
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bd80      	pop	{r7, pc}

08001c8a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c8a:	b580      	push	{r7, lr}
 8001c8c:	b086      	sub	sp, #24
 8001c8e:	af00      	add	r7, sp, #0
 8001c90:	4603      	mov	r3, r0
 8001c92:	60b9      	str	r1, [r7, #8]
 8001c94:	607a      	str	r2, [r7, #4]
 8001c96:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001c98:	2300      	movs	r3, #0
 8001c9a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c9c:	f7ff ff5c 	bl	8001b58 <__NVIC_GetPriorityGrouping>
 8001ca0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ca2:	687a      	ldr	r2, [r7, #4]
 8001ca4:	68b9      	ldr	r1, [r7, #8]
 8001ca6:	6978      	ldr	r0, [r7, #20]
 8001ca8:	f7ff ff8e 	bl	8001bc8 <NVIC_EncodePriority>
 8001cac:	4602      	mov	r2, r0
 8001cae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001cb2:	4611      	mov	r1, r2
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	f7ff ff5d 	bl	8001b74 <__NVIC_SetPriority>
}
 8001cba:	bf00      	nop
 8001cbc:	3718      	adds	r7, #24
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bd80      	pop	{r7, pc}

08001cc2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001cc2:	b580      	push	{r7, lr}
 8001cc4:	b082      	sub	sp, #8
 8001cc6:	af00      	add	r7, sp, #0
 8001cc8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001cca:	6878      	ldr	r0, [r7, #4]
 8001ccc:	f7ff ffb0 	bl	8001c30 <SysTick_Config>
 8001cd0:	4603      	mov	r3, r0
}
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	3708      	adds	r7, #8
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	bd80      	pop	{r7, pc}
	...

08001cdc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	b087      	sub	sp, #28
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
 8001ce4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001cea:	e154      	b.n	8001f96 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	681a      	ldr	r2, [r3, #0]
 8001cf0:	2101      	movs	r1, #1
 8001cf2:	697b      	ldr	r3, [r7, #20]
 8001cf4:	fa01 f303 	lsl.w	r3, r1, r3
 8001cf8:	4013      	ands	r3, r2
 8001cfa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	f000 8146 	beq.w	8001f90 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	685b      	ldr	r3, [r3, #4]
 8001d08:	f003 0303 	and.w	r3, r3, #3
 8001d0c:	2b01      	cmp	r3, #1
 8001d0e:	d005      	beq.n	8001d1c <HAL_GPIO_Init+0x40>
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	685b      	ldr	r3, [r3, #4]
 8001d14:	f003 0303 	and.w	r3, r3, #3
 8001d18:	2b02      	cmp	r3, #2
 8001d1a:	d130      	bne.n	8001d7e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	689b      	ldr	r3, [r3, #8]
 8001d20:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001d22:	697b      	ldr	r3, [r7, #20]
 8001d24:	005b      	lsls	r3, r3, #1
 8001d26:	2203      	movs	r2, #3
 8001d28:	fa02 f303 	lsl.w	r3, r2, r3
 8001d2c:	43db      	mvns	r3, r3
 8001d2e:	693a      	ldr	r2, [r7, #16]
 8001d30:	4013      	ands	r3, r2
 8001d32:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	68da      	ldr	r2, [r3, #12]
 8001d38:	697b      	ldr	r3, [r7, #20]
 8001d3a:	005b      	lsls	r3, r3, #1
 8001d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d40:	693a      	ldr	r2, [r7, #16]
 8001d42:	4313      	orrs	r3, r2
 8001d44:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	693a      	ldr	r2, [r7, #16]
 8001d4a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	685b      	ldr	r3, [r3, #4]
 8001d50:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001d52:	2201      	movs	r2, #1
 8001d54:	697b      	ldr	r3, [r7, #20]
 8001d56:	fa02 f303 	lsl.w	r3, r2, r3
 8001d5a:	43db      	mvns	r3, r3
 8001d5c:	693a      	ldr	r2, [r7, #16]
 8001d5e:	4013      	ands	r3, r2
 8001d60:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d62:	683b      	ldr	r3, [r7, #0]
 8001d64:	685b      	ldr	r3, [r3, #4]
 8001d66:	091b      	lsrs	r3, r3, #4
 8001d68:	f003 0201 	and.w	r2, r3, #1
 8001d6c:	697b      	ldr	r3, [r7, #20]
 8001d6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d72:	693a      	ldr	r2, [r7, #16]
 8001d74:	4313      	orrs	r3, r2
 8001d76:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	693a      	ldr	r2, [r7, #16]
 8001d7c:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001d7e:	683b      	ldr	r3, [r7, #0]
 8001d80:	685b      	ldr	r3, [r3, #4]
 8001d82:	f003 0303 	and.w	r3, r3, #3
 8001d86:	2b03      	cmp	r3, #3
 8001d88:	d017      	beq.n	8001dba <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	68db      	ldr	r3, [r3, #12]
 8001d8e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001d90:	697b      	ldr	r3, [r7, #20]
 8001d92:	005b      	lsls	r3, r3, #1
 8001d94:	2203      	movs	r2, #3
 8001d96:	fa02 f303 	lsl.w	r3, r2, r3
 8001d9a:	43db      	mvns	r3, r3
 8001d9c:	693a      	ldr	r2, [r7, #16]
 8001d9e:	4013      	ands	r3, r2
 8001da0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001da2:	683b      	ldr	r3, [r7, #0]
 8001da4:	689a      	ldr	r2, [r3, #8]
 8001da6:	697b      	ldr	r3, [r7, #20]
 8001da8:	005b      	lsls	r3, r3, #1
 8001daa:	fa02 f303 	lsl.w	r3, r2, r3
 8001dae:	693a      	ldr	r2, [r7, #16]
 8001db0:	4313      	orrs	r3, r2
 8001db2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	693a      	ldr	r2, [r7, #16]
 8001db8:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001dba:	683b      	ldr	r3, [r7, #0]
 8001dbc:	685b      	ldr	r3, [r3, #4]
 8001dbe:	f003 0303 	and.w	r3, r3, #3
 8001dc2:	2b02      	cmp	r3, #2
 8001dc4:	d123      	bne.n	8001e0e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001dc6:	697b      	ldr	r3, [r7, #20]
 8001dc8:	08da      	lsrs	r2, r3, #3
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	3208      	adds	r2, #8
 8001dce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001dd2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001dd4:	697b      	ldr	r3, [r7, #20]
 8001dd6:	f003 0307 	and.w	r3, r3, #7
 8001dda:	009b      	lsls	r3, r3, #2
 8001ddc:	220f      	movs	r2, #15
 8001dde:	fa02 f303 	lsl.w	r3, r2, r3
 8001de2:	43db      	mvns	r3, r3
 8001de4:	693a      	ldr	r2, [r7, #16]
 8001de6:	4013      	ands	r3, r2
 8001de8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001dea:	683b      	ldr	r3, [r7, #0]
 8001dec:	691a      	ldr	r2, [r3, #16]
 8001dee:	697b      	ldr	r3, [r7, #20]
 8001df0:	f003 0307 	and.w	r3, r3, #7
 8001df4:	009b      	lsls	r3, r3, #2
 8001df6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dfa:	693a      	ldr	r2, [r7, #16]
 8001dfc:	4313      	orrs	r3, r2
 8001dfe:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001e00:	697b      	ldr	r3, [r7, #20]
 8001e02:	08da      	lsrs	r2, r3, #3
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	3208      	adds	r2, #8
 8001e08:	6939      	ldr	r1, [r7, #16]
 8001e0a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001e14:	697b      	ldr	r3, [r7, #20]
 8001e16:	005b      	lsls	r3, r3, #1
 8001e18:	2203      	movs	r2, #3
 8001e1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e1e:	43db      	mvns	r3, r3
 8001e20:	693a      	ldr	r2, [r7, #16]
 8001e22:	4013      	ands	r3, r2
 8001e24:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001e26:	683b      	ldr	r3, [r7, #0]
 8001e28:	685b      	ldr	r3, [r3, #4]
 8001e2a:	f003 0203 	and.w	r2, r3, #3
 8001e2e:	697b      	ldr	r3, [r7, #20]
 8001e30:	005b      	lsls	r3, r3, #1
 8001e32:	fa02 f303 	lsl.w	r3, r2, r3
 8001e36:	693a      	ldr	r2, [r7, #16]
 8001e38:	4313      	orrs	r3, r2
 8001e3a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	693a      	ldr	r2, [r7, #16]
 8001e40:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001e42:	683b      	ldr	r3, [r7, #0]
 8001e44:	685b      	ldr	r3, [r3, #4]
 8001e46:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	f000 80a0 	beq.w	8001f90 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e50:	4b58      	ldr	r3, [pc, #352]	; (8001fb4 <HAL_GPIO_Init+0x2d8>)
 8001e52:	699b      	ldr	r3, [r3, #24]
 8001e54:	4a57      	ldr	r2, [pc, #348]	; (8001fb4 <HAL_GPIO_Init+0x2d8>)
 8001e56:	f043 0301 	orr.w	r3, r3, #1
 8001e5a:	6193      	str	r3, [r2, #24]
 8001e5c:	4b55      	ldr	r3, [pc, #340]	; (8001fb4 <HAL_GPIO_Init+0x2d8>)
 8001e5e:	699b      	ldr	r3, [r3, #24]
 8001e60:	f003 0301 	and.w	r3, r3, #1
 8001e64:	60bb      	str	r3, [r7, #8]
 8001e66:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001e68:	4a53      	ldr	r2, [pc, #332]	; (8001fb8 <HAL_GPIO_Init+0x2dc>)
 8001e6a:	697b      	ldr	r3, [r7, #20]
 8001e6c:	089b      	lsrs	r3, r3, #2
 8001e6e:	3302      	adds	r3, #2
 8001e70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e74:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001e76:	697b      	ldr	r3, [r7, #20]
 8001e78:	f003 0303 	and.w	r3, r3, #3
 8001e7c:	009b      	lsls	r3, r3, #2
 8001e7e:	220f      	movs	r2, #15
 8001e80:	fa02 f303 	lsl.w	r3, r2, r3
 8001e84:	43db      	mvns	r3, r3
 8001e86:	693a      	ldr	r2, [r7, #16]
 8001e88:	4013      	ands	r3, r2
 8001e8a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001e92:	d019      	beq.n	8001ec8 <HAL_GPIO_Init+0x1ec>
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	4a49      	ldr	r2, [pc, #292]	; (8001fbc <HAL_GPIO_Init+0x2e0>)
 8001e98:	4293      	cmp	r3, r2
 8001e9a:	d013      	beq.n	8001ec4 <HAL_GPIO_Init+0x1e8>
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	4a48      	ldr	r2, [pc, #288]	; (8001fc0 <HAL_GPIO_Init+0x2e4>)
 8001ea0:	4293      	cmp	r3, r2
 8001ea2:	d00d      	beq.n	8001ec0 <HAL_GPIO_Init+0x1e4>
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	4a47      	ldr	r2, [pc, #284]	; (8001fc4 <HAL_GPIO_Init+0x2e8>)
 8001ea8:	4293      	cmp	r3, r2
 8001eaa:	d007      	beq.n	8001ebc <HAL_GPIO_Init+0x1e0>
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	4a46      	ldr	r2, [pc, #280]	; (8001fc8 <HAL_GPIO_Init+0x2ec>)
 8001eb0:	4293      	cmp	r3, r2
 8001eb2:	d101      	bne.n	8001eb8 <HAL_GPIO_Init+0x1dc>
 8001eb4:	2304      	movs	r3, #4
 8001eb6:	e008      	b.n	8001eca <HAL_GPIO_Init+0x1ee>
 8001eb8:	2305      	movs	r3, #5
 8001eba:	e006      	b.n	8001eca <HAL_GPIO_Init+0x1ee>
 8001ebc:	2303      	movs	r3, #3
 8001ebe:	e004      	b.n	8001eca <HAL_GPIO_Init+0x1ee>
 8001ec0:	2302      	movs	r3, #2
 8001ec2:	e002      	b.n	8001eca <HAL_GPIO_Init+0x1ee>
 8001ec4:	2301      	movs	r3, #1
 8001ec6:	e000      	b.n	8001eca <HAL_GPIO_Init+0x1ee>
 8001ec8:	2300      	movs	r3, #0
 8001eca:	697a      	ldr	r2, [r7, #20]
 8001ecc:	f002 0203 	and.w	r2, r2, #3
 8001ed0:	0092      	lsls	r2, r2, #2
 8001ed2:	4093      	lsls	r3, r2
 8001ed4:	693a      	ldr	r2, [r7, #16]
 8001ed6:	4313      	orrs	r3, r2
 8001ed8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001eda:	4937      	ldr	r1, [pc, #220]	; (8001fb8 <HAL_GPIO_Init+0x2dc>)
 8001edc:	697b      	ldr	r3, [r7, #20]
 8001ede:	089b      	lsrs	r3, r3, #2
 8001ee0:	3302      	adds	r3, #2
 8001ee2:	693a      	ldr	r2, [r7, #16]
 8001ee4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001ee8:	4b38      	ldr	r3, [pc, #224]	; (8001fcc <HAL_GPIO_Init+0x2f0>)
 8001eea:	689b      	ldr	r3, [r3, #8]
 8001eec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	43db      	mvns	r3, r3
 8001ef2:	693a      	ldr	r2, [r7, #16]
 8001ef4:	4013      	ands	r3, r2
 8001ef6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	685b      	ldr	r3, [r3, #4]
 8001efc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d003      	beq.n	8001f0c <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8001f04:	693a      	ldr	r2, [r7, #16]
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	4313      	orrs	r3, r2
 8001f0a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001f0c:	4a2f      	ldr	r2, [pc, #188]	; (8001fcc <HAL_GPIO_Init+0x2f0>)
 8001f0e:	693b      	ldr	r3, [r7, #16]
 8001f10:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001f12:	4b2e      	ldr	r3, [pc, #184]	; (8001fcc <HAL_GPIO_Init+0x2f0>)
 8001f14:	68db      	ldr	r3, [r3, #12]
 8001f16:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	43db      	mvns	r3, r3
 8001f1c:	693a      	ldr	r2, [r7, #16]
 8001f1e:	4013      	ands	r3, r2
 8001f20:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001f22:	683b      	ldr	r3, [r7, #0]
 8001f24:	685b      	ldr	r3, [r3, #4]
 8001f26:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d003      	beq.n	8001f36 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8001f2e:	693a      	ldr	r2, [r7, #16]
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	4313      	orrs	r3, r2
 8001f34:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001f36:	4a25      	ldr	r2, [pc, #148]	; (8001fcc <HAL_GPIO_Init+0x2f0>)
 8001f38:	693b      	ldr	r3, [r7, #16]
 8001f3a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001f3c:	4b23      	ldr	r3, [pc, #140]	; (8001fcc <HAL_GPIO_Init+0x2f0>)
 8001f3e:	685b      	ldr	r3, [r3, #4]
 8001f40:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	43db      	mvns	r3, r3
 8001f46:	693a      	ldr	r2, [r7, #16]
 8001f48:	4013      	ands	r3, r2
 8001f4a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	685b      	ldr	r3, [r3, #4]
 8001f50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d003      	beq.n	8001f60 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8001f58:	693a      	ldr	r2, [r7, #16]
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	4313      	orrs	r3, r2
 8001f5e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001f60:	4a1a      	ldr	r2, [pc, #104]	; (8001fcc <HAL_GPIO_Init+0x2f0>)
 8001f62:	693b      	ldr	r3, [r7, #16]
 8001f64:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001f66:	4b19      	ldr	r3, [pc, #100]	; (8001fcc <HAL_GPIO_Init+0x2f0>)
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	43db      	mvns	r3, r3
 8001f70:	693a      	ldr	r2, [r7, #16]
 8001f72:	4013      	ands	r3, r2
 8001f74:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	685b      	ldr	r3, [r3, #4]
 8001f7a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d003      	beq.n	8001f8a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001f82:	693a      	ldr	r2, [r7, #16]
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	4313      	orrs	r3, r2
 8001f88:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001f8a:	4a10      	ldr	r2, [pc, #64]	; (8001fcc <HAL_GPIO_Init+0x2f0>)
 8001f8c:	693b      	ldr	r3, [r7, #16]
 8001f8e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001f90:	697b      	ldr	r3, [r7, #20]
 8001f92:	3301      	adds	r3, #1
 8001f94:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f96:	683b      	ldr	r3, [r7, #0]
 8001f98:	681a      	ldr	r2, [r3, #0]
 8001f9a:	697b      	ldr	r3, [r7, #20]
 8001f9c:	fa22 f303 	lsr.w	r3, r2, r3
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	f47f aea3 	bne.w	8001cec <HAL_GPIO_Init+0x10>
  }
}
 8001fa6:	bf00      	nop
 8001fa8:	bf00      	nop
 8001faa:	371c      	adds	r7, #28
 8001fac:	46bd      	mov	sp, r7
 8001fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb2:	4770      	bx	lr
 8001fb4:	40021000 	.word	0x40021000
 8001fb8:	40010000 	.word	0x40010000
 8001fbc:	48000400 	.word	0x48000400
 8001fc0:	48000800 	.word	0x48000800
 8001fc4:	48000c00 	.word	0x48000c00
 8001fc8:	48001000 	.word	0x48001000
 8001fcc:	40010400 	.word	0x40010400

08001fd0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	b083      	sub	sp, #12
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
 8001fd8:	460b      	mov	r3, r1
 8001fda:	807b      	strh	r3, [r7, #2]
 8001fdc:	4613      	mov	r3, r2
 8001fde:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001fe0:	787b      	ldrb	r3, [r7, #1]
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d003      	beq.n	8001fee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001fe6:	887a      	ldrh	r2, [r7, #2]
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001fec:	e002      	b.n	8001ff4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001fee:	887a      	ldrh	r2, [r7, #2]
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001ff4:	bf00      	nop
 8001ff6:	370c      	adds	r7, #12
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffe:	4770      	bx	lr

08002000 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	b082      	sub	sp, #8
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	2b00      	cmp	r3, #0
 800200c:	d101      	bne.n	8002012 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800200e:	2301      	movs	r3, #1
 8002010:	e081      	b.n	8002116 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002018:	b2db      	uxtb	r3, r3
 800201a:	2b00      	cmp	r3, #0
 800201c:	d106      	bne.n	800202c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	2200      	movs	r2, #0
 8002022:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002026:	6878      	ldr	r0, [r7, #4]
 8002028:	f7ff f8f4 	bl	8001214 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	2224      	movs	r2, #36	; 0x24
 8002030:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	681a      	ldr	r2, [r3, #0]
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f022 0201 	bic.w	r2, r2, #1
 8002042:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	685a      	ldr	r2, [r3, #4]
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002050:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	689a      	ldr	r2, [r3, #8]
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002060:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	68db      	ldr	r3, [r3, #12]
 8002066:	2b01      	cmp	r3, #1
 8002068:	d107      	bne.n	800207a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	689a      	ldr	r2, [r3, #8]
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002076:	609a      	str	r2, [r3, #8]
 8002078:	e006      	b.n	8002088 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	689a      	ldr	r2, [r3, #8]
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002086:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	68db      	ldr	r3, [r3, #12]
 800208c:	2b02      	cmp	r3, #2
 800208e:	d104      	bne.n	800209a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002098:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	685b      	ldr	r3, [r3, #4]
 80020a0:	687a      	ldr	r2, [r7, #4]
 80020a2:	6812      	ldr	r2, [r2, #0]
 80020a4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80020a8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80020ac:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	68da      	ldr	r2, [r3, #12]
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80020bc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	691a      	ldr	r2, [r3, #16]
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	695b      	ldr	r3, [r3, #20]
 80020c6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	699b      	ldr	r3, [r3, #24]
 80020ce:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	430a      	orrs	r2, r1
 80020d6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	69d9      	ldr	r1, [r3, #28]
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	6a1a      	ldr	r2, [r3, #32]
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	430a      	orrs	r2, r1
 80020e6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	681a      	ldr	r2, [r3, #0]
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f042 0201 	orr.w	r2, r2, #1
 80020f6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	2200      	movs	r2, #0
 80020fc:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	2220      	movs	r2, #32
 8002102:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	2200      	movs	r2, #0
 800210a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	2200      	movs	r2, #0
 8002110:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002114:	2300      	movs	r3, #0
}
 8002116:	4618      	mov	r0, r3
 8002118:	3708      	adds	r7, #8
 800211a:	46bd      	mov	sp, r7
 800211c:	bd80      	pop	{r7, pc}

0800211e <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800211e:	b480      	push	{r7}
 8002120:	b083      	sub	sp, #12
 8002122:	af00      	add	r7, sp, #0
 8002124:	6078      	str	r0, [r7, #4]
 8002126:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800212e:	b2db      	uxtb	r3, r3
 8002130:	2b20      	cmp	r3, #32
 8002132:	d138      	bne.n	80021a6 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800213a:	2b01      	cmp	r3, #1
 800213c:	d101      	bne.n	8002142 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800213e:	2302      	movs	r3, #2
 8002140:	e032      	b.n	80021a8 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	2201      	movs	r2, #1
 8002146:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	2224      	movs	r2, #36	; 0x24
 800214e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	681a      	ldr	r2, [r3, #0]
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f022 0201 	bic.w	r2, r2, #1
 8002160:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	681a      	ldr	r2, [r3, #0]
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002170:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	6819      	ldr	r1, [r3, #0]
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	683a      	ldr	r2, [r7, #0]
 800217e:	430a      	orrs	r2, r1
 8002180:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	681a      	ldr	r2, [r3, #0]
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f042 0201 	orr.w	r2, r2, #1
 8002190:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	2220      	movs	r2, #32
 8002196:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	2200      	movs	r2, #0
 800219e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80021a2:	2300      	movs	r3, #0
 80021a4:	e000      	b.n	80021a8 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80021a6:	2302      	movs	r3, #2
  }
}
 80021a8:	4618      	mov	r0, r3
 80021aa:	370c      	adds	r7, #12
 80021ac:	46bd      	mov	sp, r7
 80021ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b2:	4770      	bx	lr

080021b4 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80021b4:	b480      	push	{r7}
 80021b6:	b085      	sub	sp, #20
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
 80021bc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80021c4:	b2db      	uxtb	r3, r3
 80021c6:	2b20      	cmp	r3, #32
 80021c8:	d139      	bne.n	800223e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80021d0:	2b01      	cmp	r3, #1
 80021d2:	d101      	bne.n	80021d8 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80021d4:	2302      	movs	r3, #2
 80021d6:	e033      	b.n	8002240 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	2201      	movs	r2, #1
 80021dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	2224      	movs	r2, #36	; 0x24
 80021e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	681a      	ldr	r2, [r3, #0]
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f022 0201 	bic.w	r2, r2, #1
 80021f6:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002206:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	021b      	lsls	r3, r3, #8
 800220c:	68fa      	ldr	r2, [r7, #12]
 800220e:	4313      	orrs	r3, r2
 8002210:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	68fa      	ldr	r2, [r7, #12]
 8002218:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	681a      	ldr	r2, [r3, #0]
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f042 0201 	orr.w	r2, r2, #1
 8002228:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	2220      	movs	r2, #32
 800222e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	2200      	movs	r2, #0
 8002236:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800223a:	2300      	movs	r3, #0
 800223c:	e000      	b.n	8002240 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800223e:	2302      	movs	r3, #2
  }
}
 8002240:	4618      	mov	r0, r3
 8002242:	3714      	adds	r7, #20
 8002244:	46bd      	mov	sp, r7
 8002246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224a:	4770      	bx	lr

0800224c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800224c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800224e:	b08b      	sub	sp, #44	; 0x2c
 8002250:	af06      	add	r7, sp, #24
 8002252:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	2b00      	cmp	r3, #0
 8002258:	d101      	bne.n	800225e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800225a:	2301      	movs	r3, #1
 800225c:	e0c4      	b.n	80023e8 <HAL_PCD_Init+0x19c>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8002264:	b2db      	uxtb	r3, r3
 8002266:	2b00      	cmp	r3, #0
 8002268:	d106      	bne.n	8002278 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	2200      	movs	r2, #0
 800226e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002272:	6878      	ldr	r0, [r7, #4]
 8002274:	f7ff fb54 	bl	8001920 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	2203      	movs	r2, #3
 800227c:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	4618      	mov	r0, r3
 8002286:	f001 fd32 	bl	8003cee <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800228a:	2300      	movs	r3, #0
 800228c:	73fb      	strb	r3, [r7, #15]
 800228e:	e040      	b.n	8002312 <HAL_PCD_Init+0xc6>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002290:	7bfb      	ldrb	r3, [r7, #15]
 8002292:	6879      	ldr	r1, [r7, #4]
 8002294:	1c5a      	adds	r2, r3, #1
 8002296:	4613      	mov	r3, r2
 8002298:	009b      	lsls	r3, r3, #2
 800229a:	4413      	add	r3, r2
 800229c:	00db      	lsls	r3, r3, #3
 800229e:	440b      	add	r3, r1
 80022a0:	3301      	adds	r3, #1
 80022a2:	2201      	movs	r2, #1
 80022a4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80022a6:	7bfb      	ldrb	r3, [r7, #15]
 80022a8:	6879      	ldr	r1, [r7, #4]
 80022aa:	1c5a      	adds	r2, r3, #1
 80022ac:	4613      	mov	r3, r2
 80022ae:	009b      	lsls	r3, r3, #2
 80022b0:	4413      	add	r3, r2
 80022b2:	00db      	lsls	r3, r3, #3
 80022b4:	440b      	add	r3, r1
 80022b6:	7bfa      	ldrb	r2, [r7, #15]
 80022b8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80022ba:	7bfb      	ldrb	r3, [r7, #15]
 80022bc:	6879      	ldr	r1, [r7, #4]
 80022be:	1c5a      	adds	r2, r3, #1
 80022c0:	4613      	mov	r3, r2
 80022c2:	009b      	lsls	r3, r3, #2
 80022c4:	4413      	add	r3, r2
 80022c6:	00db      	lsls	r3, r3, #3
 80022c8:	440b      	add	r3, r1
 80022ca:	3303      	adds	r3, #3
 80022cc:	2200      	movs	r2, #0
 80022ce:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80022d0:	7bfa      	ldrb	r2, [r7, #15]
 80022d2:	6879      	ldr	r1, [r7, #4]
 80022d4:	4613      	mov	r3, r2
 80022d6:	009b      	lsls	r3, r3, #2
 80022d8:	4413      	add	r3, r2
 80022da:	00db      	lsls	r3, r3, #3
 80022dc:	440b      	add	r3, r1
 80022de:	3338      	adds	r3, #56	; 0x38
 80022e0:	2200      	movs	r2, #0
 80022e2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80022e4:	7bfa      	ldrb	r2, [r7, #15]
 80022e6:	6879      	ldr	r1, [r7, #4]
 80022e8:	4613      	mov	r3, r2
 80022ea:	009b      	lsls	r3, r3, #2
 80022ec:	4413      	add	r3, r2
 80022ee:	00db      	lsls	r3, r3, #3
 80022f0:	440b      	add	r3, r1
 80022f2:	333c      	adds	r3, #60	; 0x3c
 80022f4:	2200      	movs	r2, #0
 80022f6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80022f8:	7bfa      	ldrb	r2, [r7, #15]
 80022fa:	6879      	ldr	r1, [r7, #4]
 80022fc:	4613      	mov	r3, r2
 80022fe:	009b      	lsls	r3, r3, #2
 8002300:	4413      	add	r3, r2
 8002302:	00db      	lsls	r3, r3, #3
 8002304:	440b      	add	r3, r1
 8002306:	3340      	adds	r3, #64	; 0x40
 8002308:	2200      	movs	r2, #0
 800230a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800230c:	7bfb      	ldrb	r3, [r7, #15]
 800230e:	3301      	adds	r3, #1
 8002310:	73fb      	strb	r3, [r7, #15]
 8002312:	7bfa      	ldrb	r2, [r7, #15]
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	685b      	ldr	r3, [r3, #4]
 8002318:	429a      	cmp	r2, r3
 800231a:	d3b9      	bcc.n	8002290 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800231c:	2300      	movs	r3, #0
 800231e:	73fb      	strb	r3, [r7, #15]
 8002320:	e044      	b.n	80023ac <HAL_PCD_Init+0x160>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002322:	7bfa      	ldrb	r2, [r7, #15]
 8002324:	6879      	ldr	r1, [r7, #4]
 8002326:	4613      	mov	r3, r2
 8002328:	009b      	lsls	r3, r3, #2
 800232a:	4413      	add	r3, r2
 800232c:	00db      	lsls	r3, r3, #3
 800232e:	440b      	add	r3, r1
 8002330:	f203 1369 	addw	r3, r3, #361	; 0x169
 8002334:	2200      	movs	r2, #0
 8002336:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002338:	7bfa      	ldrb	r2, [r7, #15]
 800233a:	6879      	ldr	r1, [r7, #4]
 800233c:	4613      	mov	r3, r2
 800233e:	009b      	lsls	r3, r3, #2
 8002340:	4413      	add	r3, r2
 8002342:	00db      	lsls	r3, r3, #3
 8002344:	440b      	add	r3, r1
 8002346:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800234a:	7bfa      	ldrb	r2, [r7, #15]
 800234c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800234e:	7bfa      	ldrb	r2, [r7, #15]
 8002350:	6879      	ldr	r1, [r7, #4]
 8002352:	4613      	mov	r3, r2
 8002354:	009b      	lsls	r3, r3, #2
 8002356:	4413      	add	r3, r2
 8002358:	00db      	lsls	r3, r3, #3
 800235a:	440b      	add	r3, r1
 800235c:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8002360:	2200      	movs	r2, #0
 8002362:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002364:	7bfa      	ldrb	r2, [r7, #15]
 8002366:	6879      	ldr	r1, [r7, #4]
 8002368:	4613      	mov	r3, r2
 800236a:	009b      	lsls	r3, r3, #2
 800236c:	4413      	add	r3, r2
 800236e:	00db      	lsls	r3, r3, #3
 8002370:	440b      	add	r3, r1
 8002372:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8002376:	2200      	movs	r2, #0
 8002378:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800237a:	7bfa      	ldrb	r2, [r7, #15]
 800237c:	6879      	ldr	r1, [r7, #4]
 800237e:	4613      	mov	r3, r2
 8002380:	009b      	lsls	r3, r3, #2
 8002382:	4413      	add	r3, r2
 8002384:	00db      	lsls	r3, r3, #3
 8002386:	440b      	add	r3, r1
 8002388:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800238c:	2200      	movs	r2, #0
 800238e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002390:	7bfa      	ldrb	r2, [r7, #15]
 8002392:	6879      	ldr	r1, [r7, #4]
 8002394:	4613      	mov	r3, r2
 8002396:	009b      	lsls	r3, r3, #2
 8002398:	4413      	add	r3, r2
 800239a:	00db      	lsls	r3, r3, #3
 800239c:	440b      	add	r3, r1
 800239e:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80023a2:	2200      	movs	r2, #0
 80023a4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80023a6:	7bfb      	ldrb	r3, [r7, #15]
 80023a8:	3301      	adds	r3, #1
 80023aa:	73fb      	strb	r3, [r7, #15]
 80023ac:	7bfa      	ldrb	r2, [r7, #15]
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	685b      	ldr	r3, [r3, #4]
 80023b2:	429a      	cmp	r2, r3
 80023b4:	d3b5      	bcc.n	8002322 <HAL_PCD_Init+0xd6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	603b      	str	r3, [r7, #0]
 80023bc:	687e      	ldr	r6, [r7, #4]
 80023be:	466d      	mov	r5, sp
 80023c0:	f106 0410 	add.w	r4, r6, #16
 80023c4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80023c6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80023c8:	6823      	ldr	r3, [r4, #0]
 80023ca:	602b      	str	r3, [r5, #0]
 80023cc:	1d33      	adds	r3, r6, #4
 80023ce:	cb0e      	ldmia	r3, {r1, r2, r3}
 80023d0:	6838      	ldr	r0, [r7, #0]
 80023d2:	f001 fca7 	bl	8003d24 <USB_DevInit>

  hpcd->USB_Address = 0U;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	2200      	movs	r2, #0
 80023da:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	2201      	movs	r2, #1
 80023e2:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  return HAL_OK;
 80023e6:	2300      	movs	r3, #0
}
 80023e8:	4618      	mov	r0, r3
 80023ea:	3714      	adds	r7, #20
 80023ec:	46bd      	mov	sp, r7
 80023ee:	bdf0      	pop	{r4, r5, r6, r7, pc}

080023f0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 80023f6:	af00      	add	r7, sp, #0
 80023f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023fc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002400:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002402:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002406:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	2b00      	cmp	r3, #0
 800240e:	d102      	bne.n	8002416 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8002410:	2301      	movs	r3, #1
 8002412:	f001 b823 	b.w	800345c <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002416:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800241a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f003 0301 	and.w	r3, r3, #1
 8002426:	2b00      	cmp	r3, #0
 8002428:	f000 817d 	beq.w	8002726 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800242c:	4bbc      	ldr	r3, [pc, #752]	; (8002720 <HAL_RCC_OscConfig+0x330>)
 800242e:	685b      	ldr	r3, [r3, #4]
 8002430:	f003 030c 	and.w	r3, r3, #12
 8002434:	2b04      	cmp	r3, #4
 8002436:	d00c      	beq.n	8002452 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002438:	4bb9      	ldr	r3, [pc, #740]	; (8002720 <HAL_RCC_OscConfig+0x330>)
 800243a:	685b      	ldr	r3, [r3, #4]
 800243c:	f003 030c 	and.w	r3, r3, #12
 8002440:	2b08      	cmp	r3, #8
 8002442:	d15c      	bne.n	80024fe <HAL_RCC_OscConfig+0x10e>
 8002444:	4bb6      	ldr	r3, [pc, #728]	; (8002720 <HAL_RCC_OscConfig+0x330>)
 8002446:	685b      	ldr	r3, [r3, #4]
 8002448:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800244c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002450:	d155      	bne.n	80024fe <HAL_RCC_OscConfig+0x10e>
 8002452:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002456:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800245a:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800245e:	fa93 f3a3 	rbit	r3, r3
 8002462:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002466:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800246a:	fab3 f383 	clz	r3, r3
 800246e:	b2db      	uxtb	r3, r3
 8002470:	095b      	lsrs	r3, r3, #5
 8002472:	b2db      	uxtb	r3, r3
 8002474:	f043 0301 	orr.w	r3, r3, #1
 8002478:	b2db      	uxtb	r3, r3
 800247a:	2b01      	cmp	r3, #1
 800247c:	d102      	bne.n	8002484 <HAL_RCC_OscConfig+0x94>
 800247e:	4ba8      	ldr	r3, [pc, #672]	; (8002720 <HAL_RCC_OscConfig+0x330>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	e015      	b.n	80024b0 <HAL_RCC_OscConfig+0xc0>
 8002484:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002488:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800248c:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8002490:	fa93 f3a3 	rbit	r3, r3
 8002494:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8002498:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800249c:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80024a0:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 80024a4:	fa93 f3a3 	rbit	r3, r3
 80024a8:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 80024ac:	4b9c      	ldr	r3, [pc, #624]	; (8002720 <HAL_RCC_OscConfig+0x330>)
 80024ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024b0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80024b4:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 80024b8:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80024bc:	fa92 f2a2 	rbit	r2, r2
 80024c0:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 80024c4:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 80024c8:	fab2 f282 	clz	r2, r2
 80024cc:	b2d2      	uxtb	r2, r2
 80024ce:	f042 0220 	orr.w	r2, r2, #32
 80024d2:	b2d2      	uxtb	r2, r2
 80024d4:	f002 021f 	and.w	r2, r2, #31
 80024d8:	2101      	movs	r1, #1
 80024da:	fa01 f202 	lsl.w	r2, r1, r2
 80024de:	4013      	ands	r3, r2
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	f000 811f 	beq.w	8002724 <HAL_RCC_OscConfig+0x334>
 80024e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024ea:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	685b      	ldr	r3, [r3, #4]
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	f040 8116 	bne.w	8002724 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 80024f8:	2301      	movs	r3, #1
 80024fa:	f000 bfaf 	b.w	800345c <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80024fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002502:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	685b      	ldr	r3, [r3, #4]
 800250a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800250e:	d106      	bne.n	800251e <HAL_RCC_OscConfig+0x12e>
 8002510:	4b83      	ldr	r3, [pc, #524]	; (8002720 <HAL_RCC_OscConfig+0x330>)
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	4a82      	ldr	r2, [pc, #520]	; (8002720 <HAL_RCC_OscConfig+0x330>)
 8002516:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800251a:	6013      	str	r3, [r2, #0]
 800251c:	e036      	b.n	800258c <HAL_RCC_OscConfig+0x19c>
 800251e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002522:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	685b      	ldr	r3, [r3, #4]
 800252a:	2b00      	cmp	r3, #0
 800252c:	d10c      	bne.n	8002548 <HAL_RCC_OscConfig+0x158>
 800252e:	4b7c      	ldr	r3, [pc, #496]	; (8002720 <HAL_RCC_OscConfig+0x330>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	4a7b      	ldr	r2, [pc, #492]	; (8002720 <HAL_RCC_OscConfig+0x330>)
 8002534:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002538:	6013      	str	r3, [r2, #0]
 800253a:	4b79      	ldr	r3, [pc, #484]	; (8002720 <HAL_RCC_OscConfig+0x330>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	4a78      	ldr	r2, [pc, #480]	; (8002720 <HAL_RCC_OscConfig+0x330>)
 8002540:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002544:	6013      	str	r3, [r2, #0]
 8002546:	e021      	b.n	800258c <HAL_RCC_OscConfig+0x19c>
 8002548:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800254c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	685b      	ldr	r3, [r3, #4]
 8002554:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002558:	d10c      	bne.n	8002574 <HAL_RCC_OscConfig+0x184>
 800255a:	4b71      	ldr	r3, [pc, #452]	; (8002720 <HAL_RCC_OscConfig+0x330>)
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	4a70      	ldr	r2, [pc, #448]	; (8002720 <HAL_RCC_OscConfig+0x330>)
 8002560:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002564:	6013      	str	r3, [r2, #0]
 8002566:	4b6e      	ldr	r3, [pc, #440]	; (8002720 <HAL_RCC_OscConfig+0x330>)
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	4a6d      	ldr	r2, [pc, #436]	; (8002720 <HAL_RCC_OscConfig+0x330>)
 800256c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002570:	6013      	str	r3, [r2, #0]
 8002572:	e00b      	b.n	800258c <HAL_RCC_OscConfig+0x19c>
 8002574:	4b6a      	ldr	r3, [pc, #424]	; (8002720 <HAL_RCC_OscConfig+0x330>)
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	4a69      	ldr	r2, [pc, #420]	; (8002720 <HAL_RCC_OscConfig+0x330>)
 800257a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800257e:	6013      	str	r3, [r2, #0]
 8002580:	4b67      	ldr	r3, [pc, #412]	; (8002720 <HAL_RCC_OscConfig+0x330>)
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	4a66      	ldr	r2, [pc, #408]	; (8002720 <HAL_RCC_OscConfig+0x330>)
 8002586:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800258a:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800258c:	4b64      	ldr	r3, [pc, #400]	; (8002720 <HAL_RCC_OscConfig+0x330>)
 800258e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002590:	f023 020f 	bic.w	r2, r3, #15
 8002594:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002598:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	689b      	ldr	r3, [r3, #8]
 80025a0:	495f      	ldr	r1, [pc, #380]	; (8002720 <HAL_RCC_OscConfig+0x330>)
 80025a2:	4313      	orrs	r3, r2
 80025a4:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80025a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025aa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	685b      	ldr	r3, [r3, #4]
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d059      	beq.n	800266a <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025b6:	f7ff fa7b 	bl	8001ab0 <HAL_GetTick>
 80025ba:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025be:	e00a      	b.n	80025d6 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80025c0:	f7ff fa76 	bl	8001ab0 <HAL_GetTick>
 80025c4:	4602      	mov	r2, r0
 80025c6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80025ca:	1ad3      	subs	r3, r2, r3
 80025cc:	2b64      	cmp	r3, #100	; 0x64
 80025ce:	d902      	bls.n	80025d6 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 80025d0:	2303      	movs	r3, #3
 80025d2:	f000 bf43 	b.w	800345c <HAL_RCC_OscConfig+0x106c>
 80025d6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80025da:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025de:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 80025e2:	fa93 f3a3 	rbit	r3, r3
 80025e6:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 80025ea:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025ee:	fab3 f383 	clz	r3, r3
 80025f2:	b2db      	uxtb	r3, r3
 80025f4:	095b      	lsrs	r3, r3, #5
 80025f6:	b2db      	uxtb	r3, r3
 80025f8:	f043 0301 	orr.w	r3, r3, #1
 80025fc:	b2db      	uxtb	r3, r3
 80025fe:	2b01      	cmp	r3, #1
 8002600:	d102      	bne.n	8002608 <HAL_RCC_OscConfig+0x218>
 8002602:	4b47      	ldr	r3, [pc, #284]	; (8002720 <HAL_RCC_OscConfig+0x330>)
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	e015      	b.n	8002634 <HAL_RCC_OscConfig+0x244>
 8002608:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800260c:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002610:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8002614:	fa93 f3a3 	rbit	r3, r3
 8002618:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 800261c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002620:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8002624:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8002628:	fa93 f3a3 	rbit	r3, r3
 800262c:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8002630:	4b3b      	ldr	r3, [pc, #236]	; (8002720 <HAL_RCC_OscConfig+0x330>)
 8002632:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002634:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002638:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 800263c:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8002640:	fa92 f2a2 	rbit	r2, r2
 8002644:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8002648:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 800264c:	fab2 f282 	clz	r2, r2
 8002650:	b2d2      	uxtb	r2, r2
 8002652:	f042 0220 	orr.w	r2, r2, #32
 8002656:	b2d2      	uxtb	r2, r2
 8002658:	f002 021f 	and.w	r2, r2, #31
 800265c:	2101      	movs	r1, #1
 800265e:	fa01 f202 	lsl.w	r2, r1, r2
 8002662:	4013      	ands	r3, r2
 8002664:	2b00      	cmp	r3, #0
 8002666:	d0ab      	beq.n	80025c0 <HAL_RCC_OscConfig+0x1d0>
 8002668:	e05d      	b.n	8002726 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800266a:	f7ff fa21 	bl	8001ab0 <HAL_GetTick>
 800266e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002672:	e00a      	b.n	800268a <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002674:	f7ff fa1c 	bl	8001ab0 <HAL_GetTick>
 8002678:	4602      	mov	r2, r0
 800267a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800267e:	1ad3      	subs	r3, r2, r3
 8002680:	2b64      	cmp	r3, #100	; 0x64
 8002682:	d902      	bls.n	800268a <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8002684:	2303      	movs	r3, #3
 8002686:	f000 bee9 	b.w	800345c <HAL_RCC_OscConfig+0x106c>
 800268a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800268e:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002692:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8002696:	fa93 f3a3 	rbit	r3, r3
 800269a:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 800269e:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026a2:	fab3 f383 	clz	r3, r3
 80026a6:	b2db      	uxtb	r3, r3
 80026a8:	095b      	lsrs	r3, r3, #5
 80026aa:	b2db      	uxtb	r3, r3
 80026ac:	f043 0301 	orr.w	r3, r3, #1
 80026b0:	b2db      	uxtb	r3, r3
 80026b2:	2b01      	cmp	r3, #1
 80026b4:	d102      	bne.n	80026bc <HAL_RCC_OscConfig+0x2cc>
 80026b6:	4b1a      	ldr	r3, [pc, #104]	; (8002720 <HAL_RCC_OscConfig+0x330>)
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	e015      	b.n	80026e8 <HAL_RCC_OscConfig+0x2f8>
 80026bc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80026c0:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026c4:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 80026c8:	fa93 f3a3 	rbit	r3, r3
 80026cc:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80026d0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80026d4:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80026d8:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80026dc:	fa93 f3a3 	rbit	r3, r3
 80026e0:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 80026e4:	4b0e      	ldr	r3, [pc, #56]	; (8002720 <HAL_RCC_OscConfig+0x330>)
 80026e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026e8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80026ec:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 80026f0:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80026f4:	fa92 f2a2 	rbit	r2, r2
 80026f8:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 80026fc:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8002700:	fab2 f282 	clz	r2, r2
 8002704:	b2d2      	uxtb	r2, r2
 8002706:	f042 0220 	orr.w	r2, r2, #32
 800270a:	b2d2      	uxtb	r2, r2
 800270c:	f002 021f 	and.w	r2, r2, #31
 8002710:	2101      	movs	r1, #1
 8002712:	fa01 f202 	lsl.w	r2, r1, r2
 8002716:	4013      	ands	r3, r2
 8002718:	2b00      	cmp	r3, #0
 800271a:	d1ab      	bne.n	8002674 <HAL_RCC_OscConfig+0x284>
 800271c:	e003      	b.n	8002726 <HAL_RCC_OscConfig+0x336>
 800271e:	bf00      	nop
 8002720:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002724:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002726:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800272a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f003 0302 	and.w	r3, r3, #2
 8002736:	2b00      	cmp	r3, #0
 8002738:	f000 817d 	beq.w	8002a36 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800273c:	4ba6      	ldr	r3, [pc, #664]	; (80029d8 <HAL_RCC_OscConfig+0x5e8>)
 800273e:	685b      	ldr	r3, [r3, #4]
 8002740:	f003 030c 	and.w	r3, r3, #12
 8002744:	2b00      	cmp	r3, #0
 8002746:	d00b      	beq.n	8002760 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002748:	4ba3      	ldr	r3, [pc, #652]	; (80029d8 <HAL_RCC_OscConfig+0x5e8>)
 800274a:	685b      	ldr	r3, [r3, #4]
 800274c:	f003 030c 	and.w	r3, r3, #12
 8002750:	2b08      	cmp	r3, #8
 8002752:	d172      	bne.n	800283a <HAL_RCC_OscConfig+0x44a>
 8002754:	4ba0      	ldr	r3, [pc, #640]	; (80029d8 <HAL_RCC_OscConfig+0x5e8>)
 8002756:	685b      	ldr	r3, [r3, #4]
 8002758:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800275c:	2b00      	cmp	r3, #0
 800275e:	d16c      	bne.n	800283a <HAL_RCC_OscConfig+0x44a>
 8002760:	2302      	movs	r3, #2
 8002762:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002766:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800276a:	fa93 f3a3 	rbit	r3, r3
 800276e:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8002772:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002776:	fab3 f383 	clz	r3, r3
 800277a:	b2db      	uxtb	r3, r3
 800277c:	095b      	lsrs	r3, r3, #5
 800277e:	b2db      	uxtb	r3, r3
 8002780:	f043 0301 	orr.w	r3, r3, #1
 8002784:	b2db      	uxtb	r3, r3
 8002786:	2b01      	cmp	r3, #1
 8002788:	d102      	bne.n	8002790 <HAL_RCC_OscConfig+0x3a0>
 800278a:	4b93      	ldr	r3, [pc, #588]	; (80029d8 <HAL_RCC_OscConfig+0x5e8>)
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	e013      	b.n	80027b8 <HAL_RCC_OscConfig+0x3c8>
 8002790:	2302      	movs	r3, #2
 8002792:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002796:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 800279a:	fa93 f3a3 	rbit	r3, r3
 800279e:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80027a2:	2302      	movs	r3, #2
 80027a4:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80027a8:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80027ac:	fa93 f3a3 	rbit	r3, r3
 80027b0:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 80027b4:	4b88      	ldr	r3, [pc, #544]	; (80029d8 <HAL_RCC_OscConfig+0x5e8>)
 80027b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027b8:	2202      	movs	r2, #2
 80027ba:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 80027be:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80027c2:	fa92 f2a2 	rbit	r2, r2
 80027c6:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 80027ca:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 80027ce:	fab2 f282 	clz	r2, r2
 80027d2:	b2d2      	uxtb	r2, r2
 80027d4:	f042 0220 	orr.w	r2, r2, #32
 80027d8:	b2d2      	uxtb	r2, r2
 80027da:	f002 021f 	and.w	r2, r2, #31
 80027de:	2101      	movs	r1, #1
 80027e0:	fa01 f202 	lsl.w	r2, r1, r2
 80027e4:	4013      	ands	r3, r2
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d00a      	beq.n	8002800 <HAL_RCC_OscConfig+0x410>
 80027ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027ee:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	691b      	ldr	r3, [r3, #16]
 80027f6:	2b01      	cmp	r3, #1
 80027f8:	d002      	beq.n	8002800 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 80027fa:	2301      	movs	r3, #1
 80027fc:	f000 be2e 	b.w	800345c <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002800:	4b75      	ldr	r3, [pc, #468]	; (80029d8 <HAL_RCC_OscConfig+0x5e8>)
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002808:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800280c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	695b      	ldr	r3, [r3, #20]
 8002814:	21f8      	movs	r1, #248	; 0xf8
 8002816:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800281a:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 800281e:	fa91 f1a1 	rbit	r1, r1
 8002822:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8002826:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 800282a:	fab1 f181 	clz	r1, r1
 800282e:	b2c9      	uxtb	r1, r1
 8002830:	408b      	lsls	r3, r1
 8002832:	4969      	ldr	r1, [pc, #420]	; (80029d8 <HAL_RCC_OscConfig+0x5e8>)
 8002834:	4313      	orrs	r3, r2
 8002836:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002838:	e0fd      	b.n	8002a36 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800283a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800283e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	691b      	ldr	r3, [r3, #16]
 8002846:	2b00      	cmp	r3, #0
 8002848:	f000 8088 	beq.w	800295c <HAL_RCC_OscConfig+0x56c>
 800284c:	2301      	movs	r3, #1
 800284e:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002852:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8002856:	fa93 f3a3 	rbit	r3, r3
 800285a:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 800285e:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002862:	fab3 f383 	clz	r3, r3
 8002866:	b2db      	uxtb	r3, r3
 8002868:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800286c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002870:	009b      	lsls	r3, r3, #2
 8002872:	461a      	mov	r2, r3
 8002874:	2301      	movs	r3, #1
 8002876:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002878:	f7ff f91a 	bl	8001ab0 <HAL_GetTick>
 800287c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002880:	e00a      	b.n	8002898 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002882:	f7ff f915 	bl	8001ab0 <HAL_GetTick>
 8002886:	4602      	mov	r2, r0
 8002888:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800288c:	1ad3      	subs	r3, r2, r3
 800288e:	2b02      	cmp	r3, #2
 8002890:	d902      	bls.n	8002898 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8002892:	2303      	movs	r3, #3
 8002894:	f000 bde2 	b.w	800345c <HAL_RCC_OscConfig+0x106c>
 8002898:	2302      	movs	r3, #2
 800289a:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800289e:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80028a2:	fa93 f3a3 	rbit	r3, r3
 80028a6:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 80028aa:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028ae:	fab3 f383 	clz	r3, r3
 80028b2:	b2db      	uxtb	r3, r3
 80028b4:	095b      	lsrs	r3, r3, #5
 80028b6:	b2db      	uxtb	r3, r3
 80028b8:	f043 0301 	orr.w	r3, r3, #1
 80028bc:	b2db      	uxtb	r3, r3
 80028be:	2b01      	cmp	r3, #1
 80028c0:	d102      	bne.n	80028c8 <HAL_RCC_OscConfig+0x4d8>
 80028c2:	4b45      	ldr	r3, [pc, #276]	; (80029d8 <HAL_RCC_OscConfig+0x5e8>)
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	e013      	b.n	80028f0 <HAL_RCC_OscConfig+0x500>
 80028c8:	2302      	movs	r3, #2
 80028ca:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028ce:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80028d2:	fa93 f3a3 	rbit	r3, r3
 80028d6:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80028da:	2302      	movs	r3, #2
 80028dc:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80028e0:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80028e4:	fa93 f3a3 	rbit	r3, r3
 80028e8:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 80028ec:	4b3a      	ldr	r3, [pc, #232]	; (80029d8 <HAL_RCC_OscConfig+0x5e8>)
 80028ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028f0:	2202      	movs	r2, #2
 80028f2:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 80028f6:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80028fa:	fa92 f2a2 	rbit	r2, r2
 80028fe:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8002902:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8002906:	fab2 f282 	clz	r2, r2
 800290a:	b2d2      	uxtb	r2, r2
 800290c:	f042 0220 	orr.w	r2, r2, #32
 8002910:	b2d2      	uxtb	r2, r2
 8002912:	f002 021f 	and.w	r2, r2, #31
 8002916:	2101      	movs	r1, #1
 8002918:	fa01 f202 	lsl.w	r2, r1, r2
 800291c:	4013      	ands	r3, r2
 800291e:	2b00      	cmp	r3, #0
 8002920:	d0af      	beq.n	8002882 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002922:	4b2d      	ldr	r3, [pc, #180]	; (80029d8 <HAL_RCC_OscConfig+0x5e8>)
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800292a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800292e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	695b      	ldr	r3, [r3, #20]
 8002936:	21f8      	movs	r1, #248	; 0xf8
 8002938:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800293c:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8002940:	fa91 f1a1 	rbit	r1, r1
 8002944:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8002948:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 800294c:	fab1 f181 	clz	r1, r1
 8002950:	b2c9      	uxtb	r1, r1
 8002952:	408b      	lsls	r3, r1
 8002954:	4920      	ldr	r1, [pc, #128]	; (80029d8 <HAL_RCC_OscConfig+0x5e8>)
 8002956:	4313      	orrs	r3, r2
 8002958:	600b      	str	r3, [r1, #0]
 800295a:	e06c      	b.n	8002a36 <HAL_RCC_OscConfig+0x646>
 800295c:	2301      	movs	r3, #1
 800295e:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002962:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8002966:	fa93 f3a3 	rbit	r3, r3
 800296a:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 800296e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002972:	fab3 f383 	clz	r3, r3
 8002976:	b2db      	uxtb	r3, r3
 8002978:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800297c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002980:	009b      	lsls	r3, r3, #2
 8002982:	461a      	mov	r2, r3
 8002984:	2300      	movs	r3, #0
 8002986:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002988:	f7ff f892 	bl	8001ab0 <HAL_GetTick>
 800298c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002990:	e00a      	b.n	80029a8 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002992:	f7ff f88d 	bl	8001ab0 <HAL_GetTick>
 8002996:	4602      	mov	r2, r0
 8002998:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800299c:	1ad3      	subs	r3, r2, r3
 800299e:	2b02      	cmp	r3, #2
 80029a0:	d902      	bls.n	80029a8 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 80029a2:	2303      	movs	r3, #3
 80029a4:	f000 bd5a 	b.w	800345c <HAL_RCC_OscConfig+0x106c>
 80029a8:	2302      	movs	r3, #2
 80029aa:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029ae:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80029b2:	fa93 f3a3 	rbit	r3, r3
 80029b6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 80029ba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80029be:	fab3 f383 	clz	r3, r3
 80029c2:	b2db      	uxtb	r3, r3
 80029c4:	095b      	lsrs	r3, r3, #5
 80029c6:	b2db      	uxtb	r3, r3
 80029c8:	f043 0301 	orr.w	r3, r3, #1
 80029cc:	b2db      	uxtb	r3, r3
 80029ce:	2b01      	cmp	r3, #1
 80029d0:	d104      	bne.n	80029dc <HAL_RCC_OscConfig+0x5ec>
 80029d2:	4b01      	ldr	r3, [pc, #4]	; (80029d8 <HAL_RCC_OscConfig+0x5e8>)
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	e015      	b.n	8002a04 <HAL_RCC_OscConfig+0x614>
 80029d8:	40021000 	.word	0x40021000
 80029dc:	2302      	movs	r3, #2
 80029de:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029e2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80029e6:	fa93 f3a3 	rbit	r3, r3
 80029ea:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80029ee:	2302      	movs	r3, #2
 80029f0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80029f4:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80029f8:	fa93 f3a3 	rbit	r3, r3
 80029fc:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8002a00:	4bc8      	ldr	r3, [pc, #800]	; (8002d24 <HAL_RCC_OscConfig+0x934>)
 8002a02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a04:	2202      	movs	r2, #2
 8002a06:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8002a0a:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8002a0e:	fa92 f2a2 	rbit	r2, r2
 8002a12:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8002a16:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8002a1a:	fab2 f282 	clz	r2, r2
 8002a1e:	b2d2      	uxtb	r2, r2
 8002a20:	f042 0220 	orr.w	r2, r2, #32
 8002a24:	b2d2      	uxtb	r2, r2
 8002a26:	f002 021f 	and.w	r2, r2, #31
 8002a2a:	2101      	movs	r1, #1
 8002a2c:	fa01 f202 	lsl.w	r2, r1, r2
 8002a30:	4013      	ands	r3, r2
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d1ad      	bne.n	8002992 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a36:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a3a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f003 0308 	and.w	r3, r3, #8
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	f000 8110 	beq.w	8002c6c <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002a4c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a50:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	699b      	ldr	r3, [r3, #24]
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d079      	beq.n	8002b50 <HAL_RCC_OscConfig+0x760>
 8002a5c:	2301      	movs	r3, #1
 8002a5e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a62:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8002a66:	fa93 f3a3 	rbit	r3, r3
 8002a6a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8002a6e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a72:	fab3 f383 	clz	r3, r3
 8002a76:	b2db      	uxtb	r3, r3
 8002a78:	461a      	mov	r2, r3
 8002a7a:	4bab      	ldr	r3, [pc, #684]	; (8002d28 <HAL_RCC_OscConfig+0x938>)
 8002a7c:	4413      	add	r3, r2
 8002a7e:	009b      	lsls	r3, r3, #2
 8002a80:	461a      	mov	r2, r3
 8002a82:	2301      	movs	r3, #1
 8002a84:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a86:	f7ff f813 	bl	8001ab0 <HAL_GetTick>
 8002a8a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a8e:	e00a      	b.n	8002aa6 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a90:	f7ff f80e 	bl	8001ab0 <HAL_GetTick>
 8002a94:	4602      	mov	r2, r0
 8002a96:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002a9a:	1ad3      	subs	r3, r2, r3
 8002a9c:	2b02      	cmp	r3, #2
 8002a9e:	d902      	bls.n	8002aa6 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8002aa0:	2303      	movs	r3, #3
 8002aa2:	f000 bcdb 	b.w	800345c <HAL_RCC_OscConfig+0x106c>
 8002aa6:	2302      	movs	r3, #2
 8002aa8:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002aac:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002ab0:	fa93 f3a3 	rbit	r3, r3
 8002ab4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002ab8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002abc:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002ac0:	2202      	movs	r2, #2
 8002ac2:	601a      	str	r2, [r3, #0]
 8002ac4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ac8:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	fa93 f2a3 	rbit	r2, r3
 8002ad2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ad6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002ada:	601a      	str	r2, [r3, #0]
 8002adc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ae0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002ae4:	2202      	movs	r2, #2
 8002ae6:	601a      	str	r2, [r3, #0]
 8002ae8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002aec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	fa93 f2a3 	rbit	r2, r3
 8002af6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002afa:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002afe:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b00:	4b88      	ldr	r3, [pc, #544]	; (8002d24 <HAL_RCC_OscConfig+0x934>)
 8002b02:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002b04:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b08:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002b0c:	2102      	movs	r1, #2
 8002b0e:	6019      	str	r1, [r3, #0]
 8002b10:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b14:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	fa93 f1a3 	rbit	r1, r3
 8002b1e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b22:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002b26:	6019      	str	r1, [r3, #0]
  return result;
 8002b28:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b2c:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	fab3 f383 	clz	r3, r3
 8002b36:	b2db      	uxtb	r3, r3
 8002b38:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002b3c:	b2db      	uxtb	r3, r3
 8002b3e:	f003 031f 	and.w	r3, r3, #31
 8002b42:	2101      	movs	r1, #1
 8002b44:	fa01 f303 	lsl.w	r3, r1, r3
 8002b48:	4013      	ands	r3, r2
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d0a0      	beq.n	8002a90 <HAL_RCC_OscConfig+0x6a0>
 8002b4e:	e08d      	b.n	8002c6c <HAL_RCC_OscConfig+0x87c>
 8002b50:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b54:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002b58:	2201      	movs	r2, #1
 8002b5a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b5c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b60:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	fa93 f2a3 	rbit	r2, r3
 8002b6a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b6e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002b72:	601a      	str	r2, [r3, #0]
  return result;
 8002b74:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b78:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002b7c:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b7e:	fab3 f383 	clz	r3, r3
 8002b82:	b2db      	uxtb	r3, r3
 8002b84:	461a      	mov	r2, r3
 8002b86:	4b68      	ldr	r3, [pc, #416]	; (8002d28 <HAL_RCC_OscConfig+0x938>)
 8002b88:	4413      	add	r3, r2
 8002b8a:	009b      	lsls	r3, r3, #2
 8002b8c:	461a      	mov	r2, r3
 8002b8e:	2300      	movs	r3, #0
 8002b90:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b92:	f7fe ff8d 	bl	8001ab0 <HAL_GetTick>
 8002b96:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b9a:	e00a      	b.n	8002bb2 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b9c:	f7fe ff88 	bl	8001ab0 <HAL_GetTick>
 8002ba0:	4602      	mov	r2, r0
 8002ba2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002ba6:	1ad3      	subs	r3, r2, r3
 8002ba8:	2b02      	cmp	r3, #2
 8002baa:	d902      	bls.n	8002bb2 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8002bac:	2303      	movs	r3, #3
 8002bae:	f000 bc55 	b.w	800345c <HAL_RCC_OscConfig+0x106c>
 8002bb2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bb6:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002bba:	2202      	movs	r2, #2
 8002bbc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bbe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bc2:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	fa93 f2a3 	rbit	r2, r3
 8002bcc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bd0:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8002bd4:	601a      	str	r2, [r3, #0]
 8002bd6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bda:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002bde:	2202      	movs	r2, #2
 8002be0:	601a      	str	r2, [r3, #0]
 8002be2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002be6:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	fa93 f2a3 	rbit	r2, r3
 8002bf0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bf4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002bf8:	601a      	str	r2, [r3, #0]
 8002bfa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bfe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8002c02:	2202      	movs	r2, #2
 8002c04:	601a      	str	r2, [r3, #0]
 8002c06:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c0a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	fa93 f2a3 	rbit	r2, r3
 8002c14:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c18:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002c1c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c1e:	4b41      	ldr	r3, [pc, #260]	; (8002d24 <HAL_RCC_OscConfig+0x934>)
 8002c20:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002c22:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c26:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8002c2a:	2102      	movs	r1, #2
 8002c2c:	6019      	str	r1, [r3, #0]
 8002c2e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c32:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	fa93 f1a3 	rbit	r1, r3
 8002c3c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c40:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002c44:	6019      	str	r1, [r3, #0]
  return result;
 8002c46:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c4a:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	fab3 f383 	clz	r3, r3
 8002c54:	b2db      	uxtb	r3, r3
 8002c56:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002c5a:	b2db      	uxtb	r3, r3
 8002c5c:	f003 031f 	and.w	r3, r3, #31
 8002c60:	2101      	movs	r1, #1
 8002c62:	fa01 f303 	lsl.w	r3, r1, r3
 8002c66:	4013      	ands	r3, r2
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d197      	bne.n	8002b9c <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c6c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c70:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f003 0304 	and.w	r3, r3, #4
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	f000 81a1 	beq.w	8002fc4 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c82:	2300      	movs	r3, #0
 8002c84:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c88:	4b26      	ldr	r3, [pc, #152]	; (8002d24 <HAL_RCC_OscConfig+0x934>)
 8002c8a:	69db      	ldr	r3, [r3, #28]
 8002c8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d116      	bne.n	8002cc2 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c94:	4b23      	ldr	r3, [pc, #140]	; (8002d24 <HAL_RCC_OscConfig+0x934>)
 8002c96:	69db      	ldr	r3, [r3, #28]
 8002c98:	4a22      	ldr	r2, [pc, #136]	; (8002d24 <HAL_RCC_OscConfig+0x934>)
 8002c9a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c9e:	61d3      	str	r3, [r2, #28]
 8002ca0:	4b20      	ldr	r3, [pc, #128]	; (8002d24 <HAL_RCC_OscConfig+0x934>)
 8002ca2:	69db      	ldr	r3, [r3, #28]
 8002ca4:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8002ca8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cac:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8002cb0:	601a      	str	r2, [r3, #0]
 8002cb2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cb6:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8002cba:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002cbc:	2301      	movs	r3, #1
 8002cbe:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cc2:	4b1a      	ldr	r3, [pc, #104]	; (8002d2c <HAL_RCC_OscConfig+0x93c>)
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d11a      	bne.n	8002d04 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002cce:	4b17      	ldr	r3, [pc, #92]	; (8002d2c <HAL_RCC_OscConfig+0x93c>)
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	4a16      	ldr	r2, [pc, #88]	; (8002d2c <HAL_RCC_OscConfig+0x93c>)
 8002cd4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002cd8:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002cda:	f7fe fee9 	bl	8001ab0 <HAL_GetTick>
 8002cde:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ce2:	e009      	b.n	8002cf8 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ce4:	f7fe fee4 	bl	8001ab0 <HAL_GetTick>
 8002ce8:	4602      	mov	r2, r0
 8002cea:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002cee:	1ad3      	subs	r3, r2, r3
 8002cf0:	2b64      	cmp	r3, #100	; 0x64
 8002cf2:	d901      	bls.n	8002cf8 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8002cf4:	2303      	movs	r3, #3
 8002cf6:	e3b1      	b.n	800345c <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cf8:	4b0c      	ldr	r3, [pc, #48]	; (8002d2c <HAL_RCC_OscConfig+0x93c>)
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d0ef      	beq.n	8002ce4 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d04:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d08:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	68db      	ldr	r3, [r3, #12]
 8002d10:	2b01      	cmp	r3, #1
 8002d12:	d10d      	bne.n	8002d30 <HAL_RCC_OscConfig+0x940>
 8002d14:	4b03      	ldr	r3, [pc, #12]	; (8002d24 <HAL_RCC_OscConfig+0x934>)
 8002d16:	6a1b      	ldr	r3, [r3, #32]
 8002d18:	4a02      	ldr	r2, [pc, #8]	; (8002d24 <HAL_RCC_OscConfig+0x934>)
 8002d1a:	f043 0301 	orr.w	r3, r3, #1
 8002d1e:	6213      	str	r3, [r2, #32]
 8002d20:	e03c      	b.n	8002d9c <HAL_RCC_OscConfig+0x9ac>
 8002d22:	bf00      	nop
 8002d24:	40021000 	.word	0x40021000
 8002d28:	10908120 	.word	0x10908120
 8002d2c:	40007000 	.word	0x40007000
 8002d30:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d34:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	68db      	ldr	r3, [r3, #12]
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d10c      	bne.n	8002d5a <HAL_RCC_OscConfig+0x96a>
 8002d40:	4bc1      	ldr	r3, [pc, #772]	; (8003048 <HAL_RCC_OscConfig+0xc58>)
 8002d42:	6a1b      	ldr	r3, [r3, #32]
 8002d44:	4ac0      	ldr	r2, [pc, #768]	; (8003048 <HAL_RCC_OscConfig+0xc58>)
 8002d46:	f023 0301 	bic.w	r3, r3, #1
 8002d4a:	6213      	str	r3, [r2, #32]
 8002d4c:	4bbe      	ldr	r3, [pc, #760]	; (8003048 <HAL_RCC_OscConfig+0xc58>)
 8002d4e:	6a1b      	ldr	r3, [r3, #32]
 8002d50:	4abd      	ldr	r2, [pc, #756]	; (8003048 <HAL_RCC_OscConfig+0xc58>)
 8002d52:	f023 0304 	bic.w	r3, r3, #4
 8002d56:	6213      	str	r3, [r2, #32]
 8002d58:	e020      	b.n	8002d9c <HAL_RCC_OscConfig+0x9ac>
 8002d5a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d5e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	68db      	ldr	r3, [r3, #12]
 8002d66:	2b05      	cmp	r3, #5
 8002d68:	d10c      	bne.n	8002d84 <HAL_RCC_OscConfig+0x994>
 8002d6a:	4bb7      	ldr	r3, [pc, #732]	; (8003048 <HAL_RCC_OscConfig+0xc58>)
 8002d6c:	6a1b      	ldr	r3, [r3, #32]
 8002d6e:	4ab6      	ldr	r2, [pc, #728]	; (8003048 <HAL_RCC_OscConfig+0xc58>)
 8002d70:	f043 0304 	orr.w	r3, r3, #4
 8002d74:	6213      	str	r3, [r2, #32]
 8002d76:	4bb4      	ldr	r3, [pc, #720]	; (8003048 <HAL_RCC_OscConfig+0xc58>)
 8002d78:	6a1b      	ldr	r3, [r3, #32]
 8002d7a:	4ab3      	ldr	r2, [pc, #716]	; (8003048 <HAL_RCC_OscConfig+0xc58>)
 8002d7c:	f043 0301 	orr.w	r3, r3, #1
 8002d80:	6213      	str	r3, [r2, #32]
 8002d82:	e00b      	b.n	8002d9c <HAL_RCC_OscConfig+0x9ac>
 8002d84:	4bb0      	ldr	r3, [pc, #704]	; (8003048 <HAL_RCC_OscConfig+0xc58>)
 8002d86:	6a1b      	ldr	r3, [r3, #32]
 8002d88:	4aaf      	ldr	r2, [pc, #700]	; (8003048 <HAL_RCC_OscConfig+0xc58>)
 8002d8a:	f023 0301 	bic.w	r3, r3, #1
 8002d8e:	6213      	str	r3, [r2, #32]
 8002d90:	4bad      	ldr	r3, [pc, #692]	; (8003048 <HAL_RCC_OscConfig+0xc58>)
 8002d92:	6a1b      	ldr	r3, [r3, #32]
 8002d94:	4aac      	ldr	r2, [pc, #688]	; (8003048 <HAL_RCC_OscConfig+0xc58>)
 8002d96:	f023 0304 	bic.w	r3, r3, #4
 8002d9a:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002d9c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002da0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	68db      	ldr	r3, [r3, #12]
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	f000 8081 	beq.w	8002eb0 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002dae:	f7fe fe7f 	bl	8001ab0 <HAL_GetTick>
 8002db2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002db6:	e00b      	b.n	8002dd0 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002db8:	f7fe fe7a 	bl	8001ab0 <HAL_GetTick>
 8002dbc:	4602      	mov	r2, r0
 8002dbe:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002dc2:	1ad3      	subs	r3, r2, r3
 8002dc4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002dc8:	4293      	cmp	r3, r2
 8002dca:	d901      	bls.n	8002dd0 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8002dcc:	2303      	movs	r3, #3
 8002dce:	e345      	b.n	800345c <HAL_RCC_OscConfig+0x106c>
 8002dd0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002dd4:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002dd8:	2202      	movs	r2, #2
 8002dda:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ddc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002de0:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	fa93 f2a3 	rbit	r2, r3
 8002dea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002dee:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8002df2:	601a      	str	r2, [r3, #0]
 8002df4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002df8:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002dfc:	2202      	movs	r2, #2
 8002dfe:	601a      	str	r2, [r3, #0]
 8002e00:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e04:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	fa93 f2a3 	rbit	r2, r3
 8002e0e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e12:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002e16:	601a      	str	r2, [r3, #0]
  return result;
 8002e18:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e1c:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002e20:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e22:	fab3 f383 	clz	r3, r3
 8002e26:	b2db      	uxtb	r3, r3
 8002e28:	095b      	lsrs	r3, r3, #5
 8002e2a:	b2db      	uxtb	r3, r3
 8002e2c:	f043 0302 	orr.w	r3, r3, #2
 8002e30:	b2db      	uxtb	r3, r3
 8002e32:	2b02      	cmp	r3, #2
 8002e34:	d102      	bne.n	8002e3c <HAL_RCC_OscConfig+0xa4c>
 8002e36:	4b84      	ldr	r3, [pc, #528]	; (8003048 <HAL_RCC_OscConfig+0xc58>)
 8002e38:	6a1b      	ldr	r3, [r3, #32]
 8002e3a:	e013      	b.n	8002e64 <HAL_RCC_OscConfig+0xa74>
 8002e3c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e40:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002e44:	2202      	movs	r2, #2
 8002e46:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e48:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e4c:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	fa93 f2a3 	rbit	r2, r3
 8002e56:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e5a:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8002e5e:	601a      	str	r2, [r3, #0]
 8002e60:	4b79      	ldr	r3, [pc, #484]	; (8003048 <HAL_RCC_OscConfig+0xc58>)
 8002e62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e64:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002e68:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8002e6c:	2102      	movs	r1, #2
 8002e6e:	6011      	str	r1, [r2, #0]
 8002e70:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002e74:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8002e78:	6812      	ldr	r2, [r2, #0]
 8002e7a:	fa92 f1a2 	rbit	r1, r2
 8002e7e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002e82:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8002e86:	6011      	str	r1, [r2, #0]
  return result;
 8002e88:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002e8c:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8002e90:	6812      	ldr	r2, [r2, #0]
 8002e92:	fab2 f282 	clz	r2, r2
 8002e96:	b2d2      	uxtb	r2, r2
 8002e98:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002e9c:	b2d2      	uxtb	r2, r2
 8002e9e:	f002 021f 	and.w	r2, r2, #31
 8002ea2:	2101      	movs	r1, #1
 8002ea4:	fa01 f202 	lsl.w	r2, r1, r2
 8002ea8:	4013      	ands	r3, r2
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d084      	beq.n	8002db8 <HAL_RCC_OscConfig+0x9c8>
 8002eae:	e07f      	b.n	8002fb0 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002eb0:	f7fe fdfe 	bl	8001ab0 <HAL_GetTick>
 8002eb4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002eb8:	e00b      	b.n	8002ed2 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002eba:	f7fe fdf9 	bl	8001ab0 <HAL_GetTick>
 8002ebe:	4602      	mov	r2, r0
 8002ec0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002ec4:	1ad3      	subs	r3, r2, r3
 8002ec6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002eca:	4293      	cmp	r3, r2
 8002ecc:	d901      	bls.n	8002ed2 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8002ece:	2303      	movs	r3, #3
 8002ed0:	e2c4      	b.n	800345c <HAL_RCC_OscConfig+0x106c>
 8002ed2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ed6:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8002eda:	2202      	movs	r2, #2
 8002edc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ede:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ee2:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	fa93 f2a3 	rbit	r2, r3
 8002eec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ef0:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8002ef4:	601a      	str	r2, [r3, #0]
 8002ef6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002efa:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8002efe:	2202      	movs	r2, #2
 8002f00:	601a      	str	r2, [r3, #0]
 8002f02:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f06:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	fa93 f2a3 	rbit	r2, r3
 8002f10:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f14:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002f18:	601a      	str	r2, [r3, #0]
  return result;
 8002f1a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f1e:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002f22:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f24:	fab3 f383 	clz	r3, r3
 8002f28:	b2db      	uxtb	r3, r3
 8002f2a:	095b      	lsrs	r3, r3, #5
 8002f2c:	b2db      	uxtb	r3, r3
 8002f2e:	f043 0302 	orr.w	r3, r3, #2
 8002f32:	b2db      	uxtb	r3, r3
 8002f34:	2b02      	cmp	r3, #2
 8002f36:	d102      	bne.n	8002f3e <HAL_RCC_OscConfig+0xb4e>
 8002f38:	4b43      	ldr	r3, [pc, #268]	; (8003048 <HAL_RCC_OscConfig+0xc58>)
 8002f3a:	6a1b      	ldr	r3, [r3, #32]
 8002f3c:	e013      	b.n	8002f66 <HAL_RCC_OscConfig+0xb76>
 8002f3e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f42:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8002f46:	2202      	movs	r2, #2
 8002f48:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f4a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f4e:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	fa93 f2a3 	rbit	r2, r3
 8002f58:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f5c:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8002f60:	601a      	str	r2, [r3, #0]
 8002f62:	4b39      	ldr	r3, [pc, #228]	; (8003048 <HAL_RCC_OscConfig+0xc58>)
 8002f64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f66:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002f6a:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8002f6e:	2102      	movs	r1, #2
 8002f70:	6011      	str	r1, [r2, #0]
 8002f72:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002f76:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8002f7a:	6812      	ldr	r2, [r2, #0]
 8002f7c:	fa92 f1a2 	rbit	r1, r2
 8002f80:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002f84:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002f88:	6011      	str	r1, [r2, #0]
  return result;
 8002f8a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002f8e:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002f92:	6812      	ldr	r2, [r2, #0]
 8002f94:	fab2 f282 	clz	r2, r2
 8002f98:	b2d2      	uxtb	r2, r2
 8002f9a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002f9e:	b2d2      	uxtb	r2, r2
 8002fa0:	f002 021f 	and.w	r2, r2, #31
 8002fa4:	2101      	movs	r1, #1
 8002fa6:	fa01 f202 	lsl.w	r2, r1, r2
 8002faa:	4013      	ands	r3, r2
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d184      	bne.n	8002eba <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002fb0:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8002fb4:	2b01      	cmp	r3, #1
 8002fb6:	d105      	bne.n	8002fc4 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002fb8:	4b23      	ldr	r3, [pc, #140]	; (8003048 <HAL_RCC_OscConfig+0xc58>)
 8002fba:	69db      	ldr	r3, [r3, #28]
 8002fbc:	4a22      	ldr	r2, [pc, #136]	; (8003048 <HAL_RCC_OscConfig+0xc58>)
 8002fbe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002fc2:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002fc4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fc8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	69db      	ldr	r3, [r3, #28]
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	f000 8242 	beq.w	800345a <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002fd6:	4b1c      	ldr	r3, [pc, #112]	; (8003048 <HAL_RCC_OscConfig+0xc58>)
 8002fd8:	685b      	ldr	r3, [r3, #4]
 8002fda:	f003 030c 	and.w	r3, r3, #12
 8002fde:	2b08      	cmp	r3, #8
 8002fe0:	f000 8213 	beq.w	800340a <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002fe4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fe8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	69db      	ldr	r3, [r3, #28]
 8002ff0:	2b02      	cmp	r3, #2
 8002ff2:	f040 8162 	bne.w	80032ba <HAL_RCC_OscConfig+0xeca>
 8002ff6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ffa:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8002ffe:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003002:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003004:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003008:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	fa93 f2a3 	rbit	r2, r3
 8003012:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003016:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800301a:	601a      	str	r2, [r3, #0]
  return result;
 800301c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003020:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8003024:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003026:	fab3 f383 	clz	r3, r3
 800302a:	b2db      	uxtb	r3, r3
 800302c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003030:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003034:	009b      	lsls	r3, r3, #2
 8003036:	461a      	mov	r2, r3
 8003038:	2300      	movs	r3, #0
 800303a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800303c:	f7fe fd38 	bl	8001ab0 <HAL_GetTick>
 8003040:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003044:	e00c      	b.n	8003060 <HAL_RCC_OscConfig+0xc70>
 8003046:	bf00      	nop
 8003048:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800304c:	f7fe fd30 	bl	8001ab0 <HAL_GetTick>
 8003050:	4602      	mov	r2, r0
 8003052:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003056:	1ad3      	subs	r3, r2, r3
 8003058:	2b02      	cmp	r3, #2
 800305a:	d901      	bls.n	8003060 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 800305c:	2303      	movs	r3, #3
 800305e:	e1fd      	b.n	800345c <HAL_RCC_OscConfig+0x106c>
 8003060:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003064:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8003068:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800306c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800306e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003072:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	fa93 f2a3 	rbit	r2, r3
 800307c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003080:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8003084:	601a      	str	r2, [r3, #0]
  return result;
 8003086:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800308a:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800308e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003090:	fab3 f383 	clz	r3, r3
 8003094:	b2db      	uxtb	r3, r3
 8003096:	095b      	lsrs	r3, r3, #5
 8003098:	b2db      	uxtb	r3, r3
 800309a:	f043 0301 	orr.w	r3, r3, #1
 800309e:	b2db      	uxtb	r3, r3
 80030a0:	2b01      	cmp	r3, #1
 80030a2:	d102      	bne.n	80030aa <HAL_RCC_OscConfig+0xcba>
 80030a4:	4bb0      	ldr	r3, [pc, #704]	; (8003368 <HAL_RCC_OscConfig+0xf78>)
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	e027      	b.n	80030fa <HAL_RCC_OscConfig+0xd0a>
 80030aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030ae:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80030b2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80030b6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030bc:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	fa93 f2a3 	rbit	r2, r3
 80030c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030ca:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80030ce:	601a      	str	r2, [r3, #0]
 80030d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030d4:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80030d8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80030dc:	601a      	str	r2, [r3, #0]
 80030de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030e2:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	fa93 f2a3 	rbit	r2, r3
 80030ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030f0:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80030f4:	601a      	str	r2, [r3, #0]
 80030f6:	4b9c      	ldr	r3, [pc, #624]	; (8003368 <HAL_RCC_OscConfig+0xf78>)
 80030f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030fa:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80030fe:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8003102:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003106:	6011      	str	r1, [r2, #0]
 8003108:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800310c:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8003110:	6812      	ldr	r2, [r2, #0]
 8003112:	fa92 f1a2 	rbit	r1, r2
 8003116:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800311a:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 800311e:	6011      	str	r1, [r2, #0]
  return result;
 8003120:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003124:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8003128:	6812      	ldr	r2, [r2, #0]
 800312a:	fab2 f282 	clz	r2, r2
 800312e:	b2d2      	uxtb	r2, r2
 8003130:	f042 0220 	orr.w	r2, r2, #32
 8003134:	b2d2      	uxtb	r2, r2
 8003136:	f002 021f 	and.w	r2, r2, #31
 800313a:	2101      	movs	r1, #1
 800313c:	fa01 f202 	lsl.w	r2, r1, r2
 8003140:	4013      	ands	r3, r2
 8003142:	2b00      	cmp	r3, #0
 8003144:	d182      	bne.n	800304c <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003146:	4b88      	ldr	r3, [pc, #544]	; (8003368 <HAL_RCC_OscConfig+0xf78>)
 8003148:	685b      	ldr	r3, [r3, #4]
 800314a:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800314e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003152:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800315a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800315e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	6a1b      	ldr	r3, [r3, #32]
 8003166:	430b      	orrs	r3, r1
 8003168:	497f      	ldr	r1, [pc, #508]	; (8003368 <HAL_RCC_OscConfig+0xf78>)
 800316a:	4313      	orrs	r3, r2
 800316c:	604b      	str	r3, [r1, #4]
 800316e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003172:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8003176:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800317a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800317c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003180:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	fa93 f2a3 	rbit	r2, r3
 800318a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800318e:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8003192:	601a      	str	r2, [r3, #0]
  return result;
 8003194:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003198:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800319c:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800319e:	fab3 f383 	clz	r3, r3
 80031a2:	b2db      	uxtb	r3, r3
 80031a4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80031a8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80031ac:	009b      	lsls	r3, r3, #2
 80031ae:	461a      	mov	r2, r3
 80031b0:	2301      	movs	r3, #1
 80031b2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031b4:	f7fe fc7c 	bl	8001ab0 <HAL_GetTick>
 80031b8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80031bc:	e009      	b.n	80031d2 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80031be:	f7fe fc77 	bl	8001ab0 <HAL_GetTick>
 80031c2:	4602      	mov	r2, r0
 80031c4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80031c8:	1ad3      	subs	r3, r2, r3
 80031ca:	2b02      	cmp	r3, #2
 80031cc:	d901      	bls.n	80031d2 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 80031ce:	2303      	movs	r3, #3
 80031d0:	e144      	b.n	800345c <HAL_RCC_OscConfig+0x106c>
 80031d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031d6:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80031da:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80031de:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031e4:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	fa93 f2a3 	rbit	r2, r3
 80031ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031f2:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80031f6:	601a      	str	r2, [r3, #0]
  return result;
 80031f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031fc:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8003200:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003202:	fab3 f383 	clz	r3, r3
 8003206:	b2db      	uxtb	r3, r3
 8003208:	095b      	lsrs	r3, r3, #5
 800320a:	b2db      	uxtb	r3, r3
 800320c:	f043 0301 	orr.w	r3, r3, #1
 8003210:	b2db      	uxtb	r3, r3
 8003212:	2b01      	cmp	r3, #1
 8003214:	d102      	bne.n	800321c <HAL_RCC_OscConfig+0xe2c>
 8003216:	4b54      	ldr	r3, [pc, #336]	; (8003368 <HAL_RCC_OscConfig+0xf78>)
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	e027      	b.n	800326c <HAL_RCC_OscConfig+0xe7c>
 800321c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003220:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8003224:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003228:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800322a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800322e:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	fa93 f2a3 	rbit	r2, r3
 8003238:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800323c:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8003240:	601a      	str	r2, [r3, #0]
 8003242:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003246:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 800324a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800324e:	601a      	str	r2, [r3, #0]
 8003250:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003254:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	fa93 f2a3 	rbit	r2, r3
 800325e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003262:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8003266:	601a      	str	r2, [r3, #0]
 8003268:	4b3f      	ldr	r3, [pc, #252]	; (8003368 <HAL_RCC_OscConfig+0xf78>)
 800326a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800326c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003270:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8003274:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003278:	6011      	str	r1, [r2, #0]
 800327a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800327e:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8003282:	6812      	ldr	r2, [r2, #0]
 8003284:	fa92 f1a2 	rbit	r1, r2
 8003288:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800328c:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8003290:	6011      	str	r1, [r2, #0]
  return result;
 8003292:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003296:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 800329a:	6812      	ldr	r2, [r2, #0]
 800329c:	fab2 f282 	clz	r2, r2
 80032a0:	b2d2      	uxtb	r2, r2
 80032a2:	f042 0220 	orr.w	r2, r2, #32
 80032a6:	b2d2      	uxtb	r2, r2
 80032a8:	f002 021f 	and.w	r2, r2, #31
 80032ac:	2101      	movs	r1, #1
 80032ae:	fa01 f202 	lsl.w	r2, r1, r2
 80032b2:	4013      	ands	r3, r2
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d082      	beq.n	80031be <HAL_RCC_OscConfig+0xdce>
 80032b8:	e0cf      	b.n	800345a <HAL_RCC_OscConfig+0x106a>
 80032ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032be:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80032c2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80032c6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032cc:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	fa93 f2a3 	rbit	r2, r3
 80032d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032da:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80032de:	601a      	str	r2, [r3, #0]
  return result;
 80032e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032e4:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80032e8:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032ea:	fab3 f383 	clz	r3, r3
 80032ee:	b2db      	uxtb	r3, r3
 80032f0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80032f4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80032f8:	009b      	lsls	r3, r3, #2
 80032fa:	461a      	mov	r2, r3
 80032fc:	2300      	movs	r3, #0
 80032fe:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003300:	f7fe fbd6 	bl	8001ab0 <HAL_GetTick>
 8003304:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003308:	e009      	b.n	800331e <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800330a:	f7fe fbd1 	bl	8001ab0 <HAL_GetTick>
 800330e:	4602      	mov	r2, r0
 8003310:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003314:	1ad3      	subs	r3, r2, r3
 8003316:	2b02      	cmp	r3, #2
 8003318:	d901      	bls.n	800331e <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 800331a:	2303      	movs	r3, #3
 800331c:	e09e      	b.n	800345c <HAL_RCC_OscConfig+0x106c>
 800331e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003322:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8003326:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800332a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800332c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003330:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	fa93 f2a3 	rbit	r2, r3
 800333a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800333e:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8003342:	601a      	str	r2, [r3, #0]
  return result;
 8003344:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003348:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800334c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800334e:	fab3 f383 	clz	r3, r3
 8003352:	b2db      	uxtb	r3, r3
 8003354:	095b      	lsrs	r3, r3, #5
 8003356:	b2db      	uxtb	r3, r3
 8003358:	f043 0301 	orr.w	r3, r3, #1
 800335c:	b2db      	uxtb	r3, r3
 800335e:	2b01      	cmp	r3, #1
 8003360:	d104      	bne.n	800336c <HAL_RCC_OscConfig+0xf7c>
 8003362:	4b01      	ldr	r3, [pc, #4]	; (8003368 <HAL_RCC_OscConfig+0xf78>)
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	e029      	b.n	80033bc <HAL_RCC_OscConfig+0xfcc>
 8003368:	40021000 	.word	0x40021000
 800336c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003370:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8003374:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003378:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800337a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800337e:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	fa93 f2a3 	rbit	r2, r3
 8003388:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800338c:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8003390:	601a      	str	r2, [r3, #0]
 8003392:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003396:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 800339a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800339e:	601a      	str	r2, [r3, #0]
 80033a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033a4:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	fa93 f2a3 	rbit	r2, r3
 80033ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033b2:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80033b6:	601a      	str	r2, [r3, #0]
 80033b8:	4b2b      	ldr	r3, [pc, #172]	; (8003468 <HAL_RCC_OscConfig+0x1078>)
 80033ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033bc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80033c0:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 80033c4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80033c8:	6011      	str	r1, [r2, #0]
 80033ca:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80033ce:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 80033d2:	6812      	ldr	r2, [r2, #0]
 80033d4:	fa92 f1a2 	rbit	r1, r2
 80033d8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80033dc:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80033e0:	6011      	str	r1, [r2, #0]
  return result;
 80033e2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80033e6:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80033ea:	6812      	ldr	r2, [r2, #0]
 80033ec:	fab2 f282 	clz	r2, r2
 80033f0:	b2d2      	uxtb	r2, r2
 80033f2:	f042 0220 	orr.w	r2, r2, #32
 80033f6:	b2d2      	uxtb	r2, r2
 80033f8:	f002 021f 	and.w	r2, r2, #31
 80033fc:	2101      	movs	r1, #1
 80033fe:	fa01 f202 	lsl.w	r2, r1, r2
 8003402:	4013      	ands	r3, r2
 8003404:	2b00      	cmp	r3, #0
 8003406:	d180      	bne.n	800330a <HAL_RCC_OscConfig+0xf1a>
 8003408:	e027      	b.n	800345a <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800340a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800340e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	69db      	ldr	r3, [r3, #28]
 8003416:	2b01      	cmp	r3, #1
 8003418:	d101      	bne.n	800341e <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 800341a:	2301      	movs	r3, #1
 800341c:	e01e      	b.n	800345c <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800341e:	4b12      	ldr	r3, [pc, #72]	; (8003468 <HAL_RCC_OscConfig+0x1078>)
 8003420:	685b      	ldr	r3, [r3, #4]
 8003422:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003426:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800342a:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800342e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003432:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	6a1b      	ldr	r3, [r3, #32]
 800343a:	429a      	cmp	r2, r3
 800343c:	d10b      	bne.n	8003456 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 800343e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003442:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003446:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800344a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003452:	429a      	cmp	r2, r3
 8003454:	d001      	beq.n	800345a <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8003456:	2301      	movs	r3, #1
 8003458:	e000      	b.n	800345c <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 800345a:	2300      	movs	r3, #0
}
 800345c:	4618      	mov	r0, r3
 800345e:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8003462:	46bd      	mov	sp, r7
 8003464:	bd80      	pop	{r7, pc}
 8003466:	bf00      	nop
 8003468:	40021000 	.word	0x40021000

0800346c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800346c:	b580      	push	{r7, lr}
 800346e:	b09e      	sub	sp, #120	; 0x78
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
 8003474:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003476:	2300      	movs	r3, #0
 8003478:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	2b00      	cmp	r3, #0
 800347e:	d101      	bne.n	8003484 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003480:	2301      	movs	r3, #1
 8003482:	e162      	b.n	800374a <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003484:	4b90      	ldr	r3, [pc, #576]	; (80036c8 <HAL_RCC_ClockConfig+0x25c>)
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f003 0307 	and.w	r3, r3, #7
 800348c:	683a      	ldr	r2, [r7, #0]
 800348e:	429a      	cmp	r2, r3
 8003490:	d910      	bls.n	80034b4 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003492:	4b8d      	ldr	r3, [pc, #564]	; (80036c8 <HAL_RCC_ClockConfig+0x25c>)
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f023 0207 	bic.w	r2, r3, #7
 800349a:	498b      	ldr	r1, [pc, #556]	; (80036c8 <HAL_RCC_ClockConfig+0x25c>)
 800349c:	683b      	ldr	r3, [r7, #0]
 800349e:	4313      	orrs	r3, r2
 80034a0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80034a2:	4b89      	ldr	r3, [pc, #548]	; (80036c8 <HAL_RCC_ClockConfig+0x25c>)
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f003 0307 	and.w	r3, r3, #7
 80034aa:	683a      	ldr	r2, [r7, #0]
 80034ac:	429a      	cmp	r2, r3
 80034ae:	d001      	beq.n	80034b4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80034b0:	2301      	movs	r3, #1
 80034b2:	e14a      	b.n	800374a <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f003 0302 	and.w	r3, r3, #2
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d008      	beq.n	80034d2 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80034c0:	4b82      	ldr	r3, [pc, #520]	; (80036cc <HAL_RCC_ClockConfig+0x260>)
 80034c2:	685b      	ldr	r3, [r3, #4]
 80034c4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	689b      	ldr	r3, [r3, #8]
 80034cc:	497f      	ldr	r1, [pc, #508]	; (80036cc <HAL_RCC_ClockConfig+0x260>)
 80034ce:	4313      	orrs	r3, r2
 80034d0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f003 0301 	and.w	r3, r3, #1
 80034da:	2b00      	cmp	r3, #0
 80034dc:	f000 80dc 	beq.w	8003698 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	685b      	ldr	r3, [r3, #4]
 80034e4:	2b01      	cmp	r3, #1
 80034e6:	d13c      	bne.n	8003562 <HAL_RCC_ClockConfig+0xf6>
 80034e8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80034ec:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034ee:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80034f0:	fa93 f3a3 	rbit	r3, r3
 80034f4:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80034f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034f8:	fab3 f383 	clz	r3, r3
 80034fc:	b2db      	uxtb	r3, r3
 80034fe:	095b      	lsrs	r3, r3, #5
 8003500:	b2db      	uxtb	r3, r3
 8003502:	f043 0301 	orr.w	r3, r3, #1
 8003506:	b2db      	uxtb	r3, r3
 8003508:	2b01      	cmp	r3, #1
 800350a:	d102      	bne.n	8003512 <HAL_RCC_ClockConfig+0xa6>
 800350c:	4b6f      	ldr	r3, [pc, #444]	; (80036cc <HAL_RCC_ClockConfig+0x260>)
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	e00f      	b.n	8003532 <HAL_RCC_ClockConfig+0xc6>
 8003512:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003516:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003518:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800351a:	fa93 f3a3 	rbit	r3, r3
 800351e:	667b      	str	r3, [r7, #100]	; 0x64
 8003520:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003524:	663b      	str	r3, [r7, #96]	; 0x60
 8003526:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003528:	fa93 f3a3 	rbit	r3, r3
 800352c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800352e:	4b67      	ldr	r3, [pc, #412]	; (80036cc <HAL_RCC_ClockConfig+0x260>)
 8003530:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003532:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003536:	65ba      	str	r2, [r7, #88]	; 0x58
 8003538:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800353a:	fa92 f2a2 	rbit	r2, r2
 800353e:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8003540:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003542:	fab2 f282 	clz	r2, r2
 8003546:	b2d2      	uxtb	r2, r2
 8003548:	f042 0220 	orr.w	r2, r2, #32
 800354c:	b2d2      	uxtb	r2, r2
 800354e:	f002 021f 	and.w	r2, r2, #31
 8003552:	2101      	movs	r1, #1
 8003554:	fa01 f202 	lsl.w	r2, r1, r2
 8003558:	4013      	ands	r3, r2
 800355a:	2b00      	cmp	r3, #0
 800355c:	d17b      	bne.n	8003656 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800355e:	2301      	movs	r3, #1
 8003560:	e0f3      	b.n	800374a <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	685b      	ldr	r3, [r3, #4]
 8003566:	2b02      	cmp	r3, #2
 8003568:	d13c      	bne.n	80035e4 <HAL_RCC_ClockConfig+0x178>
 800356a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800356e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003570:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003572:	fa93 f3a3 	rbit	r3, r3
 8003576:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003578:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800357a:	fab3 f383 	clz	r3, r3
 800357e:	b2db      	uxtb	r3, r3
 8003580:	095b      	lsrs	r3, r3, #5
 8003582:	b2db      	uxtb	r3, r3
 8003584:	f043 0301 	orr.w	r3, r3, #1
 8003588:	b2db      	uxtb	r3, r3
 800358a:	2b01      	cmp	r3, #1
 800358c:	d102      	bne.n	8003594 <HAL_RCC_ClockConfig+0x128>
 800358e:	4b4f      	ldr	r3, [pc, #316]	; (80036cc <HAL_RCC_ClockConfig+0x260>)
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	e00f      	b.n	80035b4 <HAL_RCC_ClockConfig+0x148>
 8003594:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003598:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800359a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800359c:	fa93 f3a3 	rbit	r3, r3
 80035a0:	647b      	str	r3, [r7, #68]	; 0x44
 80035a2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80035a6:	643b      	str	r3, [r7, #64]	; 0x40
 80035a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80035aa:	fa93 f3a3 	rbit	r3, r3
 80035ae:	63fb      	str	r3, [r7, #60]	; 0x3c
 80035b0:	4b46      	ldr	r3, [pc, #280]	; (80036cc <HAL_RCC_ClockConfig+0x260>)
 80035b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035b4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80035b8:	63ba      	str	r2, [r7, #56]	; 0x38
 80035ba:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80035bc:	fa92 f2a2 	rbit	r2, r2
 80035c0:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80035c2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80035c4:	fab2 f282 	clz	r2, r2
 80035c8:	b2d2      	uxtb	r2, r2
 80035ca:	f042 0220 	orr.w	r2, r2, #32
 80035ce:	b2d2      	uxtb	r2, r2
 80035d0:	f002 021f 	and.w	r2, r2, #31
 80035d4:	2101      	movs	r1, #1
 80035d6:	fa01 f202 	lsl.w	r2, r1, r2
 80035da:	4013      	ands	r3, r2
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d13a      	bne.n	8003656 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80035e0:	2301      	movs	r3, #1
 80035e2:	e0b2      	b.n	800374a <HAL_RCC_ClockConfig+0x2de>
 80035e4:	2302      	movs	r3, #2
 80035e6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035ea:	fa93 f3a3 	rbit	r3, r3
 80035ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80035f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035f2:	fab3 f383 	clz	r3, r3
 80035f6:	b2db      	uxtb	r3, r3
 80035f8:	095b      	lsrs	r3, r3, #5
 80035fa:	b2db      	uxtb	r3, r3
 80035fc:	f043 0301 	orr.w	r3, r3, #1
 8003600:	b2db      	uxtb	r3, r3
 8003602:	2b01      	cmp	r3, #1
 8003604:	d102      	bne.n	800360c <HAL_RCC_ClockConfig+0x1a0>
 8003606:	4b31      	ldr	r3, [pc, #196]	; (80036cc <HAL_RCC_ClockConfig+0x260>)
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	e00d      	b.n	8003628 <HAL_RCC_ClockConfig+0x1bc>
 800360c:	2302      	movs	r3, #2
 800360e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003610:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003612:	fa93 f3a3 	rbit	r3, r3
 8003616:	627b      	str	r3, [r7, #36]	; 0x24
 8003618:	2302      	movs	r3, #2
 800361a:	623b      	str	r3, [r7, #32]
 800361c:	6a3b      	ldr	r3, [r7, #32]
 800361e:	fa93 f3a3 	rbit	r3, r3
 8003622:	61fb      	str	r3, [r7, #28]
 8003624:	4b29      	ldr	r3, [pc, #164]	; (80036cc <HAL_RCC_ClockConfig+0x260>)
 8003626:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003628:	2202      	movs	r2, #2
 800362a:	61ba      	str	r2, [r7, #24]
 800362c:	69ba      	ldr	r2, [r7, #24]
 800362e:	fa92 f2a2 	rbit	r2, r2
 8003632:	617a      	str	r2, [r7, #20]
  return result;
 8003634:	697a      	ldr	r2, [r7, #20]
 8003636:	fab2 f282 	clz	r2, r2
 800363a:	b2d2      	uxtb	r2, r2
 800363c:	f042 0220 	orr.w	r2, r2, #32
 8003640:	b2d2      	uxtb	r2, r2
 8003642:	f002 021f 	and.w	r2, r2, #31
 8003646:	2101      	movs	r1, #1
 8003648:	fa01 f202 	lsl.w	r2, r1, r2
 800364c:	4013      	ands	r3, r2
 800364e:	2b00      	cmp	r3, #0
 8003650:	d101      	bne.n	8003656 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003652:	2301      	movs	r3, #1
 8003654:	e079      	b.n	800374a <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003656:	4b1d      	ldr	r3, [pc, #116]	; (80036cc <HAL_RCC_ClockConfig+0x260>)
 8003658:	685b      	ldr	r3, [r3, #4]
 800365a:	f023 0203 	bic.w	r2, r3, #3
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	685b      	ldr	r3, [r3, #4]
 8003662:	491a      	ldr	r1, [pc, #104]	; (80036cc <HAL_RCC_ClockConfig+0x260>)
 8003664:	4313      	orrs	r3, r2
 8003666:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003668:	f7fe fa22 	bl	8001ab0 <HAL_GetTick>
 800366c:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800366e:	e00a      	b.n	8003686 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003670:	f7fe fa1e 	bl	8001ab0 <HAL_GetTick>
 8003674:	4602      	mov	r2, r0
 8003676:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003678:	1ad3      	subs	r3, r2, r3
 800367a:	f241 3288 	movw	r2, #5000	; 0x1388
 800367e:	4293      	cmp	r3, r2
 8003680:	d901      	bls.n	8003686 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8003682:	2303      	movs	r3, #3
 8003684:	e061      	b.n	800374a <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003686:	4b11      	ldr	r3, [pc, #68]	; (80036cc <HAL_RCC_ClockConfig+0x260>)
 8003688:	685b      	ldr	r3, [r3, #4]
 800368a:	f003 020c 	and.w	r2, r3, #12
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	685b      	ldr	r3, [r3, #4]
 8003692:	009b      	lsls	r3, r3, #2
 8003694:	429a      	cmp	r2, r3
 8003696:	d1eb      	bne.n	8003670 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003698:	4b0b      	ldr	r3, [pc, #44]	; (80036c8 <HAL_RCC_ClockConfig+0x25c>)
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f003 0307 	and.w	r3, r3, #7
 80036a0:	683a      	ldr	r2, [r7, #0]
 80036a2:	429a      	cmp	r2, r3
 80036a4:	d214      	bcs.n	80036d0 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036a6:	4b08      	ldr	r3, [pc, #32]	; (80036c8 <HAL_RCC_ClockConfig+0x25c>)
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f023 0207 	bic.w	r2, r3, #7
 80036ae:	4906      	ldr	r1, [pc, #24]	; (80036c8 <HAL_RCC_ClockConfig+0x25c>)
 80036b0:	683b      	ldr	r3, [r7, #0]
 80036b2:	4313      	orrs	r3, r2
 80036b4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80036b6:	4b04      	ldr	r3, [pc, #16]	; (80036c8 <HAL_RCC_ClockConfig+0x25c>)
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f003 0307 	and.w	r3, r3, #7
 80036be:	683a      	ldr	r2, [r7, #0]
 80036c0:	429a      	cmp	r2, r3
 80036c2:	d005      	beq.n	80036d0 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80036c4:	2301      	movs	r3, #1
 80036c6:	e040      	b.n	800374a <HAL_RCC_ClockConfig+0x2de>
 80036c8:	40022000 	.word	0x40022000
 80036cc:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f003 0304 	and.w	r3, r3, #4
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d008      	beq.n	80036ee <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80036dc:	4b1d      	ldr	r3, [pc, #116]	; (8003754 <HAL_RCC_ClockConfig+0x2e8>)
 80036de:	685b      	ldr	r3, [r3, #4]
 80036e0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	68db      	ldr	r3, [r3, #12]
 80036e8:	491a      	ldr	r1, [pc, #104]	; (8003754 <HAL_RCC_ClockConfig+0x2e8>)
 80036ea:	4313      	orrs	r3, r2
 80036ec:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f003 0308 	and.w	r3, r3, #8
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d009      	beq.n	800370e <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80036fa:	4b16      	ldr	r3, [pc, #88]	; (8003754 <HAL_RCC_ClockConfig+0x2e8>)
 80036fc:	685b      	ldr	r3, [r3, #4]
 80036fe:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	691b      	ldr	r3, [r3, #16]
 8003706:	00db      	lsls	r3, r3, #3
 8003708:	4912      	ldr	r1, [pc, #72]	; (8003754 <HAL_RCC_ClockConfig+0x2e8>)
 800370a:	4313      	orrs	r3, r2
 800370c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800370e:	f000 f829 	bl	8003764 <HAL_RCC_GetSysClockFreq>
 8003712:	4601      	mov	r1, r0
 8003714:	4b0f      	ldr	r3, [pc, #60]	; (8003754 <HAL_RCC_ClockConfig+0x2e8>)
 8003716:	685b      	ldr	r3, [r3, #4]
 8003718:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800371c:	22f0      	movs	r2, #240	; 0xf0
 800371e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003720:	693a      	ldr	r2, [r7, #16]
 8003722:	fa92 f2a2 	rbit	r2, r2
 8003726:	60fa      	str	r2, [r7, #12]
  return result;
 8003728:	68fa      	ldr	r2, [r7, #12]
 800372a:	fab2 f282 	clz	r2, r2
 800372e:	b2d2      	uxtb	r2, r2
 8003730:	40d3      	lsrs	r3, r2
 8003732:	4a09      	ldr	r2, [pc, #36]	; (8003758 <HAL_RCC_ClockConfig+0x2ec>)
 8003734:	5cd3      	ldrb	r3, [r2, r3]
 8003736:	fa21 f303 	lsr.w	r3, r1, r3
 800373a:	4a08      	ldr	r2, [pc, #32]	; (800375c <HAL_RCC_ClockConfig+0x2f0>)
 800373c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800373e:	4b08      	ldr	r3, [pc, #32]	; (8003760 <HAL_RCC_ClockConfig+0x2f4>)
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	4618      	mov	r0, r3
 8003744:	f7fe f970 	bl	8001a28 <HAL_InitTick>
  
  return HAL_OK;
 8003748:	2300      	movs	r3, #0
}
 800374a:	4618      	mov	r0, r3
 800374c:	3778      	adds	r7, #120	; 0x78
 800374e:	46bd      	mov	sp, r7
 8003750:	bd80      	pop	{r7, pc}
 8003752:	bf00      	nop
 8003754:	40021000 	.word	0x40021000
 8003758:	08005034 	.word	0x08005034
 800375c:	20000000 	.word	0x20000000
 8003760:	20000004 	.word	0x20000004

08003764 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003764:	b480      	push	{r7}
 8003766:	b08b      	sub	sp, #44	; 0x2c
 8003768:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800376a:	2300      	movs	r3, #0
 800376c:	61fb      	str	r3, [r7, #28]
 800376e:	2300      	movs	r3, #0
 8003770:	61bb      	str	r3, [r7, #24]
 8003772:	2300      	movs	r3, #0
 8003774:	627b      	str	r3, [r7, #36]	; 0x24
 8003776:	2300      	movs	r3, #0
 8003778:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800377a:	2300      	movs	r3, #0
 800377c:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800377e:	4b29      	ldr	r3, [pc, #164]	; (8003824 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003780:	685b      	ldr	r3, [r3, #4]
 8003782:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003784:	69fb      	ldr	r3, [r7, #28]
 8003786:	f003 030c 	and.w	r3, r3, #12
 800378a:	2b04      	cmp	r3, #4
 800378c:	d002      	beq.n	8003794 <HAL_RCC_GetSysClockFreq+0x30>
 800378e:	2b08      	cmp	r3, #8
 8003790:	d003      	beq.n	800379a <HAL_RCC_GetSysClockFreq+0x36>
 8003792:	e03c      	b.n	800380e <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003794:	4b24      	ldr	r3, [pc, #144]	; (8003828 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003796:	623b      	str	r3, [r7, #32]
      break;
 8003798:	e03c      	b.n	8003814 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800379a:	69fb      	ldr	r3, [r7, #28]
 800379c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80037a0:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80037a4:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037a6:	68ba      	ldr	r2, [r7, #8]
 80037a8:	fa92 f2a2 	rbit	r2, r2
 80037ac:	607a      	str	r2, [r7, #4]
  return result;
 80037ae:	687a      	ldr	r2, [r7, #4]
 80037b0:	fab2 f282 	clz	r2, r2
 80037b4:	b2d2      	uxtb	r2, r2
 80037b6:	40d3      	lsrs	r3, r2
 80037b8:	4a1c      	ldr	r2, [pc, #112]	; (800382c <HAL_RCC_GetSysClockFreq+0xc8>)
 80037ba:	5cd3      	ldrb	r3, [r2, r3]
 80037bc:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80037be:	4b19      	ldr	r3, [pc, #100]	; (8003824 <HAL_RCC_GetSysClockFreq+0xc0>)
 80037c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037c2:	f003 030f 	and.w	r3, r3, #15
 80037c6:	220f      	movs	r2, #15
 80037c8:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037ca:	693a      	ldr	r2, [r7, #16]
 80037cc:	fa92 f2a2 	rbit	r2, r2
 80037d0:	60fa      	str	r2, [r7, #12]
  return result;
 80037d2:	68fa      	ldr	r2, [r7, #12]
 80037d4:	fab2 f282 	clz	r2, r2
 80037d8:	b2d2      	uxtb	r2, r2
 80037da:	40d3      	lsrs	r3, r2
 80037dc:	4a14      	ldr	r2, [pc, #80]	; (8003830 <HAL_RCC_GetSysClockFreq+0xcc>)
 80037de:	5cd3      	ldrb	r3, [r2, r3]
 80037e0:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80037e2:	69fb      	ldr	r3, [r7, #28]
 80037e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d008      	beq.n	80037fe <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80037ec:	4a0e      	ldr	r2, [pc, #56]	; (8003828 <HAL_RCC_GetSysClockFreq+0xc4>)
 80037ee:	69bb      	ldr	r3, [r7, #24]
 80037f0:	fbb2 f2f3 	udiv	r2, r2, r3
 80037f4:	697b      	ldr	r3, [r7, #20]
 80037f6:	fb02 f303 	mul.w	r3, r2, r3
 80037fa:	627b      	str	r3, [r7, #36]	; 0x24
 80037fc:	e004      	b.n	8003808 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80037fe:	697b      	ldr	r3, [r7, #20]
 8003800:	4a0c      	ldr	r2, [pc, #48]	; (8003834 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003802:	fb02 f303 	mul.w	r3, r2, r3
 8003806:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800380a:	623b      	str	r3, [r7, #32]
      break;
 800380c:	e002      	b.n	8003814 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800380e:	4b06      	ldr	r3, [pc, #24]	; (8003828 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003810:	623b      	str	r3, [r7, #32]
      break;
 8003812:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003814:	6a3b      	ldr	r3, [r7, #32]
}
 8003816:	4618      	mov	r0, r3
 8003818:	372c      	adds	r7, #44	; 0x2c
 800381a:	46bd      	mov	sp, r7
 800381c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003820:	4770      	bx	lr
 8003822:	bf00      	nop
 8003824:	40021000 	.word	0x40021000
 8003828:	007a1200 	.word	0x007a1200
 800382c:	08005044 	.word	0x08005044
 8003830:	08005054 	.word	0x08005054
 8003834:	003d0900 	.word	0x003d0900

08003838 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003838:	b580      	push	{r7, lr}
 800383a:	b092      	sub	sp, #72	; 0x48
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003840:	2300      	movs	r3, #0
 8003842:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8003844:	2300      	movs	r3, #0
 8003846:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8003848:	2300      	movs	r3, #0
 800384a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003856:	2b00      	cmp	r3, #0
 8003858:	f000 80d4 	beq.w	8003a04 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800385c:	4b4e      	ldr	r3, [pc, #312]	; (8003998 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800385e:	69db      	ldr	r3, [r3, #28]
 8003860:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003864:	2b00      	cmp	r3, #0
 8003866:	d10e      	bne.n	8003886 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003868:	4b4b      	ldr	r3, [pc, #300]	; (8003998 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800386a:	69db      	ldr	r3, [r3, #28]
 800386c:	4a4a      	ldr	r2, [pc, #296]	; (8003998 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800386e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003872:	61d3      	str	r3, [r2, #28]
 8003874:	4b48      	ldr	r3, [pc, #288]	; (8003998 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003876:	69db      	ldr	r3, [r3, #28]
 8003878:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800387c:	60bb      	str	r3, [r7, #8]
 800387e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003880:	2301      	movs	r3, #1
 8003882:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003886:	4b45      	ldr	r3, [pc, #276]	; (800399c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800388e:	2b00      	cmp	r3, #0
 8003890:	d118      	bne.n	80038c4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003892:	4b42      	ldr	r3, [pc, #264]	; (800399c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	4a41      	ldr	r2, [pc, #260]	; (800399c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003898:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800389c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800389e:	f7fe f907 	bl	8001ab0 <HAL_GetTick>
 80038a2:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038a4:	e008      	b.n	80038b8 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80038a6:	f7fe f903 	bl	8001ab0 <HAL_GetTick>
 80038aa:	4602      	mov	r2, r0
 80038ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80038ae:	1ad3      	subs	r3, r2, r3
 80038b0:	2b64      	cmp	r3, #100	; 0x64
 80038b2:	d901      	bls.n	80038b8 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80038b4:	2303      	movs	r3, #3
 80038b6:	e169      	b.n	8003b8c <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038b8:	4b38      	ldr	r3, [pc, #224]	; (800399c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d0f0      	beq.n	80038a6 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80038c4:	4b34      	ldr	r3, [pc, #208]	; (8003998 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038c6:	6a1b      	ldr	r3, [r3, #32]
 80038c8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80038cc:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80038ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	f000 8084 	beq.w	80039de <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	685b      	ldr	r3, [r3, #4]
 80038da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80038de:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80038e0:	429a      	cmp	r2, r3
 80038e2:	d07c      	beq.n	80039de <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80038e4:	4b2c      	ldr	r3, [pc, #176]	; (8003998 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038e6:	6a1b      	ldr	r3, [r3, #32]
 80038e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80038ec:	63fb      	str	r3, [r7, #60]	; 0x3c
 80038ee:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80038f2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038f6:	fa93 f3a3 	rbit	r3, r3
 80038fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80038fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80038fe:	fab3 f383 	clz	r3, r3
 8003902:	b2db      	uxtb	r3, r3
 8003904:	461a      	mov	r2, r3
 8003906:	4b26      	ldr	r3, [pc, #152]	; (80039a0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003908:	4413      	add	r3, r2
 800390a:	009b      	lsls	r3, r3, #2
 800390c:	461a      	mov	r2, r3
 800390e:	2301      	movs	r3, #1
 8003910:	6013      	str	r3, [r2, #0]
 8003912:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003916:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003918:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800391a:	fa93 f3a3 	rbit	r3, r3
 800391e:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003920:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003922:	fab3 f383 	clz	r3, r3
 8003926:	b2db      	uxtb	r3, r3
 8003928:	461a      	mov	r2, r3
 800392a:	4b1d      	ldr	r3, [pc, #116]	; (80039a0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800392c:	4413      	add	r3, r2
 800392e:	009b      	lsls	r3, r3, #2
 8003930:	461a      	mov	r2, r3
 8003932:	2300      	movs	r3, #0
 8003934:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003936:	4a18      	ldr	r2, [pc, #96]	; (8003998 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003938:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800393a:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800393c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800393e:	f003 0301 	and.w	r3, r3, #1
 8003942:	2b00      	cmp	r3, #0
 8003944:	d04b      	beq.n	80039de <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003946:	f7fe f8b3 	bl	8001ab0 <HAL_GetTick>
 800394a:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800394c:	e00a      	b.n	8003964 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800394e:	f7fe f8af 	bl	8001ab0 <HAL_GetTick>
 8003952:	4602      	mov	r2, r0
 8003954:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003956:	1ad3      	subs	r3, r2, r3
 8003958:	f241 3288 	movw	r2, #5000	; 0x1388
 800395c:	4293      	cmp	r3, r2
 800395e:	d901      	bls.n	8003964 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8003960:	2303      	movs	r3, #3
 8003962:	e113      	b.n	8003b8c <HAL_RCCEx_PeriphCLKConfig+0x354>
 8003964:	2302      	movs	r3, #2
 8003966:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003968:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800396a:	fa93 f3a3 	rbit	r3, r3
 800396e:	627b      	str	r3, [r7, #36]	; 0x24
 8003970:	2302      	movs	r3, #2
 8003972:	623b      	str	r3, [r7, #32]
 8003974:	6a3b      	ldr	r3, [r7, #32]
 8003976:	fa93 f3a3 	rbit	r3, r3
 800397a:	61fb      	str	r3, [r7, #28]
  return result;
 800397c:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800397e:	fab3 f383 	clz	r3, r3
 8003982:	b2db      	uxtb	r3, r3
 8003984:	095b      	lsrs	r3, r3, #5
 8003986:	b2db      	uxtb	r3, r3
 8003988:	f043 0302 	orr.w	r3, r3, #2
 800398c:	b2db      	uxtb	r3, r3
 800398e:	2b02      	cmp	r3, #2
 8003990:	d108      	bne.n	80039a4 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8003992:	4b01      	ldr	r3, [pc, #4]	; (8003998 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003994:	6a1b      	ldr	r3, [r3, #32]
 8003996:	e00d      	b.n	80039b4 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8003998:	40021000 	.word	0x40021000
 800399c:	40007000 	.word	0x40007000
 80039a0:	10908100 	.word	0x10908100
 80039a4:	2302      	movs	r3, #2
 80039a6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039a8:	69bb      	ldr	r3, [r7, #24]
 80039aa:	fa93 f3a3 	rbit	r3, r3
 80039ae:	617b      	str	r3, [r7, #20]
 80039b0:	4b78      	ldr	r3, [pc, #480]	; (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80039b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039b4:	2202      	movs	r2, #2
 80039b6:	613a      	str	r2, [r7, #16]
 80039b8:	693a      	ldr	r2, [r7, #16]
 80039ba:	fa92 f2a2 	rbit	r2, r2
 80039be:	60fa      	str	r2, [r7, #12]
  return result;
 80039c0:	68fa      	ldr	r2, [r7, #12]
 80039c2:	fab2 f282 	clz	r2, r2
 80039c6:	b2d2      	uxtb	r2, r2
 80039c8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80039cc:	b2d2      	uxtb	r2, r2
 80039ce:	f002 021f 	and.w	r2, r2, #31
 80039d2:	2101      	movs	r1, #1
 80039d4:	fa01 f202 	lsl.w	r2, r1, r2
 80039d8:	4013      	ands	r3, r2
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d0b7      	beq.n	800394e <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80039de:	4b6d      	ldr	r3, [pc, #436]	; (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80039e0:	6a1b      	ldr	r3, [r3, #32]
 80039e2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	685b      	ldr	r3, [r3, #4]
 80039ea:	496a      	ldr	r1, [pc, #424]	; (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80039ec:	4313      	orrs	r3, r2
 80039ee:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80039f0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80039f4:	2b01      	cmp	r3, #1
 80039f6:	d105      	bne.n	8003a04 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80039f8:	4b66      	ldr	r3, [pc, #408]	; (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80039fa:	69db      	ldr	r3, [r3, #28]
 80039fc:	4a65      	ldr	r2, [pc, #404]	; (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80039fe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a02:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f003 0301 	and.w	r3, r3, #1
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d008      	beq.n	8003a22 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003a10:	4b60      	ldr	r3, [pc, #384]	; (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003a12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a14:	f023 0203 	bic.w	r2, r3, #3
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	689b      	ldr	r3, [r3, #8]
 8003a1c:	495d      	ldr	r1, [pc, #372]	; (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003a1e:	4313      	orrs	r3, r2
 8003a20:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f003 0302 	and.w	r3, r3, #2
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d008      	beq.n	8003a40 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003a2e:	4b59      	ldr	r3, [pc, #356]	; (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a32:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	68db      	ldr	r3, [r3, #12]
 8003a3a:	4956      	ldr	r1, [pc, #344]	; (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003a3c:	4313      	orrs	r3, r2
 8003a3e:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f003 0304 	and.w	r3, r3, #4
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d008      	beq.n	8003a5e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003a4c:	4b51      	ldr	r3, [pc, #324]	; (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003a4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a50:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	691b      	ldr	r3, [r3, #16]
 8003a58:	494e      	ldr	r1, [pc, #312]	; (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003a5a:	4313      	orrs	r3, r2
 8003a5c:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f003 0320 	and.w	r3, r3, #32
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d008      	beq.n	8003a7c <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003a6a:	4b4a      	ldr	r3, [pc, #296]	; (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a6e:	f023 0210 	bic.w	r2, r3, #16
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	69db      	ldr	r3, [r3, #28]
 8003a76:	4947      	ldr	r1, [pc, #284]	; (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003a78:	4313      	orrs	r3, r2
 8003a7a:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d008      	beq.n	8003a9a <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8003a88:	4b42      	ldr	r3, [pc, #264]	; (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003a8a:	685b      	ldr	r3, [r3, #4]
 8003a8c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a94:	493f      	ldr	r1, [pc, #252]	; (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003a96:	4313      	orrs	r3, r2
 8003a98:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d008      	beq.n	8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003aa6:	4b3b      	ldr	r3, [pc, #236]	; (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aaa:	f023 0220 	bic.w	r2, r3, #32
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	6a1b      	ldr	r3, [r3, #32]
 8003ab2:	4938      	ldr	r1, [pc, #224]	; (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003ab4:	4313      	orrs	r3, r2
 8003ab6:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f003 0308 	and.w	r3, r3, #8
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d008      	beq.n	8003ad6 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003ac4:	4b33      	ldr	r3, [pc, #204]	; (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003ac6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ac8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	695b      	ldr	r3, [r3, #20]
 8003ad0:	4930      	ldr	r1, [pc, #192]	; (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003ad2:	4313      	orrs	r3, r2
 8003ad4:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f003 0310 	and.w	r3, r3, #16
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d008      	beq.n	8003af4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003ae2:	4b2c      	ldr	r3, [pc, #176]	; (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ae6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	699b      	ldr	r3, [r3, #24]
 8003aee:	4929      	ldr	r1, [pc, #164]	; (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003af0:	4313      	orrs	r3, r2
 8003af2:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d008      	beq.n	8003b12 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003b00:	4b24      	ldr	r3, [pc, #144]	; (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003b02:	685b      	ldr	r3, [r3, #4]
 8003b04:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b0c:	4921      	ldr	r1, [pc, #132]	; (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003b0e:	4313      	orrs	r3, r2
 8003b10:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d008      	beq.n	8003b30 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003b1e:	4b1d      	ldr	r3, [pc, #116]	; (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003b20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b22:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b2a:	491a      	ldr	r1, [pc, #104]	; (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003b2c:	4313      	orrs	r3, r2
 8003b2e:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d008      	beq.n	8003b4e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8003b3c:	4b15      	ldr	r3, [pc, #84]	; (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003b3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b40:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b48:	4912      	ldr	r1, [pc, #72]	; (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003b4a:	4313      	orrs	r3, r2
 8003b4c:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d008      	beq.n	8003b6c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003b5a:	4b0e      	ldr	r3, [pc, #56]	; (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b5e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b66:	490b      	ldr	r1, [pc, #44]	; (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003b68:	4313      	orrs	r3, r2
 8003b6a:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d008      	beq.n	8003b8a <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8003b78:	4b06      	ldr	r3, [pc, #24]	; (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003b7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b7c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b84:	4903      	ldr	r1, [pc, #12]	; (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003b86:	4313      	orrs	r3, r2
 8003b88:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003b8a:	2300      	movs	r3, #0
}
 8003b8c:	4618      	mov	r0, r3
 8003b8e:	3748      	adds	r7, #72	; 0x48
 8003b90:	46bd      	mov	sp, r7
 8003b92:	bd80      	pop	{r7, pc}
 8003b94:	40021000 	.word	0x40021000

08003b98 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	b084      	sub	sp, #16
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d101      	bne.n	8003baa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003ba6:	2301      	movs	r3, #1
 8003ba8:	e09d      	b.n	8003ce6 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d108      	bne.n	8003bc4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	685b      	ldr	r3, [r3, #4]
 8003bb6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003bba:	d009      	beq.n	8003bd0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	61da      	str	r2, [r3, #28]
 8003bc2:	e005      	b.n	8003bd0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	2200      	movs	r2, #0
 8003bc8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	2200      	movs	r2, #0
 8003bce:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	2200      	movs	r2, #0
 8003bd4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003bdc:	b2db      	uxtb	r3, r3
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d106      	bne.n	8003bf0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	2200      	movs	r2, #0
 8003be6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003bea:	6878      	ldr	r0, [r7, #4]
 8003bec:	f7fd fd7c 	bl	80016e8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2202      	movs	r2, #2
 8003bf4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	681a      	ldr	r2, [r3, #0]
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003c06:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	68db      	ldr	r3, [r3, #12]
 8003c0c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003c10:	d902      	bls.n	8003c18 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003c12:	2300      	movs	r3, #0
 8003c14:	60fb      	str	r3, [r7, #12]
 8003c16:	e002      	b.n	8003c1e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003c18:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003c1c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	68db      	ldr	r3, [r3, #12]
 8003c22:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8003c26:	d007      	beq.n	8003c38 <HAL_SPI_Init+0xa0>
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	68db      	ldr	r3, [r3, #12]
 8003c2c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003c30:	d002      	beq.n	8003c38 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	2200      	movs	r2, #0
 8003c36:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	685b      	ldr	r3, [r3, #4]
 8003c3c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	689b      	ldr	r3, [r3, #8]
 8003c44:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003c48:	431a      	orrs	r2, r3
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	691b      	ldr	r3, [r3, #16]
 8003c4e:	f003 0302 	and.w	r3, r3, #2
 8003c52:	431a      	orrs	r2, r3
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	695b      	ldr	r3, [r3, #20]
 8003c58:	f003 0301 	and.w	r3, r3, #1
 8003c5c:	431a      	orrs	r2, r3
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	699b      	ldr	r3, [r3, #24]
 8003c62:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003c66:	431a      	orrs	r2, r3
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	69db      	ldr	r3, [r3, #28]
 8003c6c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003c70:	431a      	orrs	r2, r3
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	6a1b      	ldr	r3, [r3, #32]
 8003c76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c7a:	ea42 0103 	orr.w	r1, r2, r3
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c82:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	430a      	orrs	r2, r1
 8003c8c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	699b      	ldr	r3, [r3, #24]
 8003c92:	0c1b      	lsrs	r3, r3, #16
 8003c94:	f003 0204 	and.w	r2, r3, #4
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c9c:	f003 0310 	and.w	r3, r3, #16
 8003ca0:	431a      	orrs	r2, r3
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ca6:	f003 0308 	and.w	r3, r3, #8
 8003caa:	431a      	orrs	r2, r3
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	68db      	ldr	r3, [r3, #12]
 8003cb0:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003cb4:	ea42 0103 	orr.w	r1, r2, r3
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	430a      	orrs	r2, r1
 8003cc4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	69da      	ldr	r2, [r3, #28]
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003cd4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	2200      	movs	r2, #0
 8003cda:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	2201      	movs	r2, #1
 8003ce0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003ce4:	2300      	movs	r3, #0
}
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	3710      	adds	r7, #16
 8003cea:	46bd      	mov	sp, r7
 8003cec:	bd80      	pop	{r7, pc}

08003cee <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8003cee:	b480      	push	{r7}
 8003cf0:	b085      	sub	sp, #20
 8003cf2:	af00      	add	r7, sp, #0
 8003cf4:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003cf6:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8003cfa:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003d02:	b29a      	uxth	r2, r3
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	b29b      	uxth	r3, r3
 8003d08:	43db      	mvns	r3, r3
 8003d0a:	b29b      	uxth	r3, r3
 8003d0c:	4013      	ands	r3, r2
 8003d0e:	b29a      	uxth	r2, r3
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003d16:	2300      	movs	r3, #0
}
 8003d18:	4618      	mov	r0, r3
 8003d1a:	3714      	adds	r7, #20
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d22:	4770      	bx	lr

08003d24 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8003d24:	b084      	sub	sp, #16
 8003d26:	b480      	push	{r7}
 8003d28:	b083      	sub	sp, #12
 8003d2a:	af00      	add	r7, sp, #0
 8003d2c:	6078      	str	r0, [r7, #4]
 8003d2e:	f107 0014 	add.w	r0, r7, #20
 8003d32:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	2201      	movs	r2, #1
 8003d3a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	2200      	movs	r2, #0
 8003d42:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	2200      	movs	r2, #0
 8003d4a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	2200      	movs	r2, #0
 8003d52:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8003d56:	2300      	movs	r3, #0
}
 8003d58:	4618      	mov	r0, r3
 8003d5a:	370c      	adds	r7, #12
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d62:	b004      	add	sp, #16
 8003d64:	4770      	bx	lr
	...

08003d68 <_ZN5stm324GPIOC1Ev>:

#include <GPIO_.hpp>

namespace stm32 {

GPIO::GPIO() {
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	b082      	sub	sp, #8
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	6078      	str	r0, [r7, #4]
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	4618      	mov	r0, r3
 8003d74:	f000 f82c 	bl	8003dd0 <_ZN5stm3210PeripheralC1Ev>
 8003d78:	4a03      	ldr	r2, [pc, #12]	; (8003d88 <_ZN5stm324GPIOC1Ev+0x20>)
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated constructor stub

}
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	4618      	mov	r0, r3
 8003d82:	3708      	adds	r7, #8
 8003d84:	46bd      	mov	sp, r7
 8003d86:	bd80      	pop	{r7, pc}
 8003d88:	0800506c 	.word	0x0800506c

08003d8c <_ZN5stm324GPIOD1Ev>:

GPIO::~GPIO() {
 8003d8c:	b580      	push	{r7, lr}
 8003d8e:	b082      	sub	sp, #8
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	6078      	str	r0, [r7, #4]
 8003d94:	4a05      	ldr	r2, [pc, #20]	; (8003dac <_ZN5stm324GPIOD1Ev+0x20>)
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	601a      	str	r2, [r3, #0]
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	f000 f827 	bl	8003df0 <_ZN5stm3210PeripheralD1Ev>
	// TODO Auto-generated destructor stub
}
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	4618      	mov	r0, r3
 8003da6:	3708      	adds	r7, #8
 8003da8:	46bd      	mov	sp, r7
 8003daa:	bd80      	pop	{r7, pc}
 8003dac:	0800506c 	.word	0x0800506c

08003db0 <_ZN5stm324GPIOD0Ev>:
GPIO::~GPIO() {
 8003db0:	b580      	push	{r7, lr}
 8003db2:	b082      	sub	sp, #8
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	6078      	str	r0, [r7, #4]
}
 8003db8:	6878      	ldr	r0, [r7, #4]
 8003dba:	f7ff ffe7 	bl	8003d8c <_ZN5stm324GPIOD1Ev>
 8003dbe:	2104      	movs	r1, #4
 8003dc0:	6878      	ldr	r0, [r7, #4]
 8003dc2:	f000 fa7d 	bl	80042c0 <_ZdlPvj>
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	4618      	mov	r0, r3
 8003dca:	3708      	adds	r7, #8
 8003dcc:	46bd      	mov	sp, r7
 8003dce:	bd80      	pop	{r7, pc}

08003dd0 <_ZN5stm3210PeripheralC1Ev>:

#include <Peripheral.hpp>

namespace stm32 {

Peripheral::Peripheral() {
 8003dd0:	b480      	push	{r7}
 8003dd2:	b083      	sub	sp, #12
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	6078      	str	r0, [r7, #4]
 8003dd8:	4a04      	ldr	r2, [pc, #16]	; (8003dec <_ZN5stm3210PeripheralC1Ev+0x1c>)
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated constructor stub

}
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	4618      	mov	r0, r3
 8003de2:	370c      	adds	r7, #12
 8003de4:	46bd      	mov	sp, r7
 8003de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dea:	4770      	bx	lr
 8003dec:	0800507c 	.word	0x0800507c

08003df0 <_ZN5stm3210PeripheralD1Ev>:

Peripheral::~Peripheral() {
 8003df0:	b480      	push	{r7}
 8003df2:	b083      	sub	sp, #12
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	6078      	str	r0, [r7, #4]
 8003df8:	4a04      	ldr	r2, [pc, #16]	; (8003e0c <_ZN5stm3210PeripheralD1Ev+0x1c>)
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	4618      	mov	r0, r3
 8003e02:	370c      	adds	r7, #12
 8003e04:	46bd      	mov	sp, r7
 8003e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0a:	4770      	bx	lr
 8003e0c:	0800507c 	.word	0x0800507c

08003e10 <_ZN5stm3210PeripheralD0Ev>:
Peripheral::~Peripheral() {
 8003e10:	b580      	push	{r7, lr}
 8003e12:	b082      	sub	sp, #8
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	6078      	str	r0, [r7, #4]
}
 8003e18:	6878      	ldr	r0, [r7, #4]
 8003e1a:	f7ff ffe9 	bl	8003df0 <_ZN5stm3210PeripheralD1Ev>
 8003e1e:	2104      	movs	r1, #4
 8003e20:	6878      	ldr	r0, [r7, #4]
 8003e22:	f000 fa4d 	bl	80042c0 <_ZdlPvj>
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	4618      	mov	r0, r3
 8003e2a:	3708      	adds	r7, #8
 8003e2c:	46bd      	mov	sp, r7
 8003e2e:	bd80      	pop	{r7, pc}

08003e30 <_ZN5stm323PinC1EP12GPIO_TypeDeft>:

Pin::Pin(uint16_t p) {
	setPin(p);
}

Pin::Pin(GPIO_TypeDef* pt, uint16_t pn) {
 8003e30:	b580      	push	{r7, lr}
 8003e32:	b084      	sub	sp, #16
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	60f8      	str	r0, [r7, #12]
 8003e38:	60b9      	str	r1, [r7, #8]
 8003e3a:	4613      	mov	r3, r2
 8003e3c:	80fb      	strh	r3, [r7, #6]
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	4618      	mov	r0, r3
 8003e42:	f000 f9a3 	bl	800418c <_ZN5stm324PortC1Ev>
 8003e46:	4a0c      	ldr	r2, [pc, #48]	; (8003e78 <_ZN5stm323PinC1EP12GPIO_TypeDeft+0x48>)
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	601a      	str	r2, [r3, #0]
	setPort(pt);
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	68b9      	ldr	r1, [r7, #8]
 8003e50:	4618      	mov	r0, r3
 8003e52:	f000 f9ad 	bl	80041b0 <_ZN5stm324Port7setPortEP12GPIO_TypeDef>
	setPin(pn);
 8003e56:	88fb      	ldrh	r3, [r7, #6]
 8003e58:	4619      	mov	r1, r3
 8003e5a:	68f8      	ldr	r0, [r7, #12]
 8003e5c:	f000 f80e 	bl	8003e7c <_ZN5stm323Pin6setPinEt>
}
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	e005      	b.n	8003e70 <_ZN5stm323PinC1EP12GPIO_TypeDeft+0x40>
Pin::Pin(GPIO_TypeDef* pt, uint16_t pn) {
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	4618      	mov	r0, r3
 8003e68:	f000 fa08 	bl	800427c <_ZN5stm324PortD1Ev>
 8003e6c:	f000 fa3e 	bl	80042ec <__cxa_end_cleanup>
}
 8003e70:	4618      	mov	r0, r3
 8003e72:	3710      	adds	r7, #16
 8003e74:	46bd      	mov	sp, r7
 8003e76:	bd80      	pop	{r7, pc}
 8003e78:	0800508c 	.word	0x0800508c

08003e7c <_ZN5stm323Pin6setPinEt>:

void Pin::setPin(uint16_t p) {
 8003e7c:	b480      	push	{r7}
 8003e7e:	b083      	sub	sp, #12
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	6078      	str	r0, [r7, #4]
 8003e84:	460b      	mov	r3, r1
 8003e86:	807b      	strh	r3, [r7, #2]
	this->pin = p;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	887a      	ldrh	r2, [r7, #2]
 8003e8c:	811a      	strh	r2, [r3, #8]
}
 8003e8e:	bf00      	nop
 8003e90:	370c      	adds	r7, #12
 8003e92:	46bd      	mov	sp, r7
 8003e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e98:	4770      	bx	lr

08003e9a <_ZN5stm323Pin6getPinEv>:

uint16_t Pin::getPin() {
 8003e9a:	b480      	push	{r7}
 8003e9c:	b083      	sub	sp, #12
 8003e9e:	af00      	add	r7, sp, #0
 8003ea0:	6078      	str	r0, [r7, #4]
	return this->pin;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	891b      	ldrh	r3, [r3, #8]
}
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	370c      	adds	r7, #12
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb0:	4770      	bx	lr

08003eb2 <_ZN5stm323Pin8writePinE5State>:

void Pin::writePin(State pv) {
 8003eb2:	b590      	push	{r4, r7, lr}
 8003eb4:	b083      	sub	sp, #12
 8003eb6:	af00      	add	r7, sp, #0
 8003eb8:	6078      	str	r0, [r7, #4]
 8003eba:	460b      	mov	r3, r1
 8003ebc:	70fb      	strb	r3, [r7, #3]
	if(pv != State::Reset) {
 8003ebe:	78fb      	ldrb	r3, [r7, #3]
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d00c      	beq.n	8003ede <_ZN5stm323Pin8writePinE5State+0x2c>
		this->getPort()->BSRR = (uint32_t)(this->getPin());
 8003ec4:	6878      	ldr	r0, [r7, #4]
 8003ec6:	f7ff ffe8 	bl	8003e9a <_ZN5stm323Pin6getPinEv>
 8003eca:	4603      	mov	r3, r0
 8003ecc:	461c      	mov	r4, r3
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	4618      	mov	r0, r3
 8003ed2:	f000 f97b 	bl	80041cc <_ZN5stm324Port7getPortEv>
 8003ed6:	4603      	mov	r3, r0
 8003ed8:	4622      	mov	r2, r4
 8003eda:	619a      	str	r2, [r3, #24]
	}
	else {
		this->getPort()->BRR = (uint32_t)(this->getPin());
	}
}
 8003edc:	e00b      	b.n	8003ef6 <_ZN5stm323Pin8writePinE5State+0x44>
		this->getPort()->BRR = (uint32_t)(this->getPin());
 8003ede:	6878      	ldr	r0, [r7, #4]
 8003ee0:	f7ff ffdb 	bl	8003e9a <_ZN5stm323Pin6getPinEv>
 8003ee4:	4603      	mov	r3, r0
 8003ee6:	461c      	mov	r4, r3
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	4618      	mov	r0, r3
 8003eec:	f000 f96e 	bl	80041cc <_ZN5stm324Port7getPortEv>
 8003ef0:	4603      	mov	r3, r0
 8003ef2:	4622      	mov	r2, r4
 8003ef4:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003ef6:	bf00      	nop
 8003ef8:	370c      	adds	r7, #12
 8003efa:	46bd      	mov	sp, r7
 8003efc:	bd90      	pop	{r4, r7, pc}

08003efe <_ZN5stm323PinaSE5State>:

void Pin::operator =(State pv) {
 8003efe:	b580      	push	{r7, lr}
 8003f00:	b082      	sub	sp, #8
 8003f02:	af00      	add	r7, sp, #0
 8003f04:	6078      	str	r0, [r7, #4]
 8003f06:	460b      	mov	r3, r1
 8003f08:	70fb      	strb	r3, [r7, #3]
	this->writePin(pv);
 8003f0a:	78fb      	ldrb	r3, [r7, #3]
 8003f0c:	4619      	mov	r1, r3
 8003f0e:	6878      	ldr	r0, [r7, #4]
 8003f10:	f7ff ffcf 	bl	8003eb2 <_ZN5stm323Pin8writePinE5State>
}
 8003f14:	bf00      	nop
 8003f16:	3708      	adds	r7, #8
 8003f18:	46bd      	mov	sp, r7
 8003f1a:	bd80      	pop	{r7, pc}

08003f1c <_ZN5stm323Pin9togglePinEv>:

void Pin::togglePin() {
 8003f1c:	b5b0      	push	{r4, r5, r7, lr}
 8003f1e:	b082      	sub	sp, #8
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	6078      	str	r0, [r7, #4]
	this->getPort()->BSRR = ((this->getPort()->ODR & this->getPin()) << GPIO_PIN_NUMBER) | (~(this->getPort()->ODR) & this->getPin());
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	4618      	mov	r0, r3
 8003f28:	f000 f950 	bl	80041cc <_ZN5stm324Port7getPortEv>
 8003f2c:	4603      	mov	r3, r0
 8003f2e:	695c      	ldr	r4, [r3, #20]
 8003f30:	6878      	ldr	r0, [r7, #4]
 8003f32:	f7ff ffb2 	bl	8003e9a <_ZN5stm323Pin6getPinEv>
 8003f36:	4603      	mov	r3, r0
 8003f38:	4023      	ands	r3, r4
 8003f3a:	041d      	lsls	r5, r3, #16
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	4618      	mov	r0, r3
 8003f40:	f000 f944 	bl	80041cc <_ZN5stm324Port7getPortEv>
 8003f44:	4603      	mov	r3, r0
 8003f46:	695b      	ldr	r3, [r3, #20]
 8003f48:	43dc      	mvns	r4, r3
 8003f4a:	6878      	ldr	r0, [r7, #4]
 8003f4c:	f7ff ffa5 	bl	8003e9a <_ZN5stm323Pin6getPinEv>
 8003f50:	4603      	mov	r3, r0
 8003f52:	401c      	ands	r4, r3
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	4618      	mov	r0, r3
 8003f58:	f000 f938 	bl	80041cc <_ZN5stm324Port7getPortEv>
 8003f5c:	4602      	mov	r2, r0
 8003f5e:	ea45 0304 	orr.w	r3, r5, r4
 8003f62:	6193      	str	r3, [r2, #24]
}
 8003f64:	bf00      	nop
 8003f66:	3708      	adds	r7, #8
 8003f68:	46bd      	mov	sp, r7
 8003f6a:	bdb0      	pop	{r4, r5, r7, pc}

08003f6c <_ZN5stm323PinntEv>:

void Pin::operator !() {
 8003f6c:	b580      	push	{r7, lr}
 8003f6e:	b082      	sub	sp, #8
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	6078      	str	r0, [r7, #4]
	this->togglePin();
 8003f74:	6878      	ldr	r0, [r7, #4]
 8003f76:	f7ff ffd1 	bl	8003f1c <_ZN5stm323Pin9togglePinEv>
}
 8003f7a:	bf00      	nop
 8003f7c:	3708      	adds	r7, #8
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	bd80      	pop	{r7, pc}

08003f82 <_ZN5stm323Pin7readPinEv>:

State Pin::readPin() {
 8003f82:	b590      	push	{r4, r7, lr}
 8003f84:	b083      	sub	sp, #12
 8003f86:	af00      	add	r7, sp, #0
 8003f88:	6078      	str	r0, [r7, #4]
	return (this->getPort()->IDR & this->getPin() ? State::Set : State::Reset);
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	4618      	mov	r0, r3
 8003f8e:	f000 f91d 	bl	80041cc <_ZN5stm324Port7getPortEv>
 8003f92:	4603      	mov	r3, r0
 8003f94:	691c      	ldr	r4, [r3, #16]
 8003f96:	6878      	ldr	r0, [r7, #4]
 8003f98:	f7ff ff7f 	bl	8003e9a <_ZN5stm323Pin6getPinEv>
 8003f9c:	4603      	mov	r3, r0
 8003f9e:	4023      	ands	r3, r4
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d001      	beq.n	8003fa8 <_ZN5stm323Pin7readPinEv+0x26>
 8003fa4:	2301      	movs	r3, #1
 8003fa6:	e000      	b.n	8003faa <_ZN5stm323Pin7readPinEv+0x28>
 8003fa8:	2300      	movs	r3, #0
}
 8003faa:	4618      	mov	r0, r3
 8003fac:	370c      	adds	r7, #12
 8003fae:	46bd      	mov	sp, r7
 8003fb0:	bd90      	pop	{r4, r7, pc}
	...

08003fb4 <_ZN5stm323PinD1Ev>:

State Pin::operator ~() {
	return this->readPin();
}

Pin::~Pin() {
 8003fb4:	b580      	push	{r7, lr}
 8003fb6:	b082      	sub	sp, #8
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	6078      	str	r0, [r7, #4]
 8003fbc:	4a05      	ldr	r2, [pc, #20]	; (8003fd4 <_ZN5stm323PinD1Ev+0x20>)
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	601a      	str	r2, [r3, #0]
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	4618      	mov	r0, r3
 8003fc6:	f000 f959 	bl	800427c <_ZN5stm324PortD1Ev>
	// TODO Auto-generated destructor stub
}
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	4618      	mov	r0, r3
 8003fce:	3708      	adds	r7, #8
 8003fd0:	46bd      	mov	sp, r7
 8003fd2:	bd80      	pop	{r7, pc}
 8003fd4:	0800508c 	.word	0x0800508c

08003fd8 <_ZN5stm323PinD0Ev>:
Pin::~Pin() {
 8003fd8:	b580      	push	{r7, lr}
 8003fda:	b082      	sub	sp, #8
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	6078      	str	r0, [r7, #4]
}
 8003fe0:	6878      	ldr	r0, [r7, #4]
 8003fe2:	f7ff ffe7 	bl	8003fb4 <_ZN5stm323PinD1Ev>
 8003fe6:	210c      	movs	r1, #12
 8003fe8:	6878      	ldr	r0, [r7, #4]
 8003fea:	f000 f969 	bl	80042c0 <_ZdlPvj>
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	3708      	adds	r7, #8
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	bd80      	pop	{r7, pc}

08003ff8 <_ZN5stm327PinListC1EPNS_3PinEi>:

PinList::PinList(Pin* map) {
	setPinMap(map);
}

PinList::PinList(Pin* map, int size) {
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	b084      	sub	sp, #16
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	60f8      	str	r0, [r7, #12]
 8004000:	60b9      	str	r1, [r7, #8]
 8004002:	607a      	str	r2, [r7, #4]
 8004004:	4a07      	ldr	r2, [pc, #28]	; (8004024 <_ZN5stm327PinListC1EPNS_3PinEi+0x2c>)
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	601a      	str	r2, [r3, #0]
	setPinMap(map);
 800400a:	68b9      	ldr	r1, [r7, #8]
 800400c:	68f8      	ldr	r0, [r7, #12]
 800400e:	f000 f80b 	bl	8004028 <_ZN5stm327PinList9setPinMapEPNS_3PinE>
	setSizeMap(size);
 8004012:	6879      	ldr	r1, [r7, #4]
 8004014:	68f8      	ldr	r0, [r7, #12]
 8004016:	f000 f821 	bl	800405c <_ZN5stm327PinList10setSizeMapEi>
}
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	4618      	mov	r0, r3
 800401e:	3710      	adds	r7, #16
 8004020:	46bd      	mov	sp, r7
 8004022:	bd80      	pop	{r7, pc}
 8004024:	080050a8 	.word	0x080050a8

08004028 <_ZN5stm327PinList9setPinMapEPNS_3PinE>:

void PinList::setPinMap(Pin* map) {
 8004028:	b480      	push	{r7}
 800402a:	b083      	sub	sp, #12
 800402c:	af00      	add	r7, sp, #0
 800402e:	6078      	str	r0, [r7, #4]
 8004030:	6039      	str	r1, [r7, #0]
	this->pinMap = map;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	683a      	ldr	r2, [r7, #0]
 8004036:	605a      	str	r2, [r3, #4]
}
 8004038:	bf00      	nop
 800403a:	370c      	adds	r7, #12
 800403c:	46bd      	mov	sp, r7
 800403e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004042:	4770      	bx	lr

08004044 <_ZN5stm327PinList9getPinMapEv>:

Pin* PinList::getPinMap() {
 8004044:	b480      	push	{r7}
 8004046:	b083      	sub	sp, #12
 8004048:	af00      	add	r7, sp, #0
 800404a:	6078      	str	r0, [r7, #4]
	return this->pinMap;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	685b      	ldr	r3, [r3, #4]
}
 8004050:	4618      	mov	r0, r3
 8004052:	370c      	adds	r7, #12
 8004054:	46bd      	mov	sp, r7
 8004056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800405a:	4770      	bx	lr

0800405c <_ZN5stm327PinList10setSizeMapEi>:

void PinList::setSizeMap(int size) {
 800405c:	b480      	push	{r7}
 800405e:	b083      	sub	sp, #12
 8004060:	af00      	add	r7, sp, #0
 8004062:	6078      	str	r0, [r7, #4]
 8004064:	6039      	str	r1, [r7, #0]
	this->sizeMap = size;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	683a      	ldr	r2, [r7, #0]
 800406a:	609a      	str	r2, [r3, #8]
}
 800406c:	bf00      	nop
 800406e:	370c      	adds	r7, #12
 8004070:	46bd      	mov	sp, r7
 8004072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004076:	4770      	bx	lr

08004078 <_ZN5stm327PinList10getSizeMapEv>:

int PinList::getSizeMap() {
 8004078:	b480      	push	{r7}
 800407a:	b083      	sub	sp, #12
 800407c:	af00      	add	r7, sp, #0
 800407e:	6078      	str	r0, [r7, #4]
	return this->sizeMap;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	689b      	ldr	r3, [r3, #8]
}
 8004084:	4618      	mov	r0, r3
 8004086:	370c      	adds	r7, #12
 8004088:	46bd      	mov	sp, r7
 800408a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408e:	4770      	bx	lr

08004090 <_ZN5stm327PinList8writeMapEP5State>:

void PinList::writeMap(State* s) {
 8004090:	b580      	push	{r7, lr}
 8004092:	b084      	sub	sp, #16
 8004094:	af00      	add	r7, sp, #0
 8004096:	6078      	str	r0, [r7, #4]
 8004098:	6039      	str	r1, [r7, #0]
	for(int i = 0; i < this->getSizeMap(); i++) {
 800409a:	2300      	movs	r3, #0
 800409c:	60fb      	str	r3, [r7, #12]
 800409e:	6878      	ldr	r0, [r7, #4]
 80040a0:	f7ff ffea 	bl	8004078 <_ZN5stm327PinList10getSizeMapEv>
 80040a4:	4602      	mov	r2, r0
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	4293      	cmp	r3, r2
 80040aa:	bfb4      	ite	lt
 80040ac:	2301      	movlt	r3, #1
 80040ae:	2300      	movge	r3, #0
 80040b0:	b2db      	uxtb	r3, r3
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d014      	beq.n	80040e0 <_ZN5stm327PinList8writeMapEP5State+0x50>
		this->getPinMap()[i].writePin(s[i]);
 80040b6:	6878      	ldr	r0, [r7, #4]
 80040b8:	f7ff ffc4 	bl	8004044 <_ZN5stm327PinList9getPinMapEv>
 80040bc:	4601      	mov	r1, r0
 80040be:	68fa      	ldr	r2, [r7, #12]
 80040c0:	4613      	mov	r3, r2
 80040c2:	005b      	lsls	r3, r3, #1
 80040c4:	4413      	add	r3, r2
 80040c6:	009b      	lsls	r3, r3, #2
 80040c8:	18c8      	adds	r0, r1, r3
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	683a      	ldr	r2, [r7, #0]
 80040ce:	4413      	add	r3, r2
 80040d0:	781b      	ldrb	r3, [r3, #0]
 80040d2:	4619      	mov	r1, r3
 80040d4:	f7ff feed 	bl	8003eb2 <_ZN5stm323Pin8writePinE5State>
	for(int i = 0; i < this->getSizeMap(); i++) {
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	3301      	adds	r3, #1
 80040dc:	60fb      	str	r3, [r7, #12]
 80040de:	e7de      	b.n	800409e <_ZN5stm327PinList8writeMapEP5State+0xe>
	}
}
 80040e0:	bf00      	nop
 80040e2:	3710      	adds	r7, #16
 80040e4:	46bd      	mov	sp, r7
 80040e6:	bd80      	pop	{r7, pc}

080040e8 <_ZN5stm327PinListaSEP5State>:

void PinList::operator =(State* s) {
 80040e8:	b580      	push	{r7, lr}
 80040ea:	b082      	sub	sp, #8
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	6078      	str	r0, [r7, #4]
 80040f0:	6039      	str	r1, [r7, #0]
	this->writeMap(s);
 80040f2:	6839      	ldr	r1, [r7, #0]
 80040f4:	6878      	ldr	r0, [r7, #4]
 80040f6:	f7ff ffcb 	bl	8004090 <_ZN5stm327PinList8writeMapEP5State>
}
 80040fa:	bf00      	nop
 80040fc:	3708      	adds	r7, #8
 80040fe:	46bd      	mov	sp, r7
 8004100:	bd80      	pop	{r7, pc}

08004102 <_ZN5stm327PinList14readMapWithKeyEi>:

void PinList::operator !=(int key) {
	this->toggleMapWithKey(key);
}

State PinList::readMapWithKey(int key) {
 8004102:	b580      	push	{r7, lr}
 8004104:	b082      	sub	sp, #8
 8004106:	af00      	add	r7, sp, #0
 8004108:	6078      	str	r0, [r7, #4]
 800410a:	6039      	str	r1, [r7, #0]
	return this->getPinMap()[key].readPin();
 800410c:	6878      	ldr	r0, [r7, #4]
 800410e:	f7ff ff99 	bl	8004044 <_ZN5stm327PinList9getPinMapEv>
 8004112:	4601      	mov	r1, r0
 8004114:	683a      	ldr	r2, [r7, #0]
 8004116:	4613      	mov	r3, r2
 8004118:	005b      	lsls	r3, r3, #1
 800411a:	4413      	add	r3, r2
 800411c:	009b      	lsls	r3, r3, #2
 800411e:	440b      	add	r3, r1
 8004120:	4618      	mov	r0, r3
 8004122:	f7ff ff2e 	bl	8003f82 <_ZN5stm323Pin7readPinEv>
 8004126:	4603      	mov	r3, r0
}
 8004128:	4618      	mov	r0, r3
 800412a:	3708      	adds	r7, #8
 800412c:	46bd      	mov	sp, r7
 800412e:	bd80      	pop	{r7, pc}

08004130 <_ZN5stm327PinListixEi>:

State PinList::operator [](int key) {
 8004130:	b580      	push	{r7, lr}
 8004132:	b082      	sub	sp, #8
 8004134:	af00      	add	r7, sp, #0
 8004136:	6078      	str	r0, [r7, #4]
 8004138:	6039      	str	r1, [r7, #0]
	return this->readMapWithKey(key);
 800413a:	6839      	ldr	r1, [r7, #0]
 800413c:	6878      	ldr	r0, [r7, #4]
 800413e:	f7ff ffe0 	bl	8004102 <_ZN5stm327PinList14readMapWithKeyEi>
 8004142:	4603      	mov	r3, r0
}
 8004144:	4618      	mov	r0, r3
 8004146:	3708      	adds	r7, #8
 8004148:	46bd      	mov	sp, r7
 800414a:	bd80      	pop	{r7, pc}

0800414c <_ZN5stm327PinListD1Ev>:

PinList::~PinList() {}
 800414c:	b480      	push	{r7}
 800414e:	b083      	sub	sp, #12
 8004150:	af00      	add	r7, sp, #0
 8004152:	6078      	str	r0, [r7, #4]
 8004154:	4a04      	ldr	r2, [pc, #16]	; (8004168 <_ZN5stm327PinListD1Ev+0x1c>)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	601a      	str	r2, [r3, #0]
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	4618      	mov	r0, r3
 800415e:	370c      	adds	r7, #12
 8004160:	46bd      	mov	sp, r7
 8004162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004166:	4770      	bx	lr
 8004168:	080050a8 	.word	0x080050a8

0800416c <_ZN5stm327PinListD0Ev>:
 800416c:	b580      	push	{r7, lr}
 800416e:	b082      	sub	sp, #8
 8004170:	af00      	add	r7, sp, #0
 8004172:	6078      	str	r0, [r7, #4]
 8004174:	6878      	ldr	r0, [r7, #4]
 8004176:	f7ff ffe9 	bl	800414c <_ZN5stm327PinListD1Ev>
 800417a:	210c      	movs	r1, #12
 800417c:	6878      	ldr	r0, [r7, #4]
 800417e:	f000 f89f 	bl	80042c0 <_ZdlPvj>
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	4618      	mov	r0, r3
 8004186:	3708      	adds	r7, #8
 8004188:	46bd      	mov	sp, r7
 800418a:	bd80      	pop	{r7, pc}

0800418c <_ZN5stm324PortC1Ev>:
#include <Port.hpp>

namespace stm32 {


Port::Port() {}
 800418c:	b580      	push	{r7, lr}
 800418e:	b082      	sub	sp, #8
 8004190:	af00      	add	r7, sp, #0
 8004192:	6078      	str	r0, [r7, #4]
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	4618      	mov	r0, r3
 8004198:	f7ff fde6 	bl	8003d68 <_ZN5stm324GPIOC1Ev>
 800419c:	4a03      	ldr	r2, [pc, #12]	; (80041ac <_ZN5stm324PortC1Ev+0x20>)
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	601a      	str	r2, [r3, #0]
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	4618      	mov	r0, r3
 80041a6:	3708      	adds	r7, #8
 80041a8:	46bd      	mov	sp, r7
 80041aa:	bd80      	pop	{r7, pc}
 80041ac:	080050b8 	.word	0x080050b8

080041b0 <_ZN5stm324Port7setPortEP12GPIO_TypeDef>:

Port::Port(GPIO_TypeDef* p) {
	setPort(p);
}

void Port::setPort(GPIO_TypeDef* p) {
 80041b0:	b480      	push	{r7}
 80041b2:	b083      	sub	sp, #12
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	6078      	str	r0, [r7, #4]
 80041b8:	6039      	str	r1, [r7, #0]
	this->port = p;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	683a      	ldr	r2, [r7, #0]
 80041be:	605a      	str	r2, [r3, #4]
}
 80041c0:	bf00      	nop
 80041c2:	370c      	adds	r7, #12
 80041c4:	46bd      	mov	sp, r7
 80041c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ca:	4770      	bx	lr

080041cc <_ZN5stm324Port7getPortEv>:

GPIO_TypeDef* Port::getPort() {
 80041cc:	b480      	push	{r7}
 80041ce:	b083      	sub	sp, #12
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	6078      	str	r0, [r7, #4]
	return this->port;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	685b      	ldr	r3, [r3, #4]
}
 80041d8:	4618      	mov	r0, r3
 80041da:	370c      	adds	r7, #12
 80041dc:	46bd      	mov	sp, r7
 80041de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e2:	4770      	bx	lr

080041e4 <_ZN5stm324Port9writePortEt>:

void Port::writePort(uint16_t pv) {
 80041e4:	b590      	push	{r4, r7, lr}
 80041e6:	b083      	sub	sp, #12
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	6078      	str	r0, [r7, #4]
 80041ec:	460b      	mov	r3, r1
 80041ee:	807b      	strh	r3, [r7, #2]
	this->getPort()->BSRR = (uint32_t)((~pv << GPIO_PIN_NUMBER) + pv);
 80041f0:	887b      	ldrh	r3, [r7, #2]
 80041f2:	43db      	mvns	r3, r3
 80041f4:	041a      	lsls	r2, r3, #16
 80041f6:	887b      	ldrh	r3, [r7, #2]
 80041f8:	18d4      	adds	r4, r2, r3
 80041fa:	6878      	ldr	r0, [r7, #4]
 80041fc:	f7ff ffe6 	bl	80041cc <_ZN5stm324Port7getPortEv>
 8004200:	4603      	mov	r3, r0
 8004202:	4622      	mov	r2, r4
 8004204:	619a      	str	r2, [r3, #24]
}
 8004206:	bf00      	nop
 8004208:	370c      	adds	r7, #12
 800420a:	46bd      	mov	sp, r7
 800420c:	bd90      	pop	{r4, r7, pc}

0800420e <_ZN5stm324PortaSEt>:

void Port::operator =(uint16_t pv) {
 800420e:	b580      	push	{r7, lr}
 8004210:	b082      	sub	sp, #8
 8004212:	af00      	add	r7, sp, #0
 8004214:	6078      	str	r0, [r7, #4]
 8004216:	460b      	mov	r3, r1
 8004218:	807b      	strh	r3, [r7, #2]
	this->writePort(pv);
 800421a:	887b      	ldrh	r3, [r7, #2]
 800421c:	4619      	mov	r1, r3
 800421e:	6878      	ldr	r0, [r7, #4]
 8004220:	f7ff ffe0 	bl	80041e4 <_ZN5stm324Port9writePortEt>
}
 8004224:	bf00      	nop
 8004226:	3708      	adds	r7, #8
 8004228:	46bd      	mov	sp, r7
 800422a:	bd80      	pop	{r7, pc}

0800422c <_ZN5stm324Port10togglePortEv>:

void Port::togglePort() {
 800422c:	b5b0      	push	{r4, r5, r7, lr}
 800422e:	b082      	sub	sp, #8
 8004230:	af00      	add	r7, sp, #0
 8004232:	6078      	str	r0, [r7, #4]
	this->getPort()->BSRR = ((this->getPort()->ODR & GPIO_PIN_ALL) << GPIO_PIN_NUMBER) | (~(this->getPort()->ODR) & GPIO_PIN_ALL);
 8004234:	6878      	ldr	r0, [r7, #4]
 8004236:	f7ff ffc9 	bl	80041cc <_ZN5stm324Port7getPortEv>
 800423a:	4603      	mov	r3, r0
 800423c:	695b      	ldr	r3, [r3, #20]
 800423e:	041d      	lsls	r5, r3, #16
 8004240:	6878      	ldr	r0, [r7, #4]
 8004242:	f7ff ffc3 	bl	80041cc <_ZN5stm324Port7getPortEv>
 8004246:	4603      	mov	r3, r0
 8004248:	695b      	ldr	r3, [r3, #20]
 800424a:	43db      	mvns	r3, r3
 800424c:	b29c      	uxth	r4, r3
 800424e:	6878      	ldr	r0, [r7, #4]
 8004250:	f7ff ffbc 	bl	80041cc <_ZN5stm324Port7getPortEv>
 8004254:	4602      	mov	r2, r0
 8004256:	ea45 0304 	orr.w	r3, r5, r4
 800425a:	6193      	str	r3, [r2, #24]
}
 800425c:	bf00      	nop
 800425e:	3708      	adds	r7, #8
 8004260:	46bd      	mov	sp, r7
 8004262:	bdb0      	pop	{r4, r5, r7, pc}

08004264 <_ZN5stm324PortntEv>:

void Port::operator !() {
 8004264:	b580      	push	{r7, lr}
 8004266:	b082      	sub	sp, #8
 8004268:	af00      	add	r7, sp, #0
 800426a:	6078      	str	r0, [r7, #4]
	this->togglePort();
 800426c:	6878      	ldr	r0, [r7, #4]
 800426e:	f7ff ffdd 	bl	800422c <_ZN5stm324Port10togglePortEv>
}
 8004272:	bf00      	nop
 8004274:	3708      	adds	r7, #8
 8004276:	46bd      	mov	sp, r7
 8004278:	bd80      	pop	{r7, pc}
	...

0800427c <_ZN5stm324PortD1Ev>:

uint16_t Port::operator ~() {
	return this->readPort();
}

Port::~Port() {}
 800427c:	b580      	push	{r7, lr}
 800427e:	b082      	sub	sp, #8
 8004280:	af00      	add	r7, sp, #0
 8004282:	6078      	str	r0, [r7, #4]
 8004284:	4a05      	ldr	r2, [pc, #20]	; (800429c <_ZN5stm324PortD1Ev+0x20>)
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	601a      	str	r2, [r3, #0]
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	4618      	mov	r0, r3
 800428e:	f7ff fd7d 	bl	8003d8c <_ZN5stm324GPIOD1Ev>
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	4618      	mov	r0, r3
 8004296:	3708      	adds	r7, #8
 8004298:	46bd      	mov	sp, r7
 800429a:	bd80      	pop	{r7, pc}
 800429c:	080050b8 	.word	0x080050b8

080042a0 <_ZN5stm324PortD0Ev>:
 80042a0:	b580      	push	{r7, lr}
 80042a2:	b082      	sub	sp, #8
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	6078      	str	r0, [r7, #4]
 80042a8:	6878      	ldr	r0, [r7, #4]
 80042aa:	f7ff ffe7 	bl	800427c <_ZN5stm324PortD1Ev>
 80042ae:	2108      	movs	r1, #8
 80042b0:	6878      	ldr	r0, [r7, #4]
 80042b2:	f000 f805 	bl	80042c0 <_ZdlPvj>
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	4618      	mov	r0, r3
 80042ba:	3708      	adds	r7, #8
 80042bc:	46bd      	mov	sp, r7
 80042be:	bd80      	pop	{r7, pc}

080042c0 <_ZdlPvj>:
 80042c0:	f000 bcc2 	b.w	8004c48 <_ZdlPv>

080042c4 <_GLOBAL__sub_I__ZN9__gnu_cxx9__freeresEv>:
 80042c4:	b538      	push	{r3, r4, r5, lr}
 80042c6:	4c08      	ldr	r4, [pc, #32]	; (80042e8 <_GLOBAL__sub_I__ZN9__gnu_cxx9__freeresEv+0x24>)
 80042c8:	f44f 651e 	mov.w	r5, #2528	; 0x9e0
 80042cc:	4628      	mov	r0, r5
 80042ce:	60e5      	str	r5, [r4, #12]
 80042d0:	f000 fd2e 	bl	8004d30 <malloc>
 80042d4:	60a0      	str	r0, [r4, #8]
 80042d6:	b910      	cbnz	r0, 80042de <_GLOBAL__sub_I__ZN9__gnu_cxx9__freeresEv+0x1a>
 80042d8:	60e0      	str	r0, [r4, #12]
 80042da:	6060      	str	r0, [r4, #4]
 80042dc:	bd38      	pop	{r3, r4, r5, pc}
 80042de:	2300      	movs	r3, #0
 80042e0:	6060      	str	r0, [r4, #4]
 80042e2:	6005      	str	r5, [r0, #0]
 80042e4:	6043      	str	r3, [r0, #4]
 80042e6:	e7f9      	b.n	80042dc <_GLOBAL__sub_I__ZN9__gnu_cxx9__freeresEv+0x18>
 80042e8:	20000444 	.word	0x20000444

080042ec <__cxa_end_cleanup>:
 80042ec:	b41e      	push	{r1, r2, r3, r4}
 80042ee:	f000 f89c 	bl	800442a <__gnu_end_cleanup>
 80042f2:	bc1e      	pop	{r1, r2, r3, r4}
 80042f4:	f7fc fcec 	bl	8000cd0 <_Unwind_Resume>

080042f8 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>:
 80042f8:	7803      	ldrb	r3, [r0, #0]
 80042fa:	2b47      	cmp	r3, #71	; 0x47
 80042fc:	d117      	bne.n	800432e <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 80042fe:	7843      	ldrb	r3, [r0, #1]
 8004300:	2b4e      	cmp	r3, #78	; 0x4e
 8004302:	d114      	bne.n	800432e <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8004304:	7883      	ldrb	r3, [r0, #2]
 8004306:	2b55      	cmp	r3, #85	; 0x55
 8004308:	d111      	bne.n	800432e <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 800430a:	78c3      	ldrb	r3, [r0, #3]
 800430c:	2b43      	cmp	r3, #67	; 0x43
 800430e:	d10e      	bne.n	800432e <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8004310:	7903      	ldrb	r3, [r0, #4]
 8004312:	2b43      	cmp	r3, #67	; 0x43
 8004314:	d10b      	bne.n	800432e <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8004316:	7943      	ldrb	r3, [r0, #5]
 8004318:	2b2b      	cmp	r3, #43	; 0x2b
 800431a:	d108      	bne.n	800432e <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 800431c:	7983      	ldrb	r3, [r0, #6]
 800431e:	2b2b      	cmp	r3, #43	; 0x2b
 8004320:	d105      	bne.n	800432e <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8004322:	79c0      	ldrb	r0, [r0, #7]
 8004324:	2801      	cmp	r0, #1
 8004326:	bf8c      	ite	hi
 8004328:	2000      	movhi	r0, #0
 800432a:	2001      	movls	r0, #1
 800432c:	4770      	bx	lr
 800432e:	2000      	movs	r0, #0
 8004330:	4770      	bx	lr
	...

08004334 <__cxa_type_match>:
 8004334:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8004338:	461d      	mov	r5, r3
 800433a:	7803      	ldrb	r3, [r0, #0]
 800433c:	2b47      	cmp	r3, #71	; 0x47
 800433e:	460e      	mov	r6, r1
 8004340:	4602      	mov	r2, r0
 8004342:	79c1      	ldrb	r1, [r0, #7]
 8004344:	d113      	bne.n	800436e <__cxa_type_match+0x3a>
 8004346:	7843      	ldrb	r3, [r0, #1]
 8004348:	2b4e      	cmp	r3, #78	; 0x4e
 800434a:	d110      	bne.n	800436e <__cxa_type_match+0x3a>
 800434c:	7883      	ldrb	r3, [r0, #2]
 800434e:	2b55      	cmp	r3, #85	; 0x55
 8004350:	d10d      	bne.n	800436e <__cxa_type_match+0x3a>
 8004352:	78c3      	ldrb	r3, [r0, #3]
 8004354:	2b43      	cmp	r3, #67	; 0x43
 8004356:	d10a      	bne.n	800436e <__cxa_type_match+0x3a>
 8004358:	7903      	ldrb	r3, [r0, #4]
 800435a:	2b46      	cmp	r3, #70	; 0x46
 800435c:	d107      	bne.n	800436e <__cxa_type_match+0x3a>
 800435e:	7943      	ldrb	r3, [r0, #5]
 8004360:	2b4f      	cmp	r3, #79	; 0x4f
 8004362:	d104      	bne.n	800436e <__cxa_type_match+0x3a>
 8004364:	7983      	ldrb	r3, [r0, #6]
 8004366:	2b52      	cmp	r3, #82	; 0x52
 8004368:	d101      	bne.n	800436e <__cxa_type_match+0x3a>
 800436a:	2900      	cmp	r1, #0
 800436c:	d031      	beq.n	80043d2 <__cxa_type_match+0x9e>
 800436e:	4610      	mov	r0, r2
 8004370:	f7ff ffc2 	bl	80042f8 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 8004374:	f080 0001 	eor.w	r0, r0, #1
 8004378:	b2c4      	uxtb	r4, r0
 800437a:	2300      	movs	r3, #0
 800437c:	2000      	movs	r0, #0
 800437e:	9001      	str	r0, [sp, #4]
 8004380:	bb53      	cbnz	r3, 80043d8 <__cxa_type_match+0xa4>
 8004382:	bb5c      	cbnz	r4, 80043dc <__cxa_type_match+0xa8>
 8004384:	2901      	cmp	r1, #1
 8004386:	bf0a      	itet	eq
 8004388:	f852 3c20 	ldreq.w	r3, [r2, #-32]
 800438c:	f1a2 0320 	subne.w	r3, r2, #32
 8004390:	3b78      	subeq	r3, #120	; 0x78
 8004392:	2901      	cmp	r1, #1
 8004394:	bf08      	it	eq
 8004396:	f852 2c20 	ldreq.w	r2, [r2, #-32]
 800439a:	681c      	ldr	r4, [r3, #0]
 800439c:	bf18      	it	ne
 800439e:	3258      	addne	r2, #88	; 0x58
 80043a0:	9201      	str	r2, [sp, #4]
 80043a2:	6823      	ldr	r3, [r4, #0]
 80043a4:	4620      	mov	r0, r4
 80043a6:	689b      	ldr	r3, [r3, #8]
 80043a8:	4798      	blx	r3
 80043aa:	b1c8      	cbz	r0, 80043e0 <__cxa_type_match+0xac>
 80043ac:	9b01      	ldr	r3, [sp, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	9301      	str	r3, [sp, #4]
 80043b2:	2702      	movs	r7, #2
 80043b4:	6833      	ldr	r3, [r6, #0]
 80043b6:	aa01      	add	r2, sp, #4
 80043b8:	f8d3 8010 	ldr.w	r8, [r3, #16]
 80043bc:	4621      	mov	r1, r4
 80043be:	2301      	movs	r3, #1
 80043c0:	4630      	mov	r0, r6
 80043c2:	47c0      	blx	r8
 80043c4:	b170      	cbz	r0, 80043e4 <__cxa_type_match+0xb0>
 80043c6:	9b01      	ldr	r3, [sp, #4]
 80043c8:	602b      	str	r3, [r5, #0]
 80043ca:	4638      	mov	r0, r7
 80043cc:	b002      	add	sp, #8
 80043ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80043d2:	2301      	movs	r3, #1
 80043d4:	460c      	mov	r4, r1
 80043d6:	e7d1      	b.n	800437c <__cxa_type_match+0x48>
 80043d8:	4c03      	ldr	r4, [pc, #12]	; (80043e8 <__cxa_type_match+0xb4>)
 80043da:	e7e2      	b.n	80043a2 <__cxa_type_match+0x6e>
 80043dc:	4c03      	ldr	r4, [pc, #12]	; (80043ec <__cxa_type_match+0xb8>)
 80043de:	e7e0      	b.n	80043a2 <__cxa_type_match+0x6e>
 80043e0:	2701      	movs	r7, #1
 80043e2:	e7e7      	b.n	80043b4 <__cxa_type_match+0x80>
 80043e4:	4607      	mov	r7, r0
 80043e6:	e7f0      	b.n	80043ca <__cxa_type_match+0x96>
 80043e8:	080050c8 	.word	0x080050c8
 80043ec:	080050d0 	.word	0x080050d0

080043f0 <__cxa_begin_cleanup>:
 80043f0:	b510      	push	{r4, lr}
 80043f2:	4604      	mov	r4, r0
 80043f4:	f000 f878 	bl	80044e8 <__cxa_get_globals>
 80043f8:	4602      	mov	r2, r0
 80043fa:	4620      	mov	r0, r4
 80043fc:	f1a4 0120 	sub.w	r1, r4, #32
 8004400:	f7ff ff7a 	bl	80042f8 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 8004404:	b160      	cbz	r0, 8004420 <__cxa_begin_cleanup+0x30>
 8004406:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800440a:	3301      	adds	r3, #1
 800440c:	2b01      	cmp	r3, #1
 800440e:	f844 3c04 	str.w	r3, [r4, #-4]
 8004412:	d103      	bne.n	800441c <__cxa_begin_cleanup+0x2c>
 8004414:	6893      	ldr	r3, [r2, #8]
 8004416:	f844 3c08 	str.w	r3, [r4, #-8]
 800441a:	6091      	str	r1, [r2, #8]
 800441c:	2001      	movs	r0, #1
 800441e:	bd10      	pop	{r4, pc}
 8004420:	6893      	ldr	r3, [r2, #8]
 8004422:	2b00      	cmp	r3, #0
 8004424:	d0f9      	beq.n	800441a <__cxa_begin_cleanup+0x2a>
 8004426:	f000 faeb 	bl	8004a00 <_ZSt9terminatev>

0800442a <__gnu_end_cleanup>:
 800442a:	b510      	push	{r4, lr}
 800442c:	f000 f85c 	bl	80044e8 <__cxa_get_globals>
 8004430:	6882      	ldr	r2, [r0, #8]
 8004432:	4601      	mov	r1, r0
 8004434:	b90a      	cbnz	r2, 800443a <__gnu_end_cleanup+0x10>
 8004436:	f000 fae3 	bl	8004a00 <_ZSt9terminatev>
 800443a:	f102 0420 	add.w	r4, r2, #32
 800443e:	4620      	mov	r0, r4
 8004440:	f7ff ff5a 	bl	80042f8 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 8004444:	b140      	cbz	r0, 8004458 <__gnu_end_cleanup+0x2e>
 8004446:	69d3      	ldr	r3, [r2, #28]
 8004448:	3b01      	subs	r3, #1
 800444a:	61d3      	str	r3, [r2, #28]
 800444c:	b913      	cbnz	r3, 8004454 <__gnu_end_cleanup+0x2a>
 800444e:	6990      	ldr	r0, [r2, #24]
 8004450:	6088      	str	r0, [r1, #8]
 8004452:	6193      	str	r3, [r2, #24]
 8004454:	4620      	mov	r0, r4
 8004456:	bd10      	pop	{r4, pc}
 8004458:	6088      	str	r0, [r1, #8]
 800445a:	e7fb      	b.n	8004454 <__gnu_end_cleanup+0x2a>

0800445c <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>:
 800445c:	7803      	ldrb	r3, [r0, #0]
 800445e:	2b47      	cmp	r3, #71	; 0x47
 8004460:	d117      	bne.n	8004492 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8004462:	7843      	ldrb	r3, [r0, #1]
 8004464:	2b4e      	cmp	r3, #78	; 0x4e
 8004466:	d114      	bne.n	8004492 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8004468:	7883      	ldrb	r3, [r0, #2]
 800446a:	2b55      	cmp	r3, #85	; 0x55
 800446c:	d111      	bne.n	8004492 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 800446e:	78c3      	ldrb	r3, [r0, #3]
 8004470:	2b43      	cmp	r3, #67	; 0x43
 8004472:	d10e      	bne.n	8004492 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8004474:	7903      	ldrb	r3, [r0, #4]
 8004476:	2b43      	cmp	r3, #67	; 0x43
 8004478:	d10b      	bne.n	8004492 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 800447a:	7943      	ldrb	r3, [r0, #5]
 800447c:	2b2b      	cmp	r3, #43	; 0x2b
 800447e:	d108      	bne.n	8004492 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8004480:	7983      	ldrb	r3, [r0, #6]
 8004482:	2b2b      	cmp	r3, #43	; 0x2b
 8004484:	d105      	bne.n	8004492 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8004486:	79c0      	ldrb	r0, [r0, #7]
 8004488:	2801      	cmp	r0, #1
 800448a:	bf8c      	ite	hi
 800448c:	2000      	movhi	r0, #0
 800448e:	2001      	movls	r0, #1
 8004490:	4770      	bx	lr
 8004492:	2000      	movs	r0, #0
 8004494:	4770      	bx	lr

08004496 <__cxa_begin_catch>:
 8004496:	b538      	push	{r3, r4, r5, lr}
 8004498:	4604      	mov	r4, r0
 800449a:	f000 f825 	bl	80044e8 <__cxa_get_globals>
 800449e:	6805      	ldr	r5, [r0, #0]
 80044a0:	4602      	mov	r2, r0
 80044a2:	4620      	mov	r0, r4
 80044a4:	f1a4 0120 	sub.w	r1, r4, #32
 80044a8:	f7ff ffd8 	bl	800445c <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 80044ac:	b928      	cbnz	r0, 80044ba <__cxa_begin_catch+0x24>
 80044ae:	b10d      	cbz	r5, 80044b4 <__cxa_begin_catch+0x1e>
 80044b0:	f000 faa6 	bl	8004a00 <_ZSt9terminatev>
 80044b4:	6011      	str	r1, [r2, #0]
 80044b6:	4628      	mov	r0, r5
 80044b8:	bd38      	pop	{r3, r4, r5, pc}
 80044ba:	f854 3c0c 	ldr.w	r3, [r4, #-12]
 80044be:	2b00      	cmp	r3, #0
 80044c0:	bfb4      	ite	lt
 80044c2:	f1c3 0301 	rsblt	r3, r3, #1
 80044c6:	3301      	addge	r3, #1
 80044c8:	f844 3c0c 	str.w	r3, [r4, #-12]
 80044cc:	6853      	ldr	r3, [r2, #4]
 80044ce:	428d      	cmp	r5, r1
 80044d0:	f103 33ff 	add.w	r3, r3, #4294967295
 80044d4:	6053      	str	r3, [r2, #4]
 80044d6:	4620      	mov	r0, r4
 80044d8:	bf1c      	itt	ne
 80044da:	f844 5c10 	strne.w	r5, [r4, #-16]
 80044de:	6011      	strne	r1, [r2, #0]
 80044e0:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80044e2:	f7fc f837 	bl	8000554 <_Unwind_Complete>
 80044e6:	e7e6      	b.n	80044b6 <__cxa_begin_catch+0x20>

080044e8 <__cxa_get_globals>:
 80044e8:	4800      	ldr	r0, [pc, #0]	; (80044ec <__cxa_get_globals+0x4>)
 80044ea:	4770      	bx	lr
 80044ec:	20000454 	.word	0x20000454

080044f0 <_ZL12read_uleb128PKhPm>:
 80044f0:	b530      	push	{r4, r5, lr}
 80044f2:	2300      	movs	r3, #0
 80044f4:	461a      	mov	r2, r3
 80044f6:	f810 5b01 	ldrb.w	r5, [r0], #1
 80044fa:	f005 047f 	and.w	r4, r5, #127	; 0x7f
 80044fe:	4094      	lsls	r4, r2
 8004500:	4323      	orrs	r3, r4
 8004502:	062c      	lsls	r4, r5, #24
 8004504:	f102 0207 	add.w	r2, r2, #7
 8004508:	d4f5      	bmi.n	80044f6 <_ZL12read_uleb128PKhPm+0x6>
 800450a:	600b      	str	r3, [r1, #0]
 800450c:	bd30      	pop	{r4, r5, pc}

0800450e <_ZL12read_sleb128PKhPl>:
 800450e:	b530      	push	{r4, r5, lr}
 8004510:	2300      	movs	r3, #0
 8004512:	461a      	mov	r2, r3
 8004514:	f810 4b01 	ldrb.w	r4, [r0], #1
 8004518:	f004 057f 	and.w	r5, r4, #127	; 0x7f
 800451c:	4095      	lsls	r5, r2
 800451e:	432b      	orrs	r3, r5
 8004520:	0625      	lsls	r5, r4, #24
 8004522:	f102 0207 	add.w	r2, r2, #7
 8004526:	d4f5      	bmi.n	8004514 <_ZL12read_sleb128PKhPl+0x6>
 8004528:	2a1f      	cmp	r2, #31
 800452a:	d806      	bhi.n	800453a <_ZL12read_sleb128PKhPl+0x2c>
 800452c:	0664      	lsls	r4, r4, #25
 800452e:	bf42      	ittt	mi
 8004530:	f04f 34ff 	movmi.w	r4, #4294967295
 8004534:	fa04 f202 	lslmi.w	r2, r4, r2
 8004538:	4313      	orrmi	r3, r2
 800453a:	600b      	str	r3, [r1, #0]
 800453c:	bd30      	pop	{r4, r5, pc}

0800453e <_ZL28read_encoded_value_with_basehjPKhPj>:
 800453e:	2850      	cmp	r0, #80	; 0x50
 8004540:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8004544:	4606      	mov	r6, r0
 8004546:	4688      	mov	r8, r1
 8004548:	4615      	mov	r5, r2
 800454a:	461f      	mov	r7, r3
 800454c:	d108      	bne.n	8004560 <_ZL28read_encoded_value_with_basehjPKhPj+0x22>
 800454e:	3203      	adds	r2, #3
 8004550:	f022 0003 	bic.w	r0, r2, #3
 8004554:	f850 4b04 	ldr.w	r4, [r0], #4
 8004558:	603c      	str	r4, [r7, #0]
 800455a:	b002      	add	sp, #8
 800455c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004560:	f000 030f 	and.w	r3, r0, #15
 8004564:	2b0c      	cmp	r3, #12
 8004566:	d82e      	bhi.n	80045c6 <_ZL28read_encoded_value_with_basehjPKhPj+0x88>
 8004568:	e8df f003 	tbb	[pc, r3]
 800456c:	251d0725 	.word	0x251d0725
 8004570:	2d2d2d29 	.word	0x2d2d2d29
 8004574:	2521182d 	.word	0x2521182d
 8004578:	29          	.byte	0x29
 8004579:	00          	.byte	0x00
 800457a:	a901      	add	r1, sp, #4
 800457c:	4628      	mov	r0, r5
 800457e:	f7ff ffb7 	bl	80044f0 <_ZL12read_uleb128PKhPm>
 8004582:	9c01      	ldr	r4, [sp, #4]
 8004584:	2c00      	cmp	r4, #0
 8004586:	d0e7      	beq.n	8004558 <_ZL28read_encoded_value_with_basehjPKhPj+0x1a>
 8004588:	f006 0370 	and.w	r3, r6, #112	; 0x70
 800458c:	2b10      	cmp	r3, #16
 800458e:	bf08      	it	eq
 8004590:	46a8      	moveq	r8, r5
 8004592:	4444      	add	r4, r8
 8004594:	0633      	lsls	r3, r6, #24
 8004596:	bf48      	it	mi
 8004598:	6824      	ldrmi	r4, [r4, #0]
 800459a:	e7dd      	b.n	8004558 <_ZL28read_encoded_value_with_basehjPKhPj+0x1a>
 800459c:	a901      	add	r1, sp, #4
 800459e:	4628      	mov	r0, r5
 80045a0:	f7ff ffb5 	bl	800450e <_ZL12read_sleb128PKhPl>
 80045a4:	e7ed      	b.n	8004582 <_ZL28read_encoded_value_with_basehjPKhPj+0x44>
 80045a6:	4628      	mov	r0, r5
 80045a8:	f830 4b02 	ldrh.w	r4, [r0], #2
 80045ac:	e7ea      	b.n	8004584 <_ZL28read_encoded_value_with_basehjPKhPj+0x46>
 80045ae:	4628      	mov	r0, r5
 80045b0:	f930 4b02 	ldrsh.w	r4, [r0], #2
 80045b4:	e7e6      	b.n	8004584 <_ZL28read_encoded_value_with_basehjPKhPj+0x46>
 80045b6:	4628      	mov	r0, r5
 80045b8:	f850 4b04 	ldr.w	r4, [r0], #4
 80045bc:	e7e2      	b.n	8004584 <_ZL28read_encoded_value_with_basehjPKhPj+0x46>
 80045be:	4628      	mov	r0, r5
 80045c0:	f850 4b08 	ldr.w	r4, [r0], #8
 80045c4:	e7de      	b.n	8004584 <_ZL28read_encoded_value_with_basehjPKhPj+0x46>
 80045c6:	f000 fb81 	bl	8004ccc <abort>

080045ca <_ZL21base_of_encoded_valuehP15_Unwind_Context>:
 80045ca:	b508      	push	{r3, lr}
 80045cc:	4603      	mov	r3, r0
 80045ce:	2bff      	cmp	r3, #255	; 0xff
 80045d0:	4608      	mov	r0, r1
 80045d2:	d010      	beq.n	80045f6 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x2c>
 80045d4:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80045d8:	2a30      	cmp	r2, #48	; 0x30
 80045da:	d012      	beq.n	8004602 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x38>
 80045dc:	d807      	bhi.n	80045ee <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x24>
 80045de:	2a20      	cmp	r2, #32
 80045e0:	d00b      	beq.n	80045fa <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x30>
 80045e2:	d802      	bhi.n	80045ea <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x20>
 80045e4:	f013 0f60 	tst.w	r3, #96	; 0x60
 80045e8:	d005      	beq.n	80045f6 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x2c>
 80045ea:	f000 fb6f 	bl	8004ccc <abort>
 80045ee:	2a40      	cmp	r2, #64	; 0x40
 80045f0:	d00b      	beq.n	800460a <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x40>
 80045f2:	2a50      	cmp	r2, #80	; 0x50
 80045f4:	d1f9      	bne.n	80045ea <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x20>
 80045f6:	2000      	movs	r0, #0
 80045f8:	bd08      	pop	{r3, pc}
 80045fa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80045fe:	f000 bcf4 	b.w	8004fea <_Unwind_GetTextRelBase>
 8004602:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8004606:	f000 bced 	b.w	8004fe4 <_Unwind_GetDataRelBase>
 800460a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800460e:	f7fc bd3f 	b.w	8001090 <_Unwind_GetRegionStart>

08004612 <_ZL18read_encoded_valueP15_Unwind_ContexthPKhPj>:
 8004612:	b513      	push	{r0, r1, r4, lr}
 8004614:	460c      	mov	r4, r1
 8004616:	4601      	mov	r1, r0
 8004618:	4620      	mov	r0, r4
 800461a:	e9cd 3200 	strd	r3, r2, [sp]
 800461e:	f7ff ffd4 	bl	80045ca <_ZL21base_of_encoded_valuehP15_Unwind_Context>
 8004622:	e9dd 3200 	ldrd	r3, r2, [sp]
 8004626:	4601      	mov	r1, r0
 8004628:	4620      	mov	r0, r4
 800462a:	b002      	add	sp, #8
 800462c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004630:	f7ff bf85 	b.w	800453e <_ZL28read_encoded_value_with_basehjPKhPj>

08004634 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>:
 8004634:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004636:	460c      	mov	r4, r1
 8004638:	4615      	mov	r5, r2
 800463a:	4606      	mov	r6, r0
 800463c:	b328      	cbz	r0, 800468a <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x56>
 800463e:	f7fc fd27 	bl	8001090 <_Unwind_GetRegionStart>
 8004642:	4603      	mov	r3, r0
 8004644:	4620      	mov	r0, r4
 8004646:	602b      	str	r3, [r5, #0]
 8004648:	f810 1b01 	ldrb.w	r1, [r0], #1
 800464c:	29ff      	cmp	r1, #255	; 0xff
 800464e:	d01e      	beq.n	800468e <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x5a>
 8004650:	4602      	mov	r2, r0
 8004652:	1d2b      	adds	r3, r5, #4
 8004654:	4630      	mov	r0, r6
 8004656:	f7ff ffdc 	bl	8004612 <_ZL18read_encoded_valueP15_Unwind_ContexthPKhPj>
 800465a:	f810 3b01 	ldrb.w	r3, [r0], #1
 800465e:	752b      	strb	r3, [r5, #20]
 8004660:	2bff      	cmp	r3, #255	; 0xff
 8004662:	d016      	beq.n	8004692 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x5e>
 8004664:	2310      	movs	r3, #16
 8004666:	752b      	strb	r3, [r5, #20]
 8004668:	a901      	add	r1, sp, #4
 800466a:	f7ff ff41 	bl	80044f0 <_ZL12read_uleb128PKhPm>
 800466e:	9b01      	ldr	r3, [sp, #4]
 8004670:	4403      	add	r3, r0
 8004672:	60eb      	str	r3, [r5, #12]
 8004674:	f810 3b01 	ldrb.w	r3, [r0], #1
 8004678:	756b      	strb	r3, [r5, #21]
 800467a:	a901      	add	r1, sp, #4
 800467c:	f7ff ff38 	bl	80044f0 <_ZL12read_uleb128PKhPm>
 8004680:	9b01      	ldr	r3, [sp, #4]
 8004682:	4403      	add	r3, r0
 8004684:	612b      	str	r3, [r5, #16]
 8004686:	b002      	add	sp, #8
 8004688:	bd70      	pop	{r4, r5, r6, pc}
 800468a:	4603      	mov	r3, r0
 800468c:	e7da      	b.n	8004644 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x10>
 800468e:	606b      	str	r3, [r5, #4]
 8004690:	e7e3      	b.n	800465a <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x26>
 8004692:	2300      	movs	r3, #0
 8004694:	e7ed      	b.n	8004672 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x3e>

08004696 <_Unwind_GetGR>:
 8004696:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8004698:	ab03      	add	r3, sp, #12
 800469a:	9300      	str	r3, [sp, #0]
 800469c:	2300      	movs	r3, #0
 800469e:	460a      	mov	r2, r1
 80046a0:	4619      	mov	r1, r3
 80046a2:	f7fb ff5f 	bl	8000564 <_Unwind_VRS_Get>
 80046a6:	9803      	ldr	r0, [sp, #12]
 80046a8:	b005      	add	sp, #20
 80046aa:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080046b0 <__gxx_personality_v0>:
 80046b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80046b4:	b091      	sub	sp, #68	; 0x44
 80046b6:	2300      	movs	r3, #0
 80046b8:	9305      	str	r3, [sp, #20]
 80046ba:	f000 0303 	and.w	r3, r0, #3
 80046be:	2b01      	cmp	r3, #1
 80046c0:	4606      	mov	r6, r0
 80046c2:	460c      	mov	r4, r1
 80046c4:	4617      	mov	r7, r2
 80046c6:	d00e      	beq.n	80046e6 <__gxx_personality_v0+0x36>
 80046c8:	2b02      	cmp	r3, #2
 80046ca:	d003      	beq.n	80046d4 <__gxx_personality_v0+0x24>
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d13b      	bne.n	8004748 <__gxx_personality_v0+0x98>
 80046d0:	0701      	lsls	r1, r0, #28
 80046d2:	d53b      	bpl.n	800474c <__gxx_personality_v0+0x9c>
 80046d4:	4639      	mov	r1, r7
 80046d6:	4620      	mov	r0, r4
 80046d8:	f7fc fcc4 	bl	8001064 <__gnu_unwind_frame>
 80046dc:	b390      	cbz	r0, 8004744 <__gxx_personality_v0+0x94>
 80046de:	2009      	movs	r0, #9
 80046e0:	b011      	add	sp, #68	; 0x44
 80046e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80046e6:	0702      	lsls	r2, r0, #28
 80046e8:	d406      	bmi.n	80046f8 <__gxx_personality_v0+0x48>
 80046ea:	6a0d      	ldr	r5, [r1, #32]
 80046ec:	4638      	mov	r0, r7
 80046ee:	210d      	movs	r1, #13
 80046f0:	f7ff ffd1 	bl	8004696 <_Unwind_GetGR>
 80046f4:	4285      	cmp	r5, r0
 80046f6:	d02b      	beq.n	8004750 <__gxx_personality_v0+0xa0>
 80046f8:	2002      	movs	r0, #2
 80046fa:	2300      	movs	r3, #0
 80046fc:	f006 0608 	and.w	r6, r6, #8
 8004700:	f10d 0a28 	add.w	sl, sp, #40	; 0x28
 8004704:	4306      	orrs	r6, r0
 8004706:	f8cd a000 	str.w	sl, [sp]
 800470a:	220c      	movs	r2, #12
 800470c:	4619      	mov	r1, r3
 800470e:	4638      	mov	r0, r7
 8004710:	940a      	str	r4, [sp, #40]	; 0x28
 8004712:	f7fb ff4d 	bl	80005b0 <_Unwind_VRS_Set>
 8004716:	2e06      	cmp	r6, #6
 8004718:	d11c      	bne.n	8004754 <__gxx_personality_v0+0xa4>
 800471a:	f8d4 8030 	ldr.w	r8, [r4, #48]	; 0x30
 800471e:	e9d4 590a 	ldrd	r5, r9, [r4, #40]	; 0x28
 8004722:	f1b8 0f00 	cmp.w	r8, #0
 8004726:	bf0c      	ite	eq
 8004728:	f04f 0b01 	moveq.w	fp, #1
 800472c:	f04f 0b03 	movne.w	fp, #3
 8004730:	f016 0608 	ands.w	r6, r6, #8
 8004734:	f000 8107 	beq.w	8004946 <__gxx_personality_v0+0x296>
 8004738:	f1bb 0f01 	cmp.w	fp, #1
 800473c:	f040 80ff 	bne.w	800493e <__gxx_personality_v0+0x28e>
 8004740:	f000 f95e 	bl	8004a00 <_ZSt9terminatev>
 8004744:	2008      	movs	r0, #8
 8004746:	e7cb      	b.n	80046e0 <__gxx_personality_v0+0x30>
 8004748:	f000 fac0 	bl	8004ccc <abort>
 800474c:	2001      	movs	r0, #1
 800474e:	e7d4      	b.n	80046fa <__gxx_personality_v0+0x4a>
 8004750:	2006      	movs	r0, #6
 8004752:	e7d2      	b.n	80046fa <__gxx_personality_v0+0x4a>
 8004754:	4638      	mov	r0, r7
 8004756:	f7fc fca1 	bl	800109c <_Unwind_GetLanguageSpecificData>
 800475a:	4681      	mov	r9, r0
 800475c:	2800      	cmp	r0, #0
 800475e:	d0b9      	beq.n	80046d4 <__gxx_personality_v0+0x24>
 8004760:	4652      	mov	r2, sl
 8004762:	4601      	mov	r1, r0
 8004764:	4638      	mov	r0, r7
 8004766:	f7ff ff65 	bl	8004634 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
 800476a:	4639      	mov	r1, r7
 800476c:	4605      	mov	r5, r0
 800476e:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
 8004772:	f7ff ff2a 	bl	80045ca <_ZL21base_of_encoded_valuehP15_Unwind_Context>
 8004776:	210f      	movs	r1, #15
 8004778:	900c      	str	r0, [sp, #48]	; 0x30
 800477a:	4638      	mov	r0, r7
 800477c:	f7ff ff8b 	bl	8004696 <_Unwind_GetGR>
 8004780:	f020 0801 	bic.w	r8, r0, #1
 8004784:	f108 38ff 	add.w	r8, r8, #4294967295
 8004788:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800478a:	42ab      	cmp	r3, r5
 800478c:	f240 80bf 	bls.w	800490e <__gxx_personality_v0+0x25e>
 8004790:	462a      	mov	r2, r5
 8004792:	f89d 103d 	ldrb.w	r1, [sp, #61]	; 0x3d
 8004796:	ab06      	add	r3, sp, #24
 8004798:	2000      	movs	r0, #0
 800479a:	f7ff ff3a 	bl	8004612 <_ZL18read_encoded_valueP15_Unwind_ContexthPKhPj>
 800479e:	f89d 103d 	ldrb.w	r1, [sp, #61]	; 0x3d
 80047a2:	4602      	mov	r2, r0
 80047a4:	ab07      	add	r3, sp, #28
 80047a6:	2000      	movs	r0, #0
 80047a8:	f7ff ff33 	bl	8004612 <_ZL18read_encoded_valueP15_Unwind_ContexthPKhPj>
 80047ac:	ab08      	add	r3, sp, #32
 80047ae:	4602      	mov	r2, r0
 80047b0:	f89d 103d 	ldrb.w	r1, [sp, #61]	; 0x3d
 80047b4:	2000      	movs	r0, #0
 80047b6:	f7ff ff2c 	bl	8004612 <_ZL18read_encoded_valueP15_Unwind_ContexthPKhPj>
 80047ba:	a909      	add	r1, sp, #36	; 0x24
 80047bc:	f7ff fe98 	bl	80044f0 <_ZL12read_uleb128PKhPm>
 80047c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80047c2:	9a06      	ldr	r2, [sp, #24]
 80047c4:	4413      	add	r3, r2
 80047c6:	4543      	cmp	r3, r8
 80047c8:	4605      	mov	r5, r0
 80047ca:	d901      	bls.n	80047d0 <__gxx_personality_v0+0x120>
 80047cc:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 80047ce:	e7db      	b.n	8004788 <__gxx_personality_v0+0xd8>
 80047d0:	9a07      	ldr	r2, [sp, #28]
 80047d2:	4413      	add	r3, r2
 80047d4:	4543      	cmp	r3, r8
 80047d6:	d9d7      	bls.n	8004788 <__gxx_personality_v0+0xd8>
 80047d8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80047dc:	f1b8 0f00 	cmp.w	r8, #0
 80047e0:	d001      	beq.n	80047e6 <__gxx_personality_v0+0x136>
 80047e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80047e4:	4498      	add	r8, r3
 80047e6:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80047e8:	b115      	cbz	r5, 80047f0 <__gxx_personality_v0+0x140>
 80047ea:	980e      	ldr	r0, [sp, #56]	; 0x38
 80047ec:	3d01      	subs	r5, #1
 80047ee:	4405      	add	r5, r0
 80047f0:	f1b8 0f00 	cmp.w	r8, #0
 80047f4:	f43f af6e 	beq.w	80046d4 <__gxx_personality_v0+0x24>
 80047f8:	2d00      	cmp	r5, #0
 80047fa:	f000 80f2 	beq.w	80049e2 <__gxx_personality_v0+0x332>
 80047fe:	f016 0308 	ands.w	r3, r6, #8
 8004802:	9302      	str	r3, [sp, #8]
 8004804:	d034      	beq.n	8004870 <__gxx_personality_v0+0x1c0>
 8004806:	2347      	movs	r3, #71	; 0x47
 8004808:	7023      	strb	r3, [r4, #0]
 800480a:	234e      	movs	r3, #78	; 0x4e
 800480c:	7063      	strb	r3, [r4, #1]
 800480e:	2355      	movs	r3, #85	; 0x55
 8004810:	70a3      	strb	r3, [r4, #2]
 8004812:	2343      	movs	r3, #67	; 0x43
 8004814:	70e3      	strb	r3, [r4, #3]
 8004816:	2346      	movs	r3, #70	; 0x46
 8004818:	7123      	strb	r3, [r4, #4]
 800481a:	234f      	movs	r3, #79	; 0x4f
 800481c:	7163      	strb	r3, [r4, #5]
 800481e:	2352      	movs	r3, #82	; 0x52
 8004820:	71a3      	strb	r3, [r4, #6]
 8004822:	2300      	movs	r3, #0
 8004824:	71e3      	strb	r3, [r4, #7]
 8004826:	f04f 0b00 	mov.w	fp, #0
 800482a:	a907      	add	r1, sp, #28
 800482c:	4628      	mov	r0, r5
 800482e:	f7ff fe6e 	bl	800450e <_ZL12read_sleb128PKhPl>
 8004832:	a908      	add	r1, sp, #32
 8004834:	9003      	str	r0, [sp, #12]
 8004836:	f7ff fe6a 	bl	800450e <_ZL12read_sleb128PKhPl>
 800483a:	9907      	ldr	r1, [sp, #28]
 800483c:	2900      	cmp	r1, #0
 800483e:	d063      	beq.n	8004908 <__gxx_personality_v0+0x258>
 8004840:	dd3a      	ble.n	80048b8 <__gxx_personality_v0+0x208>
 8004842:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
 8004846:	28ff      	cmp	r0, #255	; 0xff
 8004848:	d032      	beq.n	80048b0 <__gxx_personality_v0+0x200>
 800484a:	f000 0307 	and.w	r3, r0, #7
 800484e:	2b04      	cmp	r3, #4
 8004850:	f63f af7a 	bhi.w	8004748 <__gxx_personality_v0+0x98>
 8004854:	a201      	add	r2, pc, #4	; (adr r2, 800485c <__gxx_personality_v0+0x1ac>)
 8004856:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800485a:	bf00      	nop
 800485c:	080048b5 	.word	0x080048b5
 8004860:	08004749 	.word	0x08004749
 8004864:	08004883 	.word	0x08004883
 8004868:	080048b5 	.word	0x080048b5
 800486c:	080048ad 	.word	0x080048ad
 8004870:	79e3      	ldrb	r3, [r4, #7]
 8004872:	2b01      	cmp	r3, #1
 8004874:	bf0c      	ite	eq
 8004876:	f854 3c20 	ldreq.w	r3, [r4, #-32]
 800487a:	f104 0358 	addne.w	r3, r4, #88	; 0x58
 800487e:	9305      	str	r3, [sp, #20]
 8004880:	e7d1      	b.n	8004826 <__gxx_personality_v0+0x176>
 8004882:	2502      	movs	r5, #2
 8004884:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8004886:	ab09      	add	r3, sp, #36	; 0x24
 8004888:	fb05 2211 	mls	r2, r5, r1, r2
 800488c:	990c      	ldr	r1, [sp, #48]	; 0x30
 800488e:	f7ff fe56 	bl	800453e <_ZL28read_encoded_value_with_basehjPKhPj>
 8004892:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004894:	b131      	cbz	r1, 80048a4 <__gxx_personality_v0+0x1f4>
 8004896:	b35c      	cbz	r4, 80048f0 <__gxx_personality_v0+0x240>
 8004898:	ab05      	add	r3, sp, #20
 800489a:	2200      	movs	r2, #0
 800489c:	4620      	mov	r0, r4
 800489e:	f7ff fd49 	bl	8004334 <__cxa_type_match>
 80048a2:	b328      	cbz	r0, 80048f0 <__gxx_personality_v0+0x240>
 80048a4:	9d07      	ldr	r5, [sp, #28]
 80048a6:	f04f 0b03 	mov.w	fp, #3
 80048aa:	e034      	b.n	8004916 <__gxx_personality_v0+0x266>
 80048ac:	2508      	movs	r5, #8
 80048ae:	e7e9      	b.n	8004884 <__gxx_personality_v0+0x1d4>
 80048b0:	2500      	movs	r5, #0
 80048b2:	e7e7      	b.n	8004884 <__gxx_personality_v0+0x1d4>
 80048b4:	2504      	movs	r5, #4
 80048b6:	e7e5      	b.n	8004884 <__gxx_personality_v0+0x1d4>
 80048b8:	f1c1 517f 	rsb	r1, r1, #1069547520	; 0x3fc00000
 80048bc:	f501 117f 	add.w	r1, r1, #4177920	; 0x3fc000
 80048c0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80048c2:	f501 517f 	add.w	r1, r1, #16320	; 0x3fc0
 80048c6:	313f      	adds	r1, #63	; 0x3f
 80048c8:	eb03 0581 	add.w	r5, r3, r1, lsl #2
 80048cc:	b1bc      	cbz	r4, 80048fe <__gxx_personality_v0+0x24e>
 80048ce:	9a02      	ldr	r2, [sp, #8]
 80048d0:	b9aa      	cbnz	r2, 80048fe <__gxx_personality_v0+0x24e>
 80048d2:	9b05      	ldr	r3, [sp, #20]
 80048d4:	9309      	str	r3, [sp, #36]	; 0x24
 80048d6:	3d04      	subs	r5, #4
 80048d8:	f855 1f04 	ldr.w	r1, [r5, #4]!
 80048dc:	2900      	cmp	r1, #0
 80048de:	d0e1      	beq.n	80048a4 <__gxx_personality_v0+0x1f4>
 80048e0:	ab09      	add	r3, sp, #36	; 0x24
 80048e2:	2200      	movs	r2, #0
 80048e4:	4429      	add	r1, r5
 80048e6:	4620      	mov	r0, r4
 80048e8:	f7ff fd24 	bl	8004334 <__cxa_type_match>
 80048ec:	2800      	cmp	r0, #0
 80048ee:	d0f3      	beq.n	80048d8 <__gxx_personality_v0+0x228>
 80048f0:	9d08      	ldr	r5, [sp, #32]
 80048f2:	2d00      	cmp	r5, #0
 80048f4:	d071      	beq.n	80049da <__gxx_personality_v0+0x32a>
 80048f6:	9b03      	ldr	r3, [sp, #12]
 80048f8:	442b      	add	r3, r5
 80048fa:	461d      	mov	r5, r3
 80048fc:	e795      	b.n	800482a <__gxx_personality_v0+0x17a>
 80048fe:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8004902:	2b00      	cmp	r3, #0
 8004904:	d1f4      	bne.n	80048f0 <__gxx_personality_v0+0x240>
 8004906:	e7cd      	b.n	80048a4 <__gxx_personality_v0+0x1f4>
 8004908:	f04f 0b01 	mov.w	fp, #1
 800490c:	e7f0      	b.n	80048f0 <__gxx_personality_v0+0x240>
 800490e:	2500      	movs	r5, #0
 8004910:	46a8      	mov	r8, r5
 8004912:	f04f 0b01 	mov.w	fp, #1
 8004916:	07f3      	lsls	r3, r6, #31
 8004918:	f57f af0a 	bpl.w	8004730 <__gxx_personality_v0+0x80>
 800491c:	f1bb 0f02 	cmp.w	fp, #2
 8004920:	f43f aed8 	beq.w	80046d4 <__gxx_personality_v0+0x24>
 8004924:	210d      	movs	r1, #13
 8004926:	4638      	mov	r0, r7
 8004928:	9e05      	ldr	r6, [sp, #20]
 800492a:	f7ff feb4 	bl	8004696 <_Unwind_GetGR>
 800492e:	e9c4 590a 	strd	r5, r9, [r4, #40]	; 0x28
 8004932:	e9c4 0608 	strd	r0, r6, [r4, #32]
 8004936:	f8c4 8030 	str.w	r8, [r4, #48]	; 0x30
 800493a:	2006      	movs	r0, #6
 800493c:	e6d0      	b.n	80046e0 <__gxx_personality_v0+0x30>
 800493e:	2d00      	cmp	r5, #0
 8004940:	da22      	bge.n	8004988 <__gxx_personality_v0+0x2d8>
 8004942:	f000 f86f 	bl	8004a24 <_ZSt10unexpectedv>
 8004946:	f1bb 0f01 	cmp.w	fp, #1
 800494a:	d102      	bne.n	8004952 <__gxx_personality_v0+0x2a2>
 800494c:	4620      	mov	r0, r4
 800494e:	f000 f99a 	bl	8004c86 <__cxa_call_terminate>
 8004952:	2d00      	cmp	r5, #0
 8004954:	da18      	bge.n	8004988 <__gxx_personality_v0+0x2d8>
 8004956:	4652      	mov	r2, sl
 8004958:	4649      	mov	r1, r9
 800495a:	4638      	mov	r0, r7
 800495c:	f7ff fe6a 	bl	8004634 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
 8004960:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
 8004964:	4639      	mov	r1, r7
 8004966:	f7ff fe30 	bl	80045ca <_ZL21base_of_encoded_valuehP15_Unwind_Context>
 800496a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800496c:	900c      	str	r0, [sp, #48]	; 0x30
 800496e:	43eb      	mvns	r3, r5
 8004970:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8004974:	f853 2026 	ldr.w	r2, [r3, r6, lsl #2]
 8004978:	b10a      	cbz	r2, 800497e <__gxx_personality_v0+0x2ce>
 800497a:	3601      	adds	r6, #1
 800497c:	e7fa      	b.n	8004974 <__gxx_personality_v0+0x2c4>
 800497e:	2204      	movs	r2, #4
 8004980:	e9c4 600a 	strd	r6, r0, [r4, #40]	; 0x28
 8004984:	e9c4 230c 	strd	r2, r3, [r4, #48]	; 0x30
 8004988:	2300      	movs	r3, #0
 800498a:	ae09      	add	r6, sp, #36	; 0x24
 800498c:	461a      	mov	r2, r3
 800498e:	4619      	mov	r1, r3
 8004990:	9600      	str	r6, [sp, #0]
 8004992:	4638      	mov	r0, r7
 8004994:	9409      	str	r4, [sp, #36]	; 0x24
 8004996:	f7fb fe0b 	bl	80005b0 <_Unwind_VRS_Set>
 800499a:	2300      	movs	r3, #0
 800499c:	4619      	mov	r1, r3
 800499e:	2201      	movs	r2, #1
 80049a0:	9600      	str	r6, [sp, #0]
 80049a2:	4638      	mov	r0, r7
 80049a4:	9509      	str	r5, [sp, #36]	; 0x24
 80049a6:	f7fb fe03 	bl	80005b0 <_Unwind_VRS_Set>
 80049aa:	210f      	movs	r1, #15
 80049ac:	4638      	mov	r0, r7
 80049ae:	f7ff fe72 	bl	8004696 <_Unwind_GetGR>
 80049b2:	f000 0001 	and.w	r0, r0, #1
 80049b6:	ea40 0008 	orr.w	r0, r0, r8
 80049ba:	2300      	movs	r3, #0
 80049bc:	9009      	str	r0, [sp, #36]	; 0x24
 80049be:	9600      	str	r6, [sp, #0]
 80049c0:	220f      	movs	r2, #15
 80049c2:	4619      	mov	r1, r3
 80049c4:	4638      	mov	r0, r7
 80049c6:	f7fb fdf3 	bl	80005b0 <_Unwind_VRS_Set>
 80049ca:	f1bb 0f02 	cmp.w	fp, #2
 80049ce:	d102      	bne.n	80049d6 <__gxx_personality_v0+0x326>
 80049d0:	4620      	mov	r0, r4
 80049d2:	f7ff fd0d 	bl	80043f0 <__cxa_begin_cleanup>
 80049d6:	2007      	movs	r0, #7
 80049d8:	e682      	b.n	80046e0 <__gxx_personality_v0+0x30>
 80049da:	f1bb 0f00 	cmp.w	fp, #0
 80049de:	f43f ae79 	beq.w	80046d4 <__gxx_personality_v0+0x24>
 80049e2:	f04f 0b02 	mov.w	fp, #2
 80049e6:	e796      	b.n	8004916 <__gxx_personality_v0+0x266>

080049e8 <_ZN10__cxxabiv111__terminateEPFvvE>:
 80049e8:	b508      	push	{r3, lr}
 80049ea:	4780      	blx	r0
 80049ec:	f000 f96e 	bl	8004ccc <abort>

080049f0 <_ZSt13get_terminatev>:
 80049f0:	4b02      	ldr	r3, [pc, #8]	; (80049fc <_ZSt13get_terminatev+0xc>)
 80049f2:	6818      	ldr	r0, [r3, #0]
 80049f4:	f3bf 8f5b 	dmb	ish
 80049f8:	4770      	bx	lr
 80049fa:	bf00      	nop
 80049fc:	20000010 	.word	0x20000010

08004a00 <_ZSt9terminatev>:
 8004a00:	b508      	push	{r3, lr}
 8004a02:	f7ff fff5 	bl	80049f0 <_ZSt13get_terminatev>
 8004a06:	f7ff ffef 	bl	80049e8 <_ZN10__cxxabiv111__terminateEPFvvE>

08004a0a <_ZN10__cxxabiv112__unexpectedEPFvvE>:
 8004a0a:	b508      	push	{r3, lr}
 8004a0c:	4780      	blx	r0
 8004a0e:	f7ff fff7 	bl	8004a00 <_ZSt9terminatev>
	...

08004a14 <_ZSt14get_unexpectedv>:
 8004a14:	4b02      	ldr	r3, [pc, #8]	; (8004a20 <_ZSt14get_unexpectedv+0xc>)
 8004a16:	6818      	ldr	r0, [r3, #0]
 8004a18:	f3bf 8f5b 	dmb	ish
 8004a1c:	4770      	bx	lr
 8004a1e:	bf00      	nop
 8004a20:	2000000c 	.word	0x2000000c

08004a24 <_ZSt10unexpectedv>:
 8004a24:	b508      	push	{r3, lr}
 8004a26:	f7ff fff5 	bl	8004a14 <_ZSt14get_unexpectedv>
 8004a2a:	f7ff ffee 	bl	8004a0a <_ZN10__cxxabiv112__unexpectedEPFvvE>
	...

08004a30 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
 8004a30:	b510      	push	{r4, lr}
 8004a32:	4b03      	ldr	r3, [pc, #12]	; (8004a40 <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
 8004a34:	6003      	str	r3, [r0, #0]
 8004a36:	4604      	mov	r4, r0
 8004a38:	f000 f8b2 	bl	8004ba0 <_ZN10__cxxabiv117__class_type_infoD1Ev>
 8004a3c:	4620      	mov	r0, r4
 8004a3e:	bd10      	pop	{r4, pc}
 8004a40:	08005158 	.word	0x08005158

08004a44 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
 8004a44:	b510      	push	{r4, lr}
 8004a46:	4604      	mov	r4, r0
 8004a48:	f7ff fff2 	bl	8004a30 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
 8004a4c:	4620      	mov	r0, r4
 8004a4e:	210c      	movs	r1, #12
 8004a50:	f7ff fc36 	bl	80042c0 <_ZdlPvj>
 8004a54:	4620      	mov	r0, r4
 8004a56:	bd10      	pop	{r4, pc}

08004a58 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
 8004a58:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004a5a:	9f08      	ldr	r7, [sp, #32]
 8004a5c:	4297      	cmp	r7, r2
 8004a5e:	4605      	mov	r5, r0
 8004a60:	460e      	mov	r6, r1
 8004a62:	4614      	mov	r4, r2
 8004a64:	d00a      	beq.n	8004a7c <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x24>
 8004a66:	68a8      	ldr	r0, [r5, #8]
 8004a68:	6802      	ldr	r2, [r0, #0]
 8004a6a:	9708      	str	r7, [sp, #32]
 8004a6c:	6a15      	ldr	r5, [r2, #32]
 8004a6e:	4631      	mov	r1, r6
 8004a70:	4622      	mov	r2, r4
 8004a72:	46ac      	mov	ip, r5
 8004a74:	b003      	add	sp, #12
 8004a76:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8004a7a:	4760      	bx	ip
 8004a7c:	4619      	mov	r1, r3
 8004a7e:	9301      	str	r3, [sp, #4]
 8004a80:	f000 f858 	bl	8004b34 <_ZNKSt9type_infoeqERKS_>
 8004a84:	9b01      	ldr	r3, [sp, #4]
 8004a86:	2800      	cmp	r0, #0
 8004a88:	d0ed      	beq.n	8004a66 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
 8004a8a:	2006      	movs	r0, #6
 8004a8c:	b003      	add	sp, #12
 8004a8e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004a90 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
 8004a90:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a94:	460d      	mov	r5, r1
 8004a96:	4619      	mov	r1, r3
 8004a98:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	; 0x28
 8004a9c:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	; 0x30
 8004aa0:	4681      	mov	r9, r0
 8004aa2:	4617      	mov	r7, r2
 8004aa4:	4698      	mov	r8, r3
 8004aa6:	f000 f845 	bl	8004b34 <_ZNKSt9type_infoeqERKS_>
 8004aaa:	b190      	cbz	r0, 8004ad2 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
 8004aac:	2d00      	cmp	r5, #0
 8004aae:	6034      	str	r4, [r6, #0]
 8004ab0:	7137      	strb	r7, [r6, #4]
 8004ab2:	db09      	blt.n	8004ac8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
 8004ab4:	1961      	adds	r1, r4, r5
 8004ab6:	458a      	cmp	sl, r1
 8004ab8:	bf0c      	ite	eq
 8004aba:	2106      	moveq	r1, #6
 8004abc:	2101      	movne	r1, #1
 8004abe:	71b1      	strb	r1, [r6, #6]
 8004ac0:	2000      	movs	r0, #0
 8004ac2:	b001      	add	sp, #4
 8004ac4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ac8:	3502      	adds	r5, #2
 8004aca:	d1f9      	bne.n	8004ac0 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 8004acc:	2301      	movs	r3, #1
 8004ace:	71b3      	strb	r3, [r6, #6]
 8004ad0:	e7f6      	b.n	8004ac0 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 8004ad2:	4554      	cmp	r4, sl
 8004ad4:	d106      	bne.n	8004ae4 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
 8004ad6:	4659      	mov	r1, fp
 8004ad8:	4648      	mov	r0, r9
 8004ada:	f000 f82b 	bl	8004b34 <_ZNKSt9type_infoeqERKS_>
 8004ade:	b108      	cbz	r0, 8004ae4 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
 8004ae0:	7177      	strb	r7, [r6, #5]
 8004ae2:	e7ed      	b.n	8004ac0 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 8004ae4:	f8d9 0008 	ldr.w	r0, [r9, #8]
 8004ae8:	6803      	ldr	r3, [r0, #0]
 8004aea:	e9cd a60c 	strd	sl, r6, [sp, #48]	; 0x30
 8004aee:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	; 0x28
 8004af2:	69dc      	ldr	r4, [r3, #28]
 8004af4:	463a      	mov	r2, r7
 8004af6:	4643      	mov	r3, r8
 8004af8:	4629      	mov	r1, r5
 8004afa:	46a4      	mov	ip, r4
 8004afc:	b001      	add	sp, #4
 8004afe:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b02:	4760      	bx	ip

08004b04 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
 8004b04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004b08:	4607      	mov	r7, r0
 8004b0a:	460c      	mov	r4, r1
 8004b0c:	4615      	mov	r5, r2
 8004b0e:	461e      	mov	r6, r3
 8004b10:	f000 f879 	bl	8004c06 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
 8004b14:	b948      	cbnz	r0, 8004b2a <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
 8004b16:	68b8      	ldr	r0, [r7, #8]
 8004b18:	6803      	ldr	r3, [r0, #0]
 8004b1a:	699f      	ldr	r7, [r3, #24]
 8004b1c:	462a      	mov	r2, r5
 8004b1e:	4633      	mov	r3, r6
 8004b20:	4621      	mov	r1, r4
 8004b22:	46bc      	mov	ip, r7
 8004b24:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004b28:	4760      	bx	ip
 8004b2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08004b2e <_ZNSt9type_infoD1Ev>:
 8004b2e:	4770      	bx	lr

08004b30 <_ZNKSt9type_info14__is_pointer_pEv>:
 8004b30:	2000      	movs	r0, #0
 8004b32:	4770      	bx	lr

08004b34 <_ZNKSt9type_infoeqERKS_>:
 8004b34:	4281      	cmp	r1, r0
 8004b36:	b508      	push	{r3, lr}
 8004b38:	d00e      	beq.n	8004b58 <_ZNKSt9type_infoeqERKS_+0x24>
 8004b3a:	6840      	ldr	r0, [r0, #4]
 8004b3c:	7803      	ldrb	r3, [r0, #0]
 8004b3e:	2b2a      	cmp	r3, #42	; 0x2a
 8004b40:	d00c      	beq.n	8004b5c <_ZNKSt9type_infoeqERKS_+0x28>
 8004b42:	6849      	ldr	r1, [r1, #4]
 8004b44:	780b      	ldrb	r3, [r1, #0]
 8004b46:	2b2a      	cmp	r3, #42	; 0x2a
 8004b48:	bf08      	it	eq
 8004b4a:	3101      	addeq	r1, #1
 8004b4c:	f7fb fb3c 	bl	80001c8 <strcmp>
 8004b50:	fab0 f080 	clz	r0, r0
 8004b54:	0940      	lsrs	r0, r0, #5
 8004b56:	bd08      	pop	{r3, pc}
 8004b58:	2001      	movs	r0, #1
 8004b5a:	e7fc      	b.n	8004b56 <_ZNKSt9type_infoeqERKS_+0x22>
 8004b5c:	2000      	movs	r0, #0
 8004b5e:	e7fa      	b.n	8004b56 <_ZNKSt9type_infoeqERKS_+0x22>

08004b60 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
 8004b60:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8004b62:	2400      	movs	r4, #0
 8004b64:	2310      	movs	r3, #16
 8004b66:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8004b6a:	6803      	ldr	r3, [r0, #0]
 8004b6c:	4615      	mov	r5, r2
 8004b6e:	699e      	ldr	r6, [r3, #24]
 8004b70:	6812      	ldr	r2, [r2, #0]
 8004b72:	466b      	mov	r3, sp
 8004b74:	e9cd 4400 	strd	r4, r4, [sp]
 8004b78:	47b0      	blx	r6
 8004b7a:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8004b7e:	f003 0306 	and.w	r3, r3, #6
 8004b82:	2b06      	cmp	r3, #6
 8004b84:	bf03      	ittte	eq
 8004b86:	9b00      	ldreq	r3, [sp, #0]
 8004b88:	602b      	streq	r3, [r5, #0]
 8004b8a:	2001      	moveq	r0, #1
 8004b8c:	4620      	movne	r0, r4
 8004b8e:	b004      	add	sp, #16
 8004b90:	bd70      	pop	{r4, r5, r6, pc}

08004b92 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
 8004b92:	9800      	ldr	r0, [sp, #0]
 8004b94:	4290      	cmp	r0, r2
 8004b96:	bf14      	ite	ne
 8004b98:	2001      	movne	r0, #1
 8004b9a:	2006      	moveq	r0, #6
 8004b9c:	4770      	bx	lr
	...

08004ba0 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
 8004ba0:	b510      	push	{r4, lr}
 8004ba2:	4b03      	ldr	r3, [pc, #12]	; (8004bb0 <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
 8004ba4:	6003      	str	r3, [r0, #0]
 8004ba6:	4604      	mov	r4, r0
 8004ba8:	f7ff ffc1 	bl	8004b2e <_ZNSt9type_infoD1Ev>
 8004bac:	4620      	mov	r0, r4
 8004bae:	bd10      	pop	{r4, pc}
 8004bb0:	080051cc 	.word	0x080051cc

08004bb4 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
 8004bb4:	b510      	push	{r4, lr}
 8004bb6:	4604      	mov	r4, r0
 8004bb8:	f7ff fff2 	bl	8004ba0 <_ZN10__cxxabiv117__class_type_infoD1Ev>
 8004bbc:	4620      	mov	r0, r4
 8004bbe:	2108      	movs	r1, #8
 8004bc0:	f7ff fb7e 	bl	80042c0 <_ZdlPvj>
 8004bc4:	4620      	mov	r0, r4
 8004bc6:	bd10      	pop	{r4, pc}

08004bc8 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
 8004bc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004bcc:	461f      	mov	r7, r3
 8004bce:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
 8004bd2:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8004bd6:	4598      	cmp	r8, r3
 8004bd8:	4606      	mov	r6, r0
 8004bda:	4615      	mov	r5, r2
 8004bdc:	d107      	bne.n	8004bee <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
 8004bde:	9907      	ldr	r1, [sp, #28]
 8004be0:	f7ff ffa8 	bl	8004b34 <_ZNKSt9type_infoeqERKS_>
 8004be4:	b118      	cbz	r0, 8004bee <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
 8004be6:	7165      	strb	r5, [r4, #5]
 8004be8:	2000      	movs	r0, #0
 8004bea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004bee:	4639      	mov	r1, r7
 8004bf0:	4630      	mov	r0, r6
 8004bf2:	f7ff ff9f 	bl	8004b34 <_ZNKSt9type_infoeqERKS_>
 8004bf6:	2800      	cmp	r0, #0
 8004bf8:	d0f6      	beq.n	8004be8 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
 8004bfa:	2301      	movs	r3, #1
 8004bfc:	f8c4 8000 	str.w	r8, [r4]
 8004c00:	7125      	strb	r5, [r4, #4]
 8004c02:	71a3      	strb	r3, [r4, #6]
 8004c04:	e7f0      	b.n	8004be8 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

08004c06 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
 8004c06:	b538      	push	{r3, r4, r5, lr}
 8004c08:	4615      	mov	r5, r2
 8004c0a:	461c      	mov	r4, r3
 8004c0c:	f7ff ff92 	bl	8004b34 <_ZNKSt9type_infoeqERKS_>
 8004c10:	b120      	cbz	r0, 8004c1c <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
 8004c12:	2308      	movs	r3, #8
 8004c14:	60e3      	str	r3, [r4, #12]
 8004c16:	2306      	movs	r3, #6
 8004c18:	6025      	str	r5, [r4, #0]
 8004c1a:	7123      	strb	r3, [r4, #4]
 8004c1c:	bd38      	pop	{r3, r4, r5, pc}

08004c1e <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
 8004c1e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004c20:	4605      	mov	r5, r0
 8004c22:	460c      	mov	r4, r1
 8004c24:	9201      	str	r2, [sp, #4]
 8004c26:	461e      	mov	r6, r3
 8004c28:	f7ff ff84 	bl	8004b34 <_ZNKSt9type_infoeqERKS_>
 8004c2c:	b950      	cbnz	r0, 8004c44 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
 8004c2e:	2e03      	cmp	r6, #3
 8004c30:	d808      	bhi.n	8004c44 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
 8004c32:	6823      	ldr	r3, [r4, #0]
 8004c34:	9a01      	ldr	r2, [sp, #4]
 8004c36:	695b      	ldr	r3, [r3, #20]
 8004c38:	4629      	mov	r1, r5
 8004c3a:	4620      	mov	r0, r4
 8004c3c:	b002      	add	sp, #8
 8004c3e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8004c42:	4718      	bx	r3
 8004c44:	b002      	add	sp, #8
 8004c46:	bd70      	pop	{r4, r5, r6, pc}

08004c48 <_ZdlPv>:
 8004c48:	f000 b87a 	b.w	8004d40 <free>

08004c4c <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>:
 8004c4c:	7803      	ldrb	r3, [r0, #0]
 8004c4e:	2b47      	cmp	r3, #71	; 0x47
 8004c50:	d117      	bne.n	8004c82 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8004c52:	7843      	ldrb	r3, [r0, #1]
 8004c54:	2b4e      	cmp	r3, #78	; 0x4e
 8004c56:	d114      	bne.n	8004c82 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8004c58:	7883      	ldrb	r3, [r0, #2]
 8004c5a:	2b55      	cmp	r3, #85	; 0x55
 8004c5c:	d111      	bne.n	8004c82 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8004c5e:	78c3      	ldrb	r3, [r0, #3]
 8004c60:	2b43      	cmp	r3, #67	; 0x43
 8004c62:	d10e      	bne.n	8004c82 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8004c64:	7903      	ldrb	r3, [r0, #4]
 8004c66:	2b43      	cmp	r3, #67	; 0x43
 8004c68:	d10b      	bne.n	8004c82 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8004c6a:	7943      	ldrb	r3, [r0, #5]
 8004c6c:	2b2b      	cmp	r3, #43	; 0x2b
 8004c6e:	d108      	bne.n	8004c82 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8004c70:	7983      	ldrb	r3, [r0, #6]
 8004c72:	2b2b      	cmp	r3, #43	; 0x2b
 8004c74:	d105      	bne.n	8004c82 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8004c76:	79c0      	ldrb	r0, [r0, #7]
 8004c78:	2801      	cmp	r0, #1
 8004c7a:	bf8c      	ite	hi
 8004c7c:	2000      	movhi	r0, #0
 8004c7e:	2001      	movls	r0, #1
 8004c80:	4770      	bx	lr
 8004c82:	2000      	movs	r0, #0
 8004c84:	4770      	bx	lr

08004c86 <__cxa_call_terminate>:
 8004c86:	b510      	push	{r4, lr}
 8004c88:	4604      	mov	r4, r0
 8004c8a:	b148      	cbz	r0, 8004ca0 <__cxa_call_terminate+0x1a>
 8004c8c:	f7ff fc03 	bl	8004496 <__cxa_begin_catch>
 8004c90:	4620      	mov	r0, r4
 8004c92:	f7ff ffdb 	bl	8004c4c <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 8004c96:	b118      	cbz	r0, 8004ca0 <__cxa_call_terminate+0x1a>
 8004c98:	f854 0c14 	ldr.w	r0, [r4, #-20]
 8004c9c:	f7ff fea4 	bl	80049e8 <_ZN10__cxxabiv111__terminateEPFvvE>
 8004ca0:	f7ff feae 	bl	8004a00 <_ZSt9terminatev>

08004ca4 <__cxa_call_unexpected>:
 8004ca4:	b538      	push	{r3, r4, r5, lr}
 8004ca6:	4602      	mov	r2, r0
 8004ca8:	f7ff ffd0 	bl	8004c4c <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 8004cac:	4604      	mov	r4, r0
 8004cae:	b140      	cbz	r0, 8004cc2 <__cxa_call_unexpected+0x1e>
 8004cb0:	f852 4c18 	ldr.w	r4, [r2, #-24]
 8004cb4:	2500      	movs	r5, #0
 8004cb6:	4610      	mov	r0, r2
 8004cb8:	f7ff fbed 	bl	8004496 <__cxa_begin_catch>
 8004cbc:	b11d      	cbz	r5, 8004cc6 <__cxa_call_unexpected+0x22>
 8004cbe:	f7ff feb1 	bl	8004a24 <_ZSt10unexpectedv>
 8004cc2:	2501      	movs	r5, #1
 8004cc4:	e7f7      	b.n	8004cb6 <__cxa_call_unexpected+0x12>
 8004cc6:	4620      	mov	r0, r4
 8004cc8:	f7ff fe9f 	bl	8004a0a <_ZN10__cxxabiv112__unexpectedEPFvvE>

08004ccc <abort>:
 8004ccc:	b508      	push	{r3, lr}
 8004cce:	2006      	movs	r0, #6
 8004cd0:	f000 f95e 	bl	8004f90 <raise>
 8004cd4:	2001      	movs	r0, #1
 8004cd6:	f7fc fdaf 	bl	8001838 <_exit>
	...

08004cdc <__errno>:
 8004cdc:	4b01      	ldr	r3, [pc, #4]	; (8004ce4 <__errno+0x8>)
 8004cde:	6818      	ldr	r0, [r3, #0]
 8004ce0:	4770      	bx	lr
 8004ce2:	bf00      	nop
 8004ce4:	20000014 	.word	0x20000014

08004ce8 <__libc_init_array>:
 8004ce8:	b570      	push	{r4, r5, r6, lr}
 8004cea:	4d0d      	ldr	r5, [pc, #52]	; (8004d20 <__libc_init_array+0x38>)
 8004cec:	4c0d      	ldr	r4, [pc, #52]	; (8004d24 <__libc_init_array+0x3c>)
 8004cee:	1b64      	subs	r4, r4, r5
 8004cf0:	10a4      	asrs	r4, r4, #2
 8004cf2:	2600      	movs	r6, #0
 8004cf4:	42a6      	cmp	r6, r4
 8004cf6:	d109      	bne.n	8004d0c <__libc_init_array+0x24>
 8004cf8:	4d0b      	ldr	r5, [pc, #44]	; (8004d28 <__libc_init_array+0x40>)
 8004cfa:	4c0c      	ldr	r4, [pc, #48]	; (8004d2c <__libc_init_array+0x44>)
 8004cfc:	f000 f986 	bl	800500c <_init>
 8004d00:	1b64      	subs	r4, r4, r5
 8004d02:	10a4      	asrs	r4, r4, #2
 8004d04:	2600      	movs	r6, #0
 8004d06:	42a6      	cmp	r6, r4
 8004d08:	d105      	bne.n	8004d16 <__libc_init_array+0x2e>
 8004d0a:	bd70      	pop	{r4, r5, r6, pc}
 8004d0c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d10:	4798      	blx	r3
 8004d12:	3601      	adds	r6, #1
 8004d14:	e7ee      	b.n	8004cf4 <__libc_init_array+0xc>
 8004d16:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d1a:	4798      	blx	r3
 8004d1c:	3601      	adds	r6, #1
 8004d1e:	e7f2      	b.n	8004d06 <__libc_init_array+0x1e>
 8004d20:	08005458 	.word	0x08005458
 8004d24:	08005458 	.word	0x08005458
 8004d28:	08005458 	.word	0x08005458
 8004d2c:	08005460 	.word	0x08005460

08004d30 <malloc>:
 8004d30:	4b02      	ldr	r3, [pc, #8]	; (8004d3c <malloc+0xc>)
 8004d32:	4601      	mov	r1, r0
 8004d34:	6818      	ldr	r0, [r3, #0]
 8004d36:	f000 b87f 	b.w	8004e38 <_malloc_r>
 8004d3a:	bf00      	nop
 8004d3c:	20000014 	.word	0x20000014

08004d40 <free>:
 8004d40:	4b02      	ldr	r3, [pc, #8]	; (8004d4c <free+0xc>)
 8004d42:	4601      	mov	r1, r0
 8004d44:	6818      	ldr	r0, [r3, #0]
 8004d46:	f000 b80b 	b.w	8004d60 <_free_r>
 8004d4a:	bf00      	nop
 8004d4c:	20000014 	.word	0x20000014

08004d50 <memset>:
 8004d50:	4402      	add	r2, r0
 8004d52:	4603      	mov	r3, r0
 8004d54:	4293      	cmp	r3, r2
 8004d56:	d100      	bne.n	8004d5a <memset+0xa>
 8004d58:	4770      	bx	lr
 8004d5a:	f803 1b01 	strb.w	r1, [r3], #1
 8004d5e:	e7f9      	b.n	8004d54 <memset+0x4>

08004d60 <_free_r>:
 8004d60:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004d62:	2900      	cmp	r1, #0
 8004d64:	d044      	beq.n	8004df0 <_free_r+0x90>
 8004d66:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004d6a:	9001      	str	r0, [sp, #4]
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	f1a1 0404 	sub.w	r4, r1, #4
 8004d72:	bfb8      	it	lt
 8004d74:	18e4      	addlt	r4, r4, r3
 8004d76:	f000 f927 	bl	8004fc8 <__malloc_lock>
 8004d7a:	4a1e      	ldr	r2, [pc, #120]	; (8004df4 <_free_r+0x94>)
 8004d7c:	9801      	ldr	r0, [sp, #4]
 8004d7e:	6813      	ldr	r3, [r2, #0]
 8004d80:	b933      	cbnz	r3, 8004d90 <_free_r+0x30>
 8004d82:	6063      	str	r3, [r4, #4]
 8004d84:	6014      	str	r4, [r2, #0]
 8004d86:	b003      	add	sp, #12
 8004d88:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004d8c:	f000 b922 	b.w	8004fd4 <__malloc_unlock>
 8004d90:	42a3      	cmp	r3, r4
 8004d92:	d908      	bls.n	8004da6 <_free_r+0x46>
 8004d94:	6825      	ldr	r5, [r4, #0]
 8004d96:	1961      	adds	r1, r4, r5
 8004d98:	428b      	cmp	r3, r1
 8004d9a:	bf01      	itttt	eq
 8004d9c:	6819      	ldreq	r1, [r3, #0]
 8004d9e:	685b      	ldreq	r3, [r3, #4]
 8004da0:	1949      	addeq	r1, r1, r5
 8004da2:	6021      	streq	r1, [r4, #0]
 8004da4:	e7ed      	b.n	8004d82 <_free_r+0x22>
 8004da6:	461a      	mov	r2, r3
 8004da8:	685b      	ldr	r3, [r3, #4]
 8004daa:	b10b      	cbz	r3, 8004db0 <_free_r+0x50>
 8004dac:	42a3      	cmp	r3, r4
 8004dae:	d9fa      	bls.n	8004da6 <_free_r+0x46>
 8004db0:	6811      	ldr	r1, [r2, #0]
 8004db2:	1855      	adds	r5, r2, r1
 8004db4:	42a5      	cmp	r5, r4
 8004db6:	d10b      	bne.n	8004dd0 <_free_r+0x70>
 8004db8:	6824      	ldr	r4, [r4, #0]
 8004dba:	4421      	add	r1, r4
 8004dbc:	1854      	adds	r4, r2, r1
 8004dbe:	42a3      	cmp	r3, r4
 8004dc0:	6011      	str	r1, [r2, #0]
 8004dc2:	d1e0      	bne.n	8004d86 <_free_r+0x26>
 8004dc4:	681c      	ldr	r4, [r3, #0]
 8004dc6:	685b      	ldr	r3, [r3, #4]
 8004dc8:	6053      	str	r3, [r2, #4]
 8004dca:	4421      	add	r1, r4
 8004dcc:	6011      	str	r1, [r2, #0]
 8004dce:	e7da      	b.n	8004d86 <_free_r+0x26>
 8004dd0:	d902      	bls.n	8004dd8 <_free_r+0x78>
 8004dd2:	230c      	movs	r3, #12
 8004dd4:	6003      	str	r3, [r0, #0]
 8004dd6:	e7d6      	b.n	8004d86 <_free_r+0x26>
 8004dd8:	6825      	ldr	r5, [r4, #0]
 8004dda:	1961      	adds	r1, r4, r5
 8004ddc:	428b      	cmp	r3, r1
 8004dde:	bf04      	itt	eq
 8004de0:	6819      	ldreq	r1, [r3, #0]
 8004de2:	685b      	ldreq	r3, [r3, #4]
 8004de4:	6063      	str	r3, [r4, #4]
 8004de6:	bf04      	itt	eq
 8004de8:	1949      	addeq	r1, r1, r5
 8004dea:	6021      	streq	r1, [r4, #0]
 8004dec:	6054      	str	r4, [r2, #4]
 8004dee:	e7ca      	b.n	8004d86 <_free_r+0x26>
 8004df0:	b003      	add	sp, #12
 8004df2:	bd30      	pop	{r4, r5, pc}
 8004df4:	20000460 	.word	0x20000460

08004df8 <sbrk_aligned>:
 8004df8:	b570      	push	{r4, r5, r6, lr}
 8004dfa:	4e0e      	ldr	r6, [pc, #56]	; (8004e34 <sbrk_aligned+0x3c>)
 8004dfc:	460c      	mov	r4, r1
 8004dfe:	6831      	ldr	r1, [r6, #0]
 8004e00:	4605      	mov	r5, r0
 8004e02:	b911      	cbnz	r1, 8004e0a <sbrk_aligned+0x12>
 8004e04:	f000 f88c 	bl	8004f20 <_sbrk_r>
 8004e08:	6030      	str	r0, [r6, #0]
 8004e0a:	4621      	mov	r1, r4
 8004e0c:	4628      	mov	r0, r5
 8004e0e:	f000 f887 	bl	8004f20 <_sbrk_r>
 8004e12:	1c43      	adds	r3, r0, #1
 8004e14:	d00a      	beq.n	8004e2c <sbrk_aligned+0x34>
 8004e16:	1cc4      	adds	r4, r0, #3
 8004e18:	f024 0403 	bic.w	r4, r4, #3
 8004e1c:	42a0      	cmp	r0, r4
 8004e1e:	d007      	beq.n	8004e30 <sbrk_aligned+0x38>
 8004e20:	1a21      	subs	r1, r4, r0
 8004e22:	4628      	mov	r0, r5
 8004e24:	f000 f87c 	bl	8004f20 <_sbrk_r>
 8004e28:	3001      	adds	r0, #1
 8004e2a:	d101      	bne.n	8004e30 <sbrk_aligned+0x38>
 8004e2c:	f04f 34ff 	mov.w	r4, #4294967295
 8004e30:	4620      	mov	r0, r4
 8004e32:	bd70      	pop	{r4, r5, r6, pc}
 8004e34:	20000464 	.word	0x20000464

08004e38 <_malloc_r>:
 8004e38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004e3c:	1ccd      	adds	r5, r1, #3
 8004e3e:	f025 0503 	bic.w	r5, r5, #3
 8004e42:	3508      	adds	r5, #8
 8004e44:	2d0c      	cmp	r5, #12
 8004e46:	bf38      	it	cc
 8004e48:	250c      	movcc	r5, #12
 8004e4a:	2d00      	cmp	r5, #0
 8004e4c:	4607      	mov	r7, r0
 8004e4e:	db01      	blt.n	8004e54 <_malloc_r+0x1c>
 8004e50:	42a9      	cmp	r1, r5
 8004e52:	d905      	bls.n	8004e60 <_malloc_r+0x28>
 8004e54:	230c      	movs	r3, #12
 8004e56:	603b      	str	r3, [r7, #0]
 8004e58:	2600      	movs	r6, #0
 8004e5a:	4630      	mov	r0, r6
 8004e5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004e60:	4e2e      	ldr	r6, [pc, #184]	; (8004f1c <_malloc_r+0xe4>)
 8004e62:	f000 f8b1 	bl	8004fc8 <__malloc_lock>
 8004e66:	6833      	ldr	r3, [r6, #0]
 8004e68:	461c      	mov	r4, r3
 8004e6a:	bb34      	cbnz	r4, 8004eba <_malloc_r+0x82>
 8004e6c:	4629      	mov	r1, r5
 8004e6e:	4638      	mov	r0, r7
 8004e70:	f7ff ffc2 	bl	8004df8 <sbrk_aligned>
 8004e74:	1c43      	adds	r3, r0, #1
 8004e76:	4604      	mov	r4, r0
 8004e78:	d14d      	bne.n	8004f16 <_malloc_r+0xde>
 8004e7a:	6834      	ldr	r4, [r6, #0]
 8004e7c:	4626      	mov	r6, r4
 8004e7e:	2e00      	cmp	r6, #0
 8004e80:	d140      	bne.n	8004f04 <_malloc_r+0xcc>
 8004e82:	6823      	ldr	r3, [r4, #0]
 8004e84:	4631      	mov	r1, r6
 8004e86:	4638      	mov	r0, r7
 8004e88:	eb04 0803 	add.w	r8, r4, r3
 8004e8c:	f000 f848 	bl	8004f20 <_sbrk_r>
 8004e90:	4580      	cmp	r8, r0
 8004e92:	d13a      	bne.n	8004f0a <_malloc_r+0xd2>
 8004e94:	6821      	ldr	r1, [r4, #0]
 8004e96:	3503      	adds	r5, #3
 8004e98:	1a6d      	subs	r5, r5, r1
 8004e9a:	f025 0503 	bic.w	r5, r5, #3
 8004e9e:	3508      	adds	r5, #8
 8004ea0:	2d0c      	cmp	r5, #12
 8004ea2:	bf38      	it	cc
 8004ea4:	250c      	movcc	r5, #12
 8004ea6:	4629      	mov	r1, r5
 8004ea8:	4638      	mov	r0, r7
 8004eaa:	f7ff ffa5 	bl	8004df8 <sbrk_aligned>
 8004eae:	3001      	adds	r0, #1
 8004eb0:	d02b      	beq.n	8004f0a <_malloc_r+0xd2>
 8004eb2:	6823      	ldr	r3, [r4, #0]
 8004eb4:	442b      	add	r3, r5
 8004eb6:	6023      	str	r3, [r4, #0]
 8004eb8:	e00e      	b.n	8004ed8 <_malloc_r+0xa0>
 8004eba:	6822      	ldr	r2, [r4, #0]
 8004ebc:	1b52      	subs	r2, r2, r5
 8004ebe:	d41e      	bmi.n	8004efe <_malloc_r+0xc6>
 8004ec0:	2a0b      	cmp	r2, #11
 8004ec2:	d916      	bls.n	8004ef2 <_malloc_r+0xba>
 8004ec4:	1961      	adds	r1, r4, r5
 8004ec6:	42a3      	cmp	r3, r4
 8004ec8:	6025      	str	r5, [r4, #0]
 8004eca:	bf18      	it	ne
 8004ecc:	6059      	strne	r1, [r3, #4]
 8004ece:	6863      	ldr	r3, [r4, #4]
 8004ed0:	bf08      	it	eq
 8004ed2:	6031      	streq	r1, [r6, #0]
 8004ed4:	5162      	str	r2, [r4, r5]
 8004ed6:	604b      	str	r3, [r1, #4]
 8004ed8:	4638      	mov	r0, r7
 8004eda:	f104 060b 	add.w	r6, r4, #11
 8004ede:	f000 f879 	bl	8004fd4 <__malloc_unlock>
 8004ee2:	f026 0607 	bic.w	r6, r6, #7
 8004ee6:	1d23      	adds	r3, r4, #4
 8004ee8:	1af2      	subs	r2, r6, r3
 8004eea:	d0b6      	beq.n	8004e5a <_malloc_r+0x22>
 8004eec:	1b9b      	subs	r3, r3, r6
 8004eee:	50a3      	str	r3, [r4, r2]
 8004ef0:	e7b3      	b.n	8004e5a <_malloc_r+0x22>
 8004ef2:	6862      	ldr	r2, [r4, #4]
 8004ef4:	42a3      	cmp	r3, r4
 8004ef6:	bf0c      	ite	eq
 8004ef8:	6032      	streq	r2, [r6, #0]
 8004efa:	605a      	strne	r2, [r3, #4]
 8004efc:	e7ec      	b.n	8004ed8 <_malloc_r+0xa0>
 8004efe:	4623      	mov	r3, r4
 8004f00:	6864      	ldr	r4, [r4, #4]
 8004f02:	e7b2      	b.n	8004e6a <_malloc_r+0x32>
 8004f04:	4634      	mov	r4, r6
 8004f06:	6876      	ldr	r6, [r6, #4]
 8004f08:	e7b9      	b.n	8004e7e <_malloc_r+0x46>
 8004f0a:	230c      	movs	r3, #12
 8004f0c:	603b      	str	r3, [r7, #0]
 8004f0e:	4638      	mov	r0, r7
 8004f10:	f000 f860 	bl	8004fd4 <__malloc_unlock>
 8004f14:	e7a1      	b.n	8004e5a <_malloc_r+0x22>
 8004f16:	6025      	str	r5, [r4, #0]
 8004f18:	e7de      	b.n	8004ed8 <_malloc_r+0xa0>
 8004f1a:	bf00      	nop
 8004f1c:	20000460 	.word	0x20000460

08004f20 <_sbrk_r>:
 8004f20:	b538      	push	{r3, r4, r5, lr}
 8004f22:	4d06      	ldr	r5, [pc, #24]	; (8004f3c <_sbrk_r+0x1c>)
 8004f24:	2300      	movs	r3, #0
 8004f26:	4604      	mov	r4, r0
 8004f28:	4608      	mov	r0, r1
 8004f2a:	602b      	str	r3, [r5, #0]
 8004f2c:	f7fc fc8e 	bl	800184c <_sbrk>
 8004f30:	1c43      	adds	r3, r0, #1
 8004f32:	d102      	bne.n	8004f3a <_sbrk_r+0x1a>
 8004f34:	682b      	ldr	r3, [r5, #0]
 8004f36:	b103      	cbz	r3, 8004f3a <_sbrk_r+0x1a>
 8004f38:	6023      	str	r3, [r4, #0]
 8004f3a:	bd38      	pop	{r3, r4, r5, pc}
 8004f3c:	20000468 	.word	0x20000468

08004f40 <_raise_r>:
 8004f40:	291f      	cmp	r1, #31
 8004f42:	b538      	push	{r3, r4, r5, lr}
 8004f44:	4604      	mov	r4, r0
 8004f46:	460d      	mov	r5, r1
 8004f48:	d904      	bls.n	8004f54 <_raise_r+0x14>
 8004f4a:	2316      	movs	r3, #22
 8004f4c:	6003      	str	r3, [r0, #0]
 8004f4e:	f04f 30ff 	mov.w	r0, #4294967295
 8004f52:	bd38      	pop	{r3, r4, r5, pc}
 8004f54:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8004f56:	b112      	cbz	r2, 8004f5e <_raise_r+0x1e>
 8004f58:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8004f5c:	b94b      	cbnz	r3, 8004f72 <_raise_r+0x32>
 8004f5e:	4620      	mov	r0, r4
 8004f60:	f000 f830 	bl	8004fc4 <_getpid_r>
 8004f64:	462a      	mov	r2, r5
 8004f66:	4601      	mov	r1, r0
 8004f68:	4620      	mov	r0, r4
 8004f6a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004f6e:	f000 b817 	b.w	8004fa0 <_kill_r>
 8004f72:	2b01      	cmp	r3, #1
 8004f74:	d00a      	beq.n	8004f8c <_raise_r+0x4c>
 8004f76:	1c59      	adds	r1, r3, #1
 8004f78:	d103      	bne.n	8004f82 <_raise_r+0x42>
 8004f7a:	2316      	movs	r3, #22
 8004f7c:	6003      	str	r3, [r0, #0]
 8004f7e:	2001      	movs	r0, #1
 8004f80:	e7e7      	b.n	8004f52 <_raise_r+0x12>
 8004f82:	2400      	movs	r4, #0
 8004f84:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8004f88:	4628      	mov	r0, r5
 8004f8a:	4798      	blx	r3
 8004f8c:	2000      	movs	r0, #0
 8004f8e:	e7e0      	b.n	8004f52 <_raise_r+0x12>

08004f90 <raise>:
 8004f90:	4b02      	ldr	r3, [pc, #8]	; (8004f9c <raise+0xc>)
 8004f92:	4601      	mov	r1, r0
 8004f94:	6818      	ldr	r0, [r3, #0]
 8004f96:	f7ff bfd3 	b.w	8004f40 <_raise_r>
 8004f9a:	bf00      	nop
 8004f9c:	20000014 	.word	0x20000014

08004fa0 <_kill_r>:
 8004fa0:	b538      	push	{r3, r4, r5, lr}
 8004fa2:	4d07      	ldr	r5, [pc, #28]	; (8004fc0 <_kill_r+0x20>)
 8004fa4:	2300      	movs	r3, #0
 8004fa6:	4604      	mov	r4, r0
 8004fa8:	4608      	mov	r0, r1
 8004faa:	4611      	mov	r1, r2
 8004fac:	602b      	str	r3, [r5, #0]
 8004fae:	f7fc fc33 	bl	8001818 <_kill>
 8004fb2:	1c43      	adds	r3, r0, #1
 8004fb4:	d102      	bne.n	8004fbc <_kill_r+0x1c>
 8004fb6:	682b      	ldr	r3, [r5, #0]
 8004fb8:	b103      	cbz	r3, 8004fbc <_kill_r+0x1c>
 8004fba:	6023      	str	r3, [r4, #0]
 8004fbc:	bd38      	pop	{r3, r4, r5, pc}
 8004fbe:	bf00      	nop
 8004fc0:	20000468 	.word	0x20000468

08004fc4 <_getpid_r>:
 8004fc4:	f7fc bc20 	b.w	8001808 <_getpid>

08004fc8 <__malloc_lock>:
 8004fc8:	4801      	ldr	r0, [pc, #4]	; (8004fd0 <__malloc_lock+0x8>)
 8004fca:	f000 b809 	b.w	8004fe0 <__retarget_lock_acquire_recursive>
 8004fce:	bf00      	nop
 8004fd0:	2000046c 	.word	0x2000046c

08004fd4 <__malloc_unlock>:
 8004fd4:	4801      	ldr	r0, [pc, #4]	; (8004fdc <__malloc_unlock+0x8>)
 8004fd6:	f000 b804 	b.w	8004fe2 <__retarget_lock_release_recursive>
 8004fda:	bf00      	nop
 8004fdc:	2000046c 	.word	0x2000046c

08004fe0 <__retarget_lock_acquire_recursive>:
 8004fe0:	4770      	bx	lr

08004fe2 <__retarget_lock_release_recursive>:
 8004fe2:	4770      	bx	lr

08004fe4 <_Unwind_GetDataRelBase>:
 8004fe4:	b508      	push	{r3, lr}
 8004fe6:	f7ff fe71 	bl	8004ccc <abort>

08004fea <_Unwind_GetTextRelBase>:
 8004fea:	b508      	push	{r3, lr}
 8004fec:	f7ff fffa 	bl	8004fe4 <_Unwind_GetDataRelBase>

08004ff0 <memcpy>:
 8004ff0:	440a      	add	r2, r1
 8004ff2:	4291      	cmp	r1, r2
 8004ff4:	f100 33ff 	add.w	r3, r0, #4294967295
 8004ff8:	d100      	bne.n	8004ffc <memcpy+0xc>
 8004ffa:	4770      	bx	lr
 8004ffc:	b510      	push	{r4, lr}
 8004ffe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005002:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005006:	4291      	cmp	r1, r2
 8005008:	d1f9      	bne.n	8004ffe <memcpy+0xe>
 800500a:	bd10      	pop	{r4, pc}

0800500c <_init>:
 800500c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800500e:	bf00      	nop
 8005010:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005012:	bc08      	pop	{r3}
 8005014:	469e      	mov	lr, r3
 8005016:	4770      	bx	lr

08005018 <_fini>:
 8005018:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800501a:	bf00      	nop
 800501c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800501e:	bc08      	pop	{r3}
 8005020:	469e      	mov	lr, r3
 8005022:	4770      	bx	lr
